import{ac as f,_ as g,r as b,c as e,o as p,z as r,t as F,a as o,F as y,p as d,q as h,b as B,m as u}from"./chunks/framework.CSxrXzdz.js";const m=3,k=3,t=f(Array.from(Array(m).keys()).map(a=>Array.from(Array(k).keys()).map(n=>"")));t[0][0]="1";t[0][1]="2";t[0][2]="= A0 + A1";function v(a){if(!a.startsWith("="))return a;a=a.slice(1).replace(/\b([A-Z])(\d{1,2})\b/g,(n,s,l)=>`get(${s.charCodeAt(0)-65},${l})`);try{return new Function("get",`return ${a}`)(A)}catch(n){return`#ERROR ${n}`}}function A(a,n){const s=v(t[a][n]),l=Number(s);return Number.isFinite(l)?l:s}const x=["title"],j=["value"],C={key:1},w={__name:"SpreadSheetCell",props:{c:Number,r:Number},setup(a){const n=a,s=b(!1);function l(c){s.value=!1,t[n.c][n.r]=c.target.value.trim()}return(c,i)=>(p(),e("div",{class:"cell",title:r(t)[a.c][a.r],onClick:i[1]||(i[1]=E=>s.value=!0)},[s.value?(p(),e("input",{key:0,value:r(t)[a.c][a.r],onChange:l,onBlur:l,onVnodeMounted:i[0]||(i[0]=({el:E})=>E.focus())},null,40,j)):(p(),e("span",C,F(r(v)(r(t)[a.c][a.r])),1))],8,x))}},S=g(w,[["__scopeId","data-v-3da8ea48"]]),P={__name:"SpreadSheet",setup(a){const n=t.map((s,l)=>String.fromCharCode(65+l));return(s,l)=>(p(),e("table",null,[o("thead",null,[o("tr",null,[l[0]||(l[0]=o("th",null,null,-1)),(p(!0),e(y,null,d(r(n),c=>(p(),e("th",null,F(c),1))),256))])]),o("tbody",null,[(p(!0),e(y,null,d(r(t)[0].length,c=>(p(),e("tr",null,[o("th",null,F(c-1),1),(p(!0),e(y,null,d(r(n),(i,E)=>(p(),e("td",null,[h(S,{r:c-1,c:E},null,8,["r","c"])]))),256))]))),256))])]))}},T=g(P,[["__scopeId","data-v-dffbe810"]]),q=JSON.parse('{"title":"深入响应式系统","description":"","frontmatter":{"outline":"deep"},"headers":[{"level":2,"title":"什么是响应性","slug":"what-is-reactivity","link":"#what-is-reactivity","children":[]},{"level":2,"title":"Vue 中的响应性是如何工作的","slug":"how-reactivity-works-in-vue","link":"#how-reactivity-works-in-vue","children":[]},{"level":2,"title":"运行时 vs. 编译时响应性","slug":"runtime-vs-compile-time-reactivity","link":"#runtime-vs-compile-time-reactivity","children":[]},{"level":2,"title":"响应性调试","slug":"reactivity-debugging","link":"#reactivity-debugging","children":[{"level":3,"title":"组件调试钩子","slug":"component-debugging-hooks","link":"#component-debugging-hooks","children":[]},{"level":3,"title":"计算属性调试","slug":"computed-debugging","link":"#computed-debugging","children":[]},{"level":3,"title":"侦听器调试","slug":"watcher-debugging","link":"#watcher-debugging","children":[]}]},{"level":2,"title":"与外部状态系统集成","slug":"integration-with-external-state-systems","link":"#integration-with-external-state-systems","children":[{"level":3,"title":"不可变数据","slug":"immutable-data","link":"#immutable-data","children":[]},{"level":3,"title":"状态机","slug":"state-machines","link":"#state-machines","children":[]},{"level":3,"title":"RxJS","slug":"rxjs","link":"#rxjs","children":[]}]},{"level":2,"title":"与信号 (signal) 的联系","slug":"connection-to-signals","link":"#connection-to-signals","children":[{"level":3,"title":"API 设计权衡","slug":"api-design-trade-offs","link":"#api-design-trade-offs","children":[]}]}],"relativePath":"guide/extras/reactivity-in-depth.md","filePath":"guide/extras/reactivity-in-depth.md"}'),V={name:"guide/extras/reactivity-in-depth.md"},R=Object.assign(V,{setup(a){return(n,s)=>(p(),e("div",null,[s[0]||(s[0]=o("h1",{id:"reactivity-in-depth",tabindex:"-1"},[u("深入响应式系统 "),o("a",{class:"header-anchor",href:"#reactivity-in-depth","aria-label":'Permalink to "深入响应式系统 {#reactivity-in-depth}"'},"​")],-1)),s[1]||(s[1]=o("p",null,"Vue 最标志性的功能就是其低侵入性的响应式系统。组件状态都是由响应式的 JavaScript 对象组成的。当更改它们时，视图会随即自动更新。这让状态管理更加简单直观，但理解它是如何工作的也是很重要的，这可以帮助我们避免一些常见的陷阱。在本节中，我们将深入研究 Vue 响应性系统的一些底层细节。",-1)),s[2]||(s[2]=o("h2",{id:"what-is-reactivity",tabindex:"-1"},[u("什么是响应性 "),o("a",{class:"header-anchor",href:"#what-is-reactivity","aria-label":'Permalink to "什么是响应性 {#what-is-reactivity}"'},"​")],-1)),s[3]||(s[3]=o("p",null,"这个术语在今天的各种编程讨论中经常出现，但人们说它的时候究竟是想表达什么意思呢？本质上，响应性是一种可以使我们声明式地处理变化的编程范式。一个经常被拿来当作典型例子的用例即是 Excel 表格：",-1)),h(T),s[4]||(s[4]=B("",99))]))}});export{q as __pageData,R as default};
