import{_ as n,c as a,b as p,o as l}from"./chunks/framework.B2oIMGqn.js";const d=JSON.parse('{"title":"应用实例 API","description":"","frontmatter":{},"headers":[{"level":2,"title":"createApp()","slug":"createapp","link":"#createapp","children":[]},{"level":2,"title":"createSSRApp()","slug":"createssrapp","link":"#createssrapp","children":[]},{"level":2,"title":"app.mount()","slug":"app-mount","link":"#app-mount","children":[]},{"level":2,"title":"app.unmount()","slug":"app-unmount","link":"#app-unmount","children":[]},{"level":2,"title":"app.onUnmount()","slug":"app-onunmount","link":"#app-onunmount","children":[]},{"level":2,"title":"app.component()","slug":"app-component","link":"#app-component","children":[]},{"level":2,"title":"app.directive()","slug":"app-directive","link":"#app-directive","children":[]},{"level":2,"title":"app.use()","slug":"app-use","link":"#app-use","children":[]},{"level":2,"title":"app.mixin()","slug":"app-mixin","link":"#app-mixin","children":[]},{"level":2,"title":"app.provide()","slug":"app-provide","link":"#app-provide","children":[]},{"level":2,"title":"app.runWithContext()","slug":"app-runwithcontext","link":"#app-runwithcontext","children":[]},{"level":2,"title":"app.version","slug":"app-version","link":"#app-version","children":[]},{"level":2,"title":"app.config","slug":"app-config","link":"#app-config","children":[]},{"level":2,"title":"app.config.errorHandler","slug":"app-config-errorhandler","link":"#app-config-errorhandler","children":[]},{"level":2,"title":"app.config.warnHandler","slug":"app-config-warnhandler","link":"#app-config-warnhandler","children":[]},{"level":2,"title":"app.config.performance","slug":"app-config-performance","link":"#app-config-performance","children":[]},{"level":2,"title":"app.config.compilerOptions","slug":"app-config-compileroptions","link":"#app-config-compileroptions","children":[{"level":3,"title":"app.config.compilerOptions.isCustomElement","slug":"app-config-compileroptions-iscustomelement","link":"#app-config-compileroptions-iscustomelement","children":[]},{"level":3,"title":"app.config.compilerOptions.whitespace","slug":"app-config-compileroptions-whitespace","link":"#app-config-compileroptions-whitespace","children":[]},{"level":3,"title":"app.config.compilerOptions.delimiters","slug":"app-config-compileroptions-delimiters","link":"#app-config-compileroptions-delimiters","children":[]},{"level":3,"title":"app.config.compilerOptions.comments","slug":"app-config-compileroptions-comments","link":"#app-config-compileroptions-comments","children":[]}]},{"level":2,"title":"app.config.globalProperties","slug":"app-config-globalproperties","link":"#app-config-globalproperties","children":[]},{"level":2,"title":"app.config.optionMergeStrategies","slug":"app-config-optionmergestrategies","link":"#app-config-optionmergestrategies","children":[]},{"level":2,"title":"app.config.idPrefix","slug":"app-config-idprefix","link":"#app-config-idprefix","children":[]},{"level":2,"title":"app.config.throwUnhandledErrorInProduction","slug":"app-config-throwunhandlederrorinproduction","link":"#app-config-throwunhandlederrorinproduction","children":[]}],"relativePath":"api/application.md","filePath":"api/application.md"}'),o={name:"api/application.md"};function e(t,s,c,r,i,E){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="application-api" tabindex="-1">应用实例 API <a class="header-anchor" href="#application-api" aria-label="Permalink to &quot;应用实例 API {#application-api}&quot;">​</a></h1><h2 id="createapp" tabindex="-1">createApp() <a class="header-anchor" href="#createapp" aria-label="Permalink to &quot;createApp() {#createapp}&quot;">​</a></h2><p>创建一个应用实例。</p><ul><li><p><strong>类型</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> createApp</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">rootComponent</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Component</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">rootProps</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> object</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> App</span></span></code></pre></div></li><li><p><strong>详细信息</strong></p><p>第一个参数是根组件。第二个参数可选，它是要传递给根组件的 props。</p></li><li><p><strong>示例</strong></p><p>可以直接内联根组件：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { createApp } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> app</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> createApp</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#6A737D;">  /* 根组件选项 */</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre></div><p>也可以使用从别处导入的组件：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { createApp } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> App </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;./App.vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> app</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> createApp</span><span style="color:#E1E4E8;">(App)</span></span></code></pre></div></li><li><p><strong>参考</strong><a href="/guide/essentials/application.html">指南 - 创建一个 Vue 应用实例</a></p></li></ul><h2 id="createssrapp" tabindex="-1">createSSRApp() <a class="header-anchor" href="#createssrapp" aria-label="Permalink to &quot;createSSRApp() {#createssrapp}&quot;">​</a></h2><p>以 <a href="/guide/scaling-up/ssr.html#client-hydration">SSR 激活</a>模式创建一个应用实例。用法与 <code>createApp()</code> 完全相同。</p><h2 id="app-mount" tabindex="-1">app.mount() <a class="header-anchor" href="#app-mount" aria-label="Permalink to &quot;app.mount() {#app-mount}&quot;">​</a></h2><p>将应用实例挂载在一个容器元素中。</p><ul><li><p><strong>类型</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">interface</span><span style="color:#B392F0;"> App</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  mount</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">rootContainer</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Element</span><span style="color:#F97583;"> |</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> ComponentPublicInstance</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>详细信息</strong></p><p>参数可以是一个实际的 DOM 元素或一个 CSS 选择器 (使用第一个匹配到的元素)。返回根组件的实例。</p><p>如果该组件有模板或定义了渲染函数，它将替换容器内所有现存的 DOM 节点。否则在运行时编译器可用的情况下，容器元素的 <code>innerHTML</code> 将被用作模板。</p><p>在 SSR 激活模式下，它将激活容器内现有的 DOM 节点。如果出现了<a href="/guide/scaling-up/ssr.html#hydration-mismatch">激活不匹配</a>，那么现有的 DOM 节点将会被修改以匹配客户端的实际渲染结果。</p><p>对于每个应用实例，<code>mount()</code> 仅能调用一次。</p></li><li><p><strong>示例</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { createApp } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> app</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> createApp</span><span style="color:#E1E4E8;">(</span><span style="color:#6A737D;">/* ... */</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">mount</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;#app&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre></div><p>也可以挂载到一个实际的 DOM 元素。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">mount</span><span style="color:#E1E4E8;">(document.body.firstChild)</span></span></code></pre></div></li></ul><h2 id="app-unmount" tabindex="-1">app.unmount() <a class="header-anchor" href="#app-unmount" aria-label="Permalink to &quot;app.unmount() {#app-unmount}&quot;">​</a></h2><p>卸载一个已挂载的应用实例。卸载一个应用会触发该应用组件树内所有组件的卸载生命周期钩子。</p><ul><li><p><strong>类型</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">interface</span><span style="color:#B392F0;"> App</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  unmount</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> void</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></li></ul><h2 id="app-onunmount" tabindex="-1">app.onUnmount() <sup class="vt-badge" data-text="3.5+"></sup> <a class="header-anchor" href="#app-onunmount" aria-label="Permalink to &quot;app.onUnmount() &lt;sup class=&quot;vt-badge&quot; data-text=&quot;3.5+&quot; /&gt; {#app-onunmount}&quot;">​</a></h2><p>注册一个回调函数，在应用卸载时调用。</p><ul><li><p><strong>类型</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">interface</span><span style="color:#B392F0;"> App</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  onUnmount</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">callback</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#79B8FF;"> any</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> void</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></li></ul><h2 id="app-component" tabindex="-1">app.component() <a class="header-anchor" href="#app-component" aria-label="Permalink to &quot;app.component() {#app-component}&quot;">​</a></h2><p>如果同时传递一个组件名字符串及其定义，则注册一个全局组件；如果只传递一个名字，则会返回用该名字注册的组件 (如果存在的话)。</p><ul><li><p><strong>类型</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">interface</span><span style="color:#B392F0;"> App</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  component</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Component</span><span style="color:#F97583;"> |</span><span style="color:#79B8FF;"> undefined</span></span>
<span class="line"><span style="color:#B392F0;">  component</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">component</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Component</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> this</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>示例</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { createApp } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> app</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> createApp</span><span style="color:#E1E4E8;">({})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 注册一个选项对象</span></span>
<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">component</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;MyComponent&#39;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#6A737D;">  /* ... */</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 得到一个已注册的组件</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> MyComponent</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> app.</span><span style="color:#B392F0;">component</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;MyComponent&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre></div></li><li><p><strong>参考</strong><a href="/guide/components/registration.html">组件注册</a></p></li></ul><h2 id="app-directive" tabindex="-1">app.directive() <a class="header-anchor" href="#app-directive" aria-label="Permalink to &quot;app.directive() {#app-directive}&quot;">​</a></h2><p>如果同时传递一个名字和一个指令定义，则注册一个全局指令；如果只传递一个名字，则会返回用该名字注册的指令 (如果存在的话)。</p><ul><li><p><strong>类型</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">interface</span><span style="color:#B392F0;"> App</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  directive</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Directive</span><span style="color:#F97583;"> |</span><span style="color:#79B8FF;"> undefined</span></span>
<span class="line"><span style="color:#B392F0;">  directive</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">directive</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Directive</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> this</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>示例</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { createApp } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> app</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> createApp</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#6A737D;">  /* ... */</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 注册（对象形式的指令）</span></span>
<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">directive</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;myDirective&#39;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#6A737D;">  /* 自定义指令钩子 */</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 注册（函数形式的指令）</span></span>
<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">directive</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;myDirective&#39;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">  /* ... */</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 得到一个已注册的指令</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> myDirective</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> app.</span><span style="color:#B392F0;">directive</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;myDirective&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre></div></li><li><p><strong>参考</strong><a href="/guide/reusability/custom-directives.html">自定义指令</a></p></li></ul><h2 id="app-use" tabindex="-1">app.use() <a class="header-anchor" href="#app-use" aria-label="Permalink to &quot;app.use() {#app-use}&quot;">​</a></h2><p>安装一个<a href="/guide/reusability/plugins.html">插件</a>。</p><ul><li><p><strong>类型</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">interface</span><span style="color:#B392F0;"> App</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  use</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">plugin</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Plugin</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">...</span><span style="color:#FFAB70;">options</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> any</span><span style="color:#E1E4E8;">[])</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> this</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>详细信息</strong></p><p>第一个参数应是插件本身，可选的第二个参数是要传递给插件的选项。</p><p>插件可以是一个带 <code>install()</code> 方法的对象，亦或直接是一个将被用作 <code>install()</code> 方法的函数。插件选项 (<code>app.use()</code> 的第二个参数) 将会传递给插件的 <code>install()</code> 方法。</p><p>若 <code>app.use()</code> 对同一个插件多次调用，该插件只会被安装一次。</p></li><li><p><strong>示例</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { createApp } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> MyPlugin </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;./plugins/MyPlugin&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> app</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> createApp</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#6A737D;">  /* ... */</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;">(MyPlugin)</span></span></code></pre></div></li><li><p><strong>参考</strong><a href="/guide/reusability/plugins.html">插件</a></p></li></ul><h2 id="app-mixin" tabindex="-1">app.mixin() <a class="header-anchor" href="#app-mixin" aria-label="Permalink to &quot;app.mixin() {#app-mixin}&quot;">​</a></h2><p>应用一个全局 mixin (适用于该应用的范围)。一个全局的 mixin 会作用于应用中的每个组件实例。</p><div class="warning custom-block"><p class="custom-block-title">不推荐</p><p>Mixins 在 Vue 3 支持主要是为了向后兼容，因为生态中有许多库使用到。在新的应用中应尽量避免使用 mixin，特别是全局 mixin。</p><p>若要进行逻辑复用，推荐用<a href="/guide/reusability/composables.html">组合式函数</a>来替代。</p></div><ul><li><p><strong>类型</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">interface</span><span style="color:#B392F0;"> App</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  mixin</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">mixin</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> ComponentOptions</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> this</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></li></ul><h2 id="app-provide" tabindex="-1">app.provide() <a class="header-anchor" href="#app-provide" aria-label="Permalink to &quot;app.provide() {#app-provide}&quot;">​</a></h2><p>提供一个值，可以在应用中的所有后代组件中注入使用。</p><ul><li><p><strong>类型</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">interface</span><span style="color:#B392F0;"> App</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  provide</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt;(</span><span style="color:#FFAB70;">key</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> InjectionKey</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">|</span><span style="color:#79B8FF;"> symbol</span><span style="color:#F97583;"> |</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">value</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> T</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> this</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>详细信息</strong></p><p>第一个参数应当是注入的 key，第二个参数则是提供的值。返回应用实例本身。</p></li><li><p><strong>示例</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { createApp } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> app</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> createApp</span><span style="color:#E1E4E8;">(</span><span style="color:#6A737D;">/* ... */</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">provide</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;message&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;hello&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre></div><p>在应用的某个组件中：</p><div class="composition-api"><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { inject } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  setup</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">inject</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;message&#39;</span><span style="color:#E1E4E8;">)) </span><span style="color:#6A737D;">// &#39;hello&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></div><div class="options-api"><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  inject: [</span><span style="color:#9ECBFF;">&#39;message&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#B392F0;">  created</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.message) </span><span style="color:#6A737D;">// &#39;hello&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></div></li><li><p><strong>参考</strong></p><ul><li><a href="/guide/components/provide-inject.html">依赖注入</a></li><li><a href="/guide/components/provide-inject.html#app-level-provide">应用层 Provide</a></li><li><a href="#app-runwithcontext">app.runWithContext()</a></li></ul></li></ul><h2 id="app-runwithcontext" tabindex="-1">app.runWithContext() <a class="header-anchor" href="#app-runwithcontext" aria-label="Permalink to &quot;app.runWithContext() {#app-runwithcontext}&quot;">​</a></h2><ul><li>仅在 3.3+ 中支持</li></ul><p>使用当前应用作为注入上下文执行回调函数。</p><ul><li><p><strong>类型</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">interface</span><span style="color:#B392F0;"> App</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  runWithContext</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt;(</span><span style="color:#B392F0;">fn</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> T</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> T</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>详情</strong></p><p>需要一个回调函数并立即运行该回调。在回调同步调用期间，即使没有当前活动的组件实例，<code>inject()</code> 调用也可以从当前应用提供的值中查找注入。回调的返回值也将被返回。</p></li><li><p><strong>示例</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { inject } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">provide</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;id&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> injected</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> app.</span><span style="color:#B392F0;">runWithContext</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">  return</span><span style="color:#B392F0;"> inject</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;id&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(injected) </span><span style="color:#6A737D;">// 1</span></span></code></pre></div></li></ul><h2 id="app-version" tabindex="-1">app.version <a class="header-anchor" href="#app-version" aria-label="Permalink to &quot;app.version {#app-version}&quot;">​</a></h2><p>提供当前应用所使用的 Vue 版本号。这在<a href="/guide/reusability/plugins.html">插件</a>中很有用，因为可能需要根据不同的 Vue 版本执行不同的逻辑。</p><ul><li><p><strong>类型</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">interface</span><span style="color:#B392F0;"> App</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#FFAB70;">  version</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>示例</strong></p><p>在一个插件中对版本作判断：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  install</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">app</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">    const</span><span style="color:#79B8FF;"> version</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> Number</span><span style="color:#E1E4E8;">(app.version.</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;.&#39;</span><span style="color:#E1E4E8;">)[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">])</span></span>
<span class="line"><span style="color:#F97583;">    if</span><span style="color:#E1E4E8;"> (version </span><span style="color:#F97583;">&lt;</span><span style="color:#79B8FF;"> 3</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      console.</span><span style="color:#B392F0;">warn</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;This plugin requires Vue 3&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>参考</strong><a href="/api/general.html#version">全局 API - version</a></p></li></ul><h2 id="app-config" tabindex="-1">app.config <a class="header-anchor" href="#app-config" aria-label="Permalink to &quot;app.config {#app-config}&quot;">​</a></h2><p>每个应用实例都会暴露一个 <code>config</code> 对象，其中包含了对这个应用的配置设定。你可以在挂载应用前更改这些属性 (下面列举了每个属性的对应文档)。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { createApp } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> app</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> createApp</span><span style="color:#E1E4E8;">(</span><span style="color:#6A737D;">/* ... */</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(app.config)</span></span></code></pre></div><h2 id="app-config-errorhandler" tabindex="-1">app.config.errorHandler <a class="header-anchor" href="#app-config-errorhandler" aria-label="Permalink to &quot;app.config.errorHandler {#app-config-errorhandler}&quot;">​</a></h2><p>用于为应用内抛出的未捕获错误指定一个全局处理函数。</p><ul><li><p><strong>类型</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">interface</span><span style="color:#B392F0;"> AppConfig</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  errorHandler</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#FFAB70;">    err</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> unknown</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#FFAB70;">    instance</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> ComponentPublicInstance</span><span style="color:#F97583;"> |</span><span style="color:#79B8FF;"> null</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#6A737D;">    // \`info\` 是一个 Vue 特定的错误信息</span></span>
<span class="line"><span style="color:#6A737D;">    // 例如：错误是在哪个生命周期的钩子上抛出的</span></span>
<span class="line"><span style="color:#FFAB70;">    info</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span></span>
<span class="line"><span style="color:#E1E4E8;">  ) </span><span style="color:#F97583;">=&gt;</span><span style="color:#79B8FF;"> void</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>详细信息</strong></p><p>错误处理器接收三个参数：错误对象、触发该错误的组件实例和一个指出错误来源类型信息的字符串。</p><p>它可以从下面这些来源中捕获错误：</p><ul><li>组件渲染器</li><li>事件处理器</li><li>生命周期钩子</li><li><code>setup()</code> 函数</li><li>侦听器</li><li>自定义指令钩子</li><li>过渡 (Transition) 钩子</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>在生产环境中，第三个参数 (<code>info</code>) 是一个缩短的代码，而不是含有完整信息的字符串。错误代码和字符串的映射可以参阅<a href="/error-reference/#runtime-errors">生产环境错误代码参考</a>。</p></div></li><li><p><strong>示例</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">app.config.</span><span style="color:#B392F0;">errorHandler</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">instance</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">info</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">  // 处理错误，例如：报告给一个服务</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></li></ul><h2 id="app-config-warnhandler" tabindex="-1">app.config.warnHandler <a class="header-anchor" href="#app-config-warnhandler" aria-label="Permalink to &quot;app.config.warnHandler {#app-config-warnhandler}&quot;">​</a></h2><p>用于为 Vue 的运行时警告指定一个自定义处理函数。</p><ul><li><p><strong>类型</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">interface</span><span style="color:#B392F0;"> AppConfig</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  warnHandler</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#FFAB70;">    msg</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#FFAB70;">    instance</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> ComponentPublicInstance</span><span style="color:#F97583;"> |</span><span style="color:#79B8FF;"> null</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#FFAB70;">    trace</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span></span>
<span class="line"><span style="color:#E1E4E8;">  ) </span><span style="color:#F97583;">=&gt;</span><span style="color:#79B8FF;"> void</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>详细信息</strong></p><p>警告处理器将接受警告信息作为其第一个参数，来源组件实例为第二个参数，以及组件追踪字符串作为第三个参数。</p><p>这可以用于过滤筛选特定的警告信息，降低控制台输出的冗余。所有的 Vue 警告都需要在开发阶段得到解决，因此仅建议在调试期间选取部分特定警告，并且应该在调试完成之后立刻移除。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>警告仅会在开发阶段显示，因此在生产环境中，这条配置将被忽略。</p></div></li><li><p><strong>示例</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">app.config.</span><span style="color:#B392F0;">warnHandler</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">msg</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">instance</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">trace</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">  // \`trace\` 是组件层级结构的追踪</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></li></ul><h2 id="app-config-performance" tabindex="-1">app.config.performance <a class="header-anchor" href="#app-config-performance" aria-label="Permalink to &quot;app.config.performance {#app-config-performance}&quot;">​</a></h2><p>设置此项为 <code>true</code> 可以在浏览器开发工具的“性能/时间线”页中启用对组件初始化、编译、渲染和修补的性能表现追踪。仅在开发模式和支持 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Performance/mark" target="_blank" rel="noreferrer">performance.mark</a> API 的浏览器中工作。</p><ul><li><p><strong>类型</strong>：<code>boolean</code></p></li><li><p><strong>参考</strong><a href="/guide/best-practices/performance.html">指南 - 性能</a></p></li></ul><h2 id="app-config-compileroptions" tabindex="-1">app.config.compilerOptions <a class="header-anchor" href="#app-config-compileroptions" aria-label="Permalink to &quot;app.config.compilerOptions {#app-config-compileroptions}&quot;">​</a></h2><p>配置运行时编译器的选项。设置在此对象上的值将会在浏览器内进行模板编译时使用，并会影响到所配置应用的所有组件。另外你也可以通过 <a href="/api/options-rendering.html#compileroptions"><code>compilerOptions</code> 选项</a>在每个组件的基础上覆盖这些选项。</p><div class="warning custom-block"><p class="custom-block-title">重要</p><p>此配置项仅在完整构建版本，即可以在浏览器中编译模板的 <code>vue.js</code> 文件中可用。如果你用的是带构建的项目配置，且使用的是仅含运行时的 Vue 文件版本，那么编译器选项必须通过构建工具的相关配置传递给 <code>@vue/compiler-dom</code>。</p><ul><li><p><code>vue-loader</code>：<a href="https://vue-loader.vuejs.org/zh/options.html#compileroptions" target="_blank" rel="noreferrer">通过 <code>compilerOptions</code> loader 的选项传递</a>。并请阅读<a href="https://cli.vuejs.org/zh/guide/webpack.html#%E4%BF%AE%E6%94%B9-loader-%E9%80%89%E9%A1%B9" target="_blank" rel="noreferrer">如何在 <code>vue-cli</code> 中配置它</a>。</p></li><li><p><code>vite</code>：<a href="https://github.com/vitejs/vite-plugin-vue/tree/main/packages/plugin-vue#options" target="_blank" rel="noreferrer">通过 <code>@vitejs/plugin-vue</code> 的选项传递</a>。</p></li></ul></div><h3 id="app-config-compileroptions-iscustomelement" tabindex="-1">app.config.compilerOptions.isCustomElement <a class="header-anchor" href="#app-config-compileroptions-iscustomelement" aria-label="Permalink to &quot;app.config.compilerOptions.isCustomElement {#app-config-compileroptions-iscustomelement}&quot;">​</a></h3><p>用于指定一个检查方法来识别原生自定义元素。</p><ul><li><p><strong>类型</strong> <code>(tag: string) =&gt; boolean</code></p></li><li><p><strong>详细信息</strong></p><p>如果该标签需要当作原生自定义元素则应返回 <code>true</code>。对匹配到的标签，Vue 会将其渲染为原生元素而非将其视为一个 Vue 组件来解析。</p><p>原生 HTML 和 SVG 标签不需要在此函数中进行匹配，Vue 的解析器会自动识别它们。</p></li><li><p><strong>示例</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 将所有标签前缀为 \`ion-\` 的标签视为自定义元素</span></span>
<span class="line"><span style="color:#E1E4E8;">app.config.compilerOptions.</span><span style="color:#B392F0;">isCustomElement</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">tag</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">  return</span><span style="color:#E1E4E8;"> tag.</span><span style="color:#B392F0;">startsWith</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;ion-&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>参考</strong> <a href="/guide/extras/web-components.html">Vue 与 Web Components</a></p></li></ul><h3 id="app-config-compileroptions-whitespace" tabindex="-1">app.config.compilerOptions.whitespace <a class="header-anchor" href="#app-config-compileroptions-whitespace" aria-label="Permalink to &quot;app.config.compilerOptions.whitespace {#app-config-compileroptions-whitespace}&quot;">​</a></h3><p>用于调整模板中空格的处理行为。</p><ul><li><p><strong>类型</strong> <code>&#39;condense&#39; | &#39;preserve&#39;</code></p></li><li><p><strong>默认</strong> <code>&#39;condense&#39;</code></p></li><li><p><strong>详细信息</strong></p><p>Vue 移除/缩短了模板中的空格以求更高效的模板输出。默认的策略是“缩短”，表现行为如下：</p><ol><li>元素中开头和结尾的空格字符将被缩短为一个空格。</li><li>包含换行的元素之间的空白字符会被删除。</li><li>文本节点中连续的空白字符被缩短成一个空格。</li></ol><p>设置该选项为 <code>&#39;preserve&#39;</code> 则会禁用 (2) 和 (3) 两项。</p></li><li><p><strong>示例</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">app.config.compilerOptions.whitespace </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &#39;preserve&#39;</span></span></code></pre></div></li></ul><h3 id="app-config-compileroptions-delimiters" tabindex="-1">app.config.compilerOptions.delimiters <a class="header-anchor" href="#app-config-compileroptions-delimiters" aria-label="Permalink to &quot;app.config.compilerOptions.delimiters {#app-config-compileroptions-delimiters}&quot;">​</a></h3><p>用于调整模板内文本插值的分隔符。</p><ul><li><p><strong>类型</strong> <code>[string, string]</code></p></li><li><p><strong>默认</strong> <code>[&#39;{{&#39;, &#39;}}&#39;]</code></p></li><li><p><strong>详细信息</strong></p><p>此项通常是为了避免与同样使用 mustache 语法的服务器端框架发生冲突。</p></li><li><p><strong>示例</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 分隔符改为ES6模板字符串样式</span></span>
<span class="line"><span style="color:#E1E4E8;">app.config.compilerOptions.delimiters </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;\${&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;}&#39;</span><span style="color:#E1E4E8;">]</span></span></code></pre></div></li></ul><h3 id="app-config-compileroptions-comments" tabindex="-1">app.config.compilerOptions.comments <a class="header-anchor" href="#app-config-compileroptions-comments" aria-label="Permalink to &quot;app.config.compilerOptions.comments {#app-config-compileroptions-comments}&quot;">​</a></h3><p>用于调整是否移除模板中的 HTML 注释。</p><ul><li><p><strong>类型</strong> <code>boolean</code></p></li><li><p><strong>默认</strong> <code>false</code></p></li><li><p><strong>详细信息</strong></p><p>默认情况下，Vue 会在生产环境移除所有注释，设置该项为 <code>true</code> 会强制 Vue 在生产环境也保留注释。在开发过程中，注释是始终被保留的。这个选项通常在 Vue 与其他依赖 HTML 注释的库一起使用时使用。</p></li><li><p><strong>示例</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">app.config.compilerOptions.comments </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> true</span></span></code></pre></div></li></ul><h2 id="app-config-globalproperties" tabindex="-1">app.config.globalProperties <a class="header-anchor" href="#app-config-globalproperties" aria-label="Permalink to &quot;app.config.globalProperties {#app-config-globalproperties}&quot;">​</a></h2><p>一个用于注册能够被应用内所有组件实例访问到的全局属性的对象。</p><ul><li><p><strong>类型</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">interface</span><span style="color:#B392F0;"> AppConfig</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#FFAB70;">  globalProperties</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Record</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>详细信息</strong></p><p>这是对 Vue 2 中 <code>Vue.prototype</code> 使用方式的一种替代，此写法在 Vue 3 已经不存在了。与任何全局的东西一样，应该谨慎使用。</p><p>如果全局属性与组件自己的属性冲突，组件自己的属性将具有更高的优先级。</p></li><li><p><strong>用法</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">app.config.globalProperties.msg </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &#39;hello&#39;</span></span></code></pre></div><p>这使得 <code>msg</code> 在应用的任意组件模板上都可用，并且也可以通过任意组件实例的 <code>this</code> 访问到：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  mounted</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.msg) </span><span style="color:#6A737D;">// &#39;hello&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>参考</strong><a href="/guide/typescript/options-api.html#augmenting-global-properties">指南 - 扩展全局属性</a> <sup class="vt-badge ts"></sup></p></li></ul><h2 id="app-config-optionmergestrategies" tabindex="-1">app.config.optionMergeStrategies <a class="header-anchor" href="#app-config-optionmergestrategies" aria-label="Permalink to &quot;app.config.optionMergeStrategies {#app-config-optionmergestrategies}&quot;">​</a></h2><p>一个用于定义自定义组件选项的合并策略的对象。</p><ul><li><p><strong>类型</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">interface</span><span style="color:#B392F0;"> AppConfig</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#FFAB70;">  optionMergeStrategies</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Record</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">OptionMergeFunction</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#B392F0;"> OptionMergeFunction</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">to</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> unknown</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">from</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> unknown</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#79B8FF;"> any</span></span></code></pre></div></li><li><p><strong>详细信息</strong></p><p>一些插件或库对自定义组件选项添加了支持 (通过注入全局 mixin)。这些选项在有多个不同来源时可能需要特殊的合并策略 (例如 mixin 或组件继承)。</p><p>可以在 <code>app.config.optionMergeStrategies</code> 对象上以选项的名称作为 key，可以为一个自定义选项注册分配一个合并策略函数。</p><p>合并策略函数分别接受在父实例和子实例上定义的该选项的值作为第一和第二个参数。</p></li><li><p><strong>示例</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> app</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> createApp</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#6A737D;">  // 自身的选项</span></span>
<span class="line"><span style="color:#E1E4E8;">  msg: </span><span style="color:#9ECBFF;">&#39;Vue&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#6A737D;">  // 来自 mixin 的选项</span></span>
<span class="line"><span style="color:#E1E4E8;">  mixins: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">      msg: </span><span style="color:#9ECBFF;">&#39;Hello &#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  ],</span></span>
<span class="line"><span style="color:#B392F0;">  mounted</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#6A737D;">    // 在 this.$options 上暴露被合并的选项</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.$options.msg)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 为 \`msg\` 定义一个合并策略函数</span></span>
<span class="line"><span style="color:#E1E4E8;">app.config.optionMergeStrategies.</span><span style="color:#B392F0;">msg</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">parent</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">child</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">  return</span><span style="color:#E1E4E8;"> (parent </span><span style="color:#F97583;">||</span><span style="color:#9ECBFF;"> &#39;&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> (child </span><span style="color:#F97583;">||</span><span style="color:#9ECBFF;"> &#39;&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">mount</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;#app&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// 打印 &#39;Hello Vue&#39;</span></span></code></pre></div></li><li><p><strong>参考</strong><a href="/api/component-instance.html#options">组件实例 - <code>$options</code></a></p></li></ul><h2 id="app-config-idprefix" tabindex="-1">app.config.idPrefix <sup class="vt-badge" data-text="3.5+"></sup> <a class="header-anchor" href="#app-config-idprefix" aria-label="Permalink to &quot;app.config.idPrefix &lt;sup class=&quot;vt-badge&quot; data-text=&quot;3.5+&quot; /&gt; {#app-config-idprefix}&quot;">​</a></h2><p>配置此应用中通过 <a href="/api/composition-api-helpers.html#useid">useId()</a> 生成的所有 ID 的前缀。</p><ul><li><p><strong>类型</strong> <code>string</code></p></li><li><p><strong>默认值</strong> <code>undefined</code></p></li><li><p><strong>示例</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">app.config.idPrefix </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &#39;myApp&#39;</span></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 在组件中：</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> id1</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> useId</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// &#39;myApp:0&#39;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> id2</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> useId</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// &#39;myApp:1&#39;</span></span></code></pre></div></li></ul><h2 id="app-config-throwunhandlederrorinproduction" tabindex="-1">app.config.throwUnhandledErrorInProduction <sup class="vt-badge" data-text="3.5+"></sup> <a class="header-anchor" href="#app-config-throwunhandlederrorinproduction" aria-label="Permalink to &quot;app.config.throwUnhandledErrorInProduction &lt;sup class=&quot;vt-badge&quot; data-text=&quot;3.5+&quot; /&gt; {#app-config-throwunhandlederrorinproduction}&quot;">​</a></h2><p>强制在生产模式下抛出未处理的错误。</p><ul><li><p><strong>类型</strong> <code>boolean</code></p></li><li><p><strong>默认值</strong> <code>false</code></p></li><li><p><strong>详情</strong></p><p>默认情况下，在 Vue 应用中抛出但未显式处理的错误在开发和生产模式下有不同的行为：</p><ul><li><p>在开发模式下，错误会被抛出并可能导致应用崩溃。这是为了使错误更加突出，以便在开发过程中被注意到并修复。</p></li><li><p>在生产模式下，错误只会被记录到控制台以尽量减少对最终用户的影响。然而，这可能会导致只在生产中发生的错误无法被错误监控服务捕获。</p></li></ul><p>通过将 <code>app.config.throwUnhandledErrorInProduction</code> 设置为 <code>true</code>，即使在生产模式下也会抛出未处理的错误。</p></li></ul>`,77)]))}const g=n(o,[["render",e]]);export{d as __pageData,g as default};
