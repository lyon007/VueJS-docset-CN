import{c as n,b as l,a as e,i as t,s as c,o as p}from"./chunks/framework.B2oIMGqn.js";const r={class:"demo"},y=JSON.parse('{"title":"自定义指令","description":"","frontmatter":{},"headers":[{"level":2,"title":"介绍","slug":"introduction","link":"#introduction","children":[]},{"level":2,"title":"自定义指令的使用时机","slug":"when-to-use","link":"#when-to-use","children":[]},{"level":2,"title":"指令钩子","slug":"directive-hooks","link":"#directive-hooks","children":[{"level":3,"title":"钩子参数","slug":"hook-arguments","link":"#hook-arguments","children":[]}]},{"level":2,"title":"简化形式","slug":"function-shorthand","link":"#function-shorthand","children":[]},{"level":2,"title":"对象字面量","slug":"object-literals","link":"#object-literals","children":[]},{"level":2,"title":"在组件上使用","slug":"usage-on-components","link":"#usage-on-components","children":[]}],"relativePath":"guide/reusability/custom-directives.md","filePath":"guide/reusability/custom-directives.md"}'),E={name:"guide/reusability/custom-directives.md"},u=Object.assign(E,{setup(i){const o={mounted:a=>{a.classList.add("is-highlight")}};return(a,s)=>(p(),n("div",null,[s[1]||(s[1]=l(`<h1 id="custom-directives" tabindex="-1">自定义指令 <a class="header-anchor" href="#custom-directives" aria-label="Permalink to &quot;自定义指令 {#custom-directives}&quot;">​</a></h1><h2 id="introduction" tabindex="-1">介绍 <a class="header-anchor" href="#introduction" aria-label="Permalink to &quot;介绍 {#introduction}&quot;">​</a></h2><p>除了 Vue 内置的一系列指令 (比如 <code>v-model</code> 或 <code>v-show</code>) 之外，Vue 还允许你注册自定义的指令 (Custom Directives)。</p><p>我们已经介绍了两种在 Vue 中重用代码的方式：<a href="/guide/essentials/component-basics.html">组件</a>和<a href="./composables.html">组合式函数</a>。组件是主要的构建模块，而组合式函数则侧重于有状态的逻辑。另一方面，自定义指令主要是为了重用涉及普通元素的底层 DOM 访问的逻辑。</p><p>一个自定义指令由一个包含类似组件生命周期钩子的对象来定义。钩子函数会接收到指令所绑定元素作为其参数。下面是一个自定义指令的例子，当 Vue 将元素插入到 DOM 中后，该指令会将一个 class 添加到元素中：</p><div class="composition-api"><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> setup</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">// 在模板中启用 v-highlight</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> vHighlight</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  mounted</span><span style="color:#E1E4E8;">: (</span><span style="color:#FFAB70;">el</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    el.classList.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;is-highlight&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">p</span><span style="color:#B392F0;"> v-highlight</span><span style="color:#E1E4E8;">&gt;This sentence is important!&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div></div><div class="options-api"><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> highlight</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  mounted</span><span style="color:#E1E4E8;">: (</span><span style="color:#FFAB70;">el</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> el.classList.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;is-highlight&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  directives: {</span></span>
<span class="line"><span style="color:#6A737D;">    // 在模板中启用 v-highlight</span></span>
<span class="line"><span style="color:#E1E4E8;">    highlight</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">p</span><span style="color:#B392F0;"> v-highlight</span><span style="color:#E1E4E8;">&gt;This sentence is important!&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div></div>`,7)),e("div",r,[t((p(),n("p",null,s[0]||(s[0]=[c("This sentence is important!")]))),[[o]])]),s[2]||(s[2]=l(`<div class="composition-api"><p>在 <code>&lt;script setup&gt;</code> 中，任何以 <code>v</code> 开头的驼峰式命名的变量都可以当作自定义指令使用。在上述例子中，<code>vHighlight</code> 可以在模板中以 <code>v-highlight</code> 的形式使用。</p><p>在不使用 <code>&lt;script setup&gt;</code> 的情况下，自定义指令需要通过 <code>directives</code> 选项注册：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  setup</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#6A737D;">    /*...*/</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  directives: {</span></span>
<span class="line"><span style="color:#6A737D;">    // 在模板中启用 v-highlight</span></span>
<span class="line"><span style="color:#E1E4E8;">    highlight: {</span></span>
<span class="line"><span style="color:#6A737D;">      /* ... */</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></div><div class="options-api"><p>和组件类似，自定义指令在模板中使用前必须先注册。在上面的例子中，我们使用 <code>directives</code> 选项完成了指令的局部注册。</p></div><p>将一个自定义指令全局注册到应用层级也是一种常见的做法：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> app</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> createApp</span><span style="color:#E1E4E8;">({})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 使 v-highlight 在所有组件中都可用</span></span>
<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">directive</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;highlight&#39;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#6A737D;">  /* ... */</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre></div><h2 id="when-to-use" tabindex="-1">自定义指令的使用时机 <a class="header-anchor" href="#when-to-use" aria-label="Permalink to &quot;自定义指令的使用时机 {#when-to-use}&quot;">​</a></h2><p>只有当所需功能只能通过直接的 DOM 操作来实现时，才应该使用自定义指令。</p><p>一个常见例子是使元素获取焦点的 <code>v-focus</code> 指令。</p><div class="composition-api"><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> setup</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">// 在模板中启用 v-focus</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> vFocus</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  mounted</span><span style="color:#E1E4E8;">: (</span><span style="color:#FFAB70;">el</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> el.</span><span style="color:#B392F0;">focus</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">input</span><span style="color:#B392F0;"> v-focus</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div></div><div class="options-api"><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> focus</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  mounted</span><span style="color:#E1E4E8;">: (</span><span style="color:#FFAB70;">el</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> el.</span><span style="color:#B392F0;">focus</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  directives: {</span></span>
<span class="line"><span style="color:#6A737D;">    // 在模板中启用 v-focus</span></span>
<span class="line"><span style="color:#E1E4E8;">    focus</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">input</span><span style="color:#B392F0;"> v-focus</span><span style="color:#E1E4E8;"> /&gt;</span></span></code></pre></div></div><p>该指令比 <code>autofocus</code> 属性更有用，因为它不仅在页面加载时有效，而且在 Vue 动态插入元素时也有效！</p><p>建议尽可能使用 <code>v-bind</code> 等内置指令声明模板，因为它们更高效，对服务端渲染也更友好。</p><h2 id="directive-hooks" tabindex="-1">指令钩子 <a class="header-anchor" href="#directive-hooks" aria-label="Permalink to &quot;指令钩子 {#directive-hooks}&quot;">​</a></h2><p>一个指令的定义对象可以提供几种钩子函数 (都是可选的)：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> myDirective</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">  // 在绑定元素的 attribute 前</span></span>
<span class="line"><span style="color:#6A737D;">  // 或事件监听器应用前调用</span></span>
<span class="line"><span style="color:#B392F0;">  created</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">el</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">binding</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">vnode</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6A737D;">    // 下面会介绍各个参数的细节</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#6A737D;">  // 在元素被插入到 DOM 前调用</span></span>
<span class="line"><span style="color:#B392F0;">  beforeMount</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">el</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">binding</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">vnode</span><span style="color:#E1E4E8;">) {},</span></span>
<span class="line"><span style="color:#6A737D;">  // 在绑定元素的父组件</span></span>
<span class="line"><span style="color:#6A737D;">  // 及他自己的所有子节点都挂载完成后调用</span></span>
<span class="line"><span style="color:#B392F0;">  mounted</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">el</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">binding</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">vnode</span><span style="color:#E1E4E8;">) {},</span></span>
<span class="line"><span style="color:#6A737D;">  // 绑定元素的父组件更新前调用</span></span>
<span class="line"><span style="color:#B392F0;">  beforeUpdate</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">el</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">binding</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">vnode</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">prevVnode</span><span style="color:#E1E4E8;">) {},</span></span>
<span class="line"><span style="color:#6A737D;">  // 在绑定元素的父组件</span></span>
<span class="line"><span style="color:#6A737D;">  // 及他自己的所有子节点都更新后调用</span></span>
<span class="line"><span style="color:#B392F0;">  updated</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">el</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">binding</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">vnode</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">prevVnode</span><span style="color:#E1E4E8;">) {},</span></span>
<span class="line"><span style="color:#6A737D;">  // 绑定元素的父组件卸载前调用</span></span>
<span class="line"><span style="color:#B392F0;">  beforeUnmount</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">el</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">binding</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">vnode</span><span style="color:#E1E4E8;">) {},</span></span>
<span class="line"><span style="color:#6A737D;">  // 绑定元素的父组件卸载后调用</span></span>
<span class="line"><span style="color:#B392F0;">  unmounted</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">el</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">binding</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">vnode</span><span style="color:#E1E4E8;">) {}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><h3 id="hook-arguments" tabindex="-1">钩子参数 <a class="header-anchor" href="#hook-arguments" aria-label="Permalink to &quot;钩子参数 {#hook-arguments}&quot;">​</a></h3><p>指令的钩子会传递以下几种参数：</p><ul><li><p><code>el</code>：指令绑定到的元素。这可以用于直接操作 DOM。</p></li><li><p><code>binding</code>：一个对象，包含以下属性。</p><ul><li><code>value</code>：传递给指令的值。例如在 <code>v-my-directive=&quot;1 + 1&quot;</code> 中，值是 <code>2</code>。</li><li><code>oldValue</code>：之前的值，仅在 <code>beforeUpdate</code> 和 <code>updated</code> 中可用。无论值是否更改，它都可用。</li><li><code>arg</code>：传递给指令的参数 (如果有的话)。例如在 <code>v-my-directive:foo</code> 中，参数是 <code>&quot;foo&quot;</code>。</li><li><code>modifiers</code>：一个包含修饰符的对象 (如果有的话)。例如在 <code>v-my-directive.foo.bar</code> 中，修饰符对象是 <code>{ foo: true, bar: true }</code>。</li><li><code>instance</code>：使用该指令的组件实例。</li><li><code>dir</code>：指令的定义对象。</li></ul></li><li><p><code>vnode</code>：代表绑定元素的底层 VNode。</p></li><li><p><code>prevVnode</code>：代表之前的渲染中指令所绑定元素的 VNode。仅在 <code>beforeUpdate</code> 和 <code>updated</code> 钩子中可用。</p></li></ul><p>举例来说，像下面这样使用指令：</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#B392F0;"> v-example</span><span style="color:#E1E4E8;">:</span><span style="color:#B392F0;">foo</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">bar</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">baz</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p><code>binding</code> 参数会是一个这样的对象：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#B392F0;">  arg</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#B392F0;">  modifiers</span><span style="color:#E1E4E8;">: { </span><span style="color:#B392F0;">bar</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#B392F0;">  value</span><span style="color:#E1E4E8;">: </span><span style="color:#6A737D;">/* \`baz\` 的值 */</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#B392F0;">  oldValue</span><span style="color:#E1E4E8;">: </span><span style="color:#6A737D;">/* 上一次更新时 \`baz\` 的值 */</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>和内置指令类似，自定义指令的参数也可以是动态的。举例来说：</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#B392F0;"> v-example:</span><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">arg</span><span style="color:#E1E4E8;">]=</span><span style="color:#9ECBFF;">&quot;value&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>这里指令的参数会基于组件的 <code>arg</code> 数据属性响应式地更新。</p><div class="tip custom-block"><p class="custom-block-title">Note</p><p>除了 <code>el</code> 外，其他参数都是只读的，不要更改它们。若你需要在不同的钩子间共享信息，推荐通过元素的 <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dataset" target="_blank" rel="noreferrer">dataset</a> attribute 实现。</p></div><h2 id="function-shorthand" tabindex="-1">简化形式 <a class="header-anchor" href="#function-shorthand" aria-label="Permalink to &quot;简化形式 {#function-shorthand}&quot;">​</a></h2><p>对于自定义指令来说，一个很常见的情况是仅仅需要在 <code>mounted</code> 和 <code>updated</code> 上实现相同的行为，除此之外并不需要其他钩子。这种情况下我们可以直接用一个函数来定义指令，如下所示：</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#B392F0;"> v-color</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">color</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">directive</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;color&#39;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">el</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">binding</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">  // 这会在 \`mounted\` 和 \`updated\` 时都调用</span></span>
<span class="line"><span style="color:#E1E4E8;">  el.style.color </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> binding.value</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre></div><h2 id="object-literals" tabindex="-1">对象字面量 <a class="header-anchor" href="#object-literals" aria-label="Permalink to &quot;对象字面量 {#object-literals}&quot;">​</a></h2><p>如果你的指令需要多个值，你可以向它传递一个 JavaScript 对象字面量。别忘了，指令也可以接收任何合法的 JavaScript 表达式。</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#B392F0;"> v-demo</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">{ color: </span><span style="color:#9ECBFF;">&#39;white&#39;</span><span style="color:#E1E4E8;">, text: </span><span style="color:#9ECBFF;">&#39;hello!&#39;</span><span style="color:#E1E4E8;"> }</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">directive</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;demo&#39;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">el</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">binding</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(binding.value.color) </span><span style="color:#6A737D;">// =&gt; &quot;white&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(binding.value.text) </span><span style="color:#6A737D;">// =&gt; &quot;hello!&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre></div><h2 id="usage-on-components" tabindex="-1">在组件上使用 <a class="header-anchor" href="#usage-on-components" aria-label="Permalink to &quot;在组件上使用 {#usage-on-components}&quot;">​</a></h2><div class="warning custom-block"><p class="custom-block-title">不推荐</p><p>不推荐在组件上使用自定义指令。当组件具有多个根节点时可能会出现预期外的行为。</p></div><p>当在组件上使用自定义指令时，它会始终应用于组件的根节点，和<a href="/guide/components/attrs.html">透传 attributes</a> 类似。</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">MyComponent</span><span style="color:#B392F0;"> v-demo</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">test</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span></code></pre></div><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">&lt;!-- MyComponent 的模板 --&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#6A737D;">&lt;!-- v-demo 指令会被应用在此处 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">span</span><span style="color:#E1E4E8;">&gt;My component content&lt;/</span><span style="color:#85E89D;">span</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>需要注意的是组件可能含有多个根节点。当应用到一个多根组件时，指令将会被忽略且抛出一个警告。和 attribute 不同，指令不能通过 <code>v-bind=&quot;$attrs&quot;</code> 来传递给一个不同的元素。</p>`,39))]))}});export{y as __pageData,u as default};
