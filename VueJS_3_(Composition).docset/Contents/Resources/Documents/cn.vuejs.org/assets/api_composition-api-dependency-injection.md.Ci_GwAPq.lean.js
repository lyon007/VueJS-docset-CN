import{_ as n,c as a,b as o,o as p}from"./chunks/framework.B2oIMGqn.js";const d=JSON.parse('{"title":"组合式 API：依赖注入","description":"","frontmatter":{},"headers":[{"level":2,"title":"provide()","slug":"provide","link":"#provide","children":[]},{"level":2,"title":"inject()","slug":"inject","link":"#inject","children":[]},{"level":2,"title":"hasInjectionContext()","slug":"has-injection-context","link":"#has-injection-context","children":[]}],"relativePath":"api/composition-api-dependency-injection.md","filePath":"api/composition-api-dependency-injection.md"}'),l={name:"api/composition-api-dependency-injection.md"};function e(t,s,c,r,i,y){return p(),a("div",null,s[0]||(s[0]=[o(`<h1 id="composition-api-dependency-injection" tabindex="-1">组合式 API：依赖注入 <a class="header-anchor" href="#composition-api-dependency-injection" aria-label="Permalink to &quot;组合式 API：依赖注入 {#composition-api-dependency-injection}&quot;">​</a></h1><h2 id="provide" tabindex="-1">provide() <a class="header-anchor" href="#provide" aria-label="Permalink to &quot;provide() {#provide}&quot;">​</a></h2><p>提供一个值，可以被后代组件注入。</p><ul><li><p><strong>类型</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> provide</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt;(</span><span style="color:#FFAB70;">key</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> InjectionKey</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">|</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">value</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> T</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> void</span></span></code></pre></div></li><li><p><strong>详细信息</strong></p><p><code>provide()</code> 接受两个参数：第一个参数是要注入的 key，可以是一个字符串或者一个 symbol，第二个参数是要注入的值。</p><p>当使用 TypeScript 时，key 可以是一个被类型断言为 <code>InjectionKey</code> 的 symbol。<code>InjectionKey</code> 是一个 Vue 提供的工具类型，继承自 <code>Symbol</code>，可以用来同步 <code>provide()</code> 和 <code>inject()</code> 之间值的类型。</p><p>与注册生命周期钩子的 API 类似，<code>provide()</code> 必须在组件的 <code>setup()</code> 阶段同步调用。</p></li><li><p><strong>示例</strong></p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> setup</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { ref, provide } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { countSymbol } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;./injectionSymbols&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 提供静态值</span></span>
<span class="line"><span style="color:#B392F0;">provide</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;path&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;/project/&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 提供响应式的值</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> count</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#B392F0;">provide</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;count&#39;</span><span style="color:#E1E4E8;">, count)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 提供时将 Symbol 作为 key</span></span>
<span class="line"><span style="color:#B392F0;">provide</span><span style="color:#E1E4E8;">(countSymbol, count)</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p><strong>参考</strong></p><ul><li><a href="/guide/components/provide-inject.html">指南 - 依赖注入</a></li><li><a href="/guide/typescript/composition-api.html#typing-provide-inject">指南 - 为 provide/inject 标注类型</a> <sup class="vt-badge ts"></sup></li></ul></li></ul><h2 id="inject" tabindex="-1">inject() <a class="header-anchor" href="#inject" aria-label="Permalink to &quot;inject() {#inject}&quot;">​</a></h2><p>注入一个由祖先组件或整个应用 (通过 <code>app.provide()</code>) 提供的值。</p><ul><li><p><strong>类型</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 没有默认值</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> inject</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt;(</span><span style="color:#FFAB70;">key</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> InjectionKey</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">|</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> T</span><span style="color:#F97583;"> |</span><span style="color:#79B8FF;"> undefined</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 带有默认值</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> inject</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt;(</span><span style="color:#FFAB70;">key</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> InjectionKey</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">|</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">defaultValue</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> T</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> T</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 使用工厂函数</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> inject</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt;(</span></span>
<span class="line"><span style="color:#FFAB70;">  key</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> InjectionKey</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">|</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#B392F0;">  defaultValue</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> T</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#FFAB70;">  treatDefaultAsFactory</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> true</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> T</span></span></code></pre></div></li><li><p><strong>详细信息</strong></p><p>第一个参数是注入的 key。Vue 会遍历父组件链，通过匹配 key 来确定所提供的值。如果父组件链上多个组件对同一个 key 提供了值，则会应用离得更近的组件所提供的值，链上更远的组件所提供的值将会被“覆盖”。如果没有能通过 key 匹配到值，<code>inject()</code> 将返回 <code>undefined</code>，除非提供了一个默认值。</p><p>第二个参数是可选的，即在没有匹配到 key 时使用的默认值。</p><p>第二个参数也可以是一个工厂函数，用来返回某些创建起来比较复杂的值。在这种情况下，你必须将 <code>true</code> 作为第三个参数传入，表明这个函数将作为工厂函数使用，而非值本身。</p><p>与注册生命周期钩子的 API 类似，<code>inject()</code> 必须在组件的 <code>setup()</code> 阶段同步调用。</p><p>当使用 TypeScript 时，key 可以是一个类型为 <code>InjectionKey</code> 的 symbol。<code>InjectionKey</code> 是一个 Vue 提供的工具类型，继承自 <code>Symbol</code>，可以用来同步 <code>provide()</code> 和 <code>inject()</code> 之间值的类型。</p></li><li><p><strong>示例</strong></p><p>假设有一个父组件已经提供了一些值，如前面 <code>provide()</code> 的例子中所示：</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> setup</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { inject } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { countSymbol } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;./injectionSymbols&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 注入不含默认值的静态值</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> path</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> inject</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;path&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 注入响应式的值</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> count</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> inject</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;count&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 通过 Symbol 类型的 key 注入</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> count2</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> inject</span><span style="color:#E1E4E8;">(countSymbol)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 注入一个值，若为空则使用提供的默认值</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> bar</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> inject</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;path&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;/default-path&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 注入一个值，若为空则使用提供的函数类型的默认值</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> fn</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> inject</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;function&#39;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 注入一个值，若为空则使用提供的工厂函数</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> baz</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> inject</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;factory&#39;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> ExpensiveObject</span><span style="color:#E1E4E8;">(), </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p><strong>参考</strong></p><ul><li><a href="/guide/components/provide-inject.html">指南 - 依赖注入</a></li><li><a href="/guide/typescript/composition-api.html#typing-provide-inject">指南 - 为 provide / inject 标注类型</a> <sup class="vt-badge ts"></sup></li></ul></li></ul><h2 id="has-injection-context" tabindex="-1">hasInjectionContext() <a class="header-anchor" href="#has-injection-context" aria-label="Permalink to &quot;hasInjectionContext() {#has-injection-context}&quot;">​</a></h2><ul><li>仅在 3.3+ 中支持</li></ul><p>如果 <a href="#inject">inject()</a> 可以在错误的地方 (例如 <code>setup()</code> 之外) 被调用而不触发警告，则返回 <code>true</code>。此方法适用于希望在内部使用 <code>inject()</code> 而不向用户发出警告的库。</p><ul><li><p><strong>类型</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> hasInjectionContext</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> boolean</span></span></code></pre></div></li></ul>`,11)]))}const F=n(l,[["render",e]]);export{d as __pageData,F as default};
