import{_ as n,c as a,b as l,o as p}from"./chunks/framework.B2oIMGqn.js";const d=JSON.parse('{"title":"<script setup>","description":"","frontmatter":{},"headers":[{"level":2,"title":"基本语法","slug":"basic-syntax","link":"#basic-syntax","children":[{"level":3,"title":"顶层的绑定会被暴露给模板","slug":"top-level-bindings-are-exposed-to-template","link":"#top-level-bindings-are-exposed-to-template","children":[]}]},{"level":2,"title":"响应式","slug":"reactivity","link":"#reactivity","children":[]},{"level":2,"title":"使用组件","slug":"using-components","link":"#using-components","children":[{"level":3,"title":"动态组件","slug":"dynamic-components","link":"#dynamic-components","children":[]},{"level":3,"title":"递归组件","slug":"recursive-components","link":"#recursive-components","children":[]},{"level":3,"title":"命名空间组件","slug":"namespaced-components","link":"#namespaced-components","children":[]}]},{"level":2,"title":"使用自定义指令","slug":"using-custom-directives","link":"#using-custom-directives","children":[]},{"level":2,"title":"defineProps() 和 defineEmits()","slug":"defineprops-defineemits","link":"#defineprops-defineemits","children":[{"level":3,"title":"针对类型的 props/emit 声明","slug":"type-only-props-emit-declarations","link":"#type-only-props-emit-declarations","children":[]},{"level":3,"title":"响应式 Props 解构","slug":"reactive-props-destructure","link":"#reactive-props-destructure","children":[]},{"level":3,"title":"使用类型声明时的默认 props 值","slug":"default-props-values-when-using-type-declaration","link":"#default-props-values-when-using-type-declaration","children":[]}]},{"level":2,"title":"defineModel()","slug":"definemodel","link":"#definemodel","children":[{"level":3,"title":"修饰符和转换器","slug":"modifiers-and-transformers","link":"#modifiers-and-transformers","children":[]},{"level":3,"title":"在 TypeScript 中使用","slug":"usage-with-typescript","link":"#usage-with-typescript","children":[]}]},{"level":2,"title":"defineExpose()","slug":"defineexpose","link":"#defineexpose","children":[]},{"level":2,"title":"defineOptions()","slug":"defineoptions","link":"#defineoptions","children":[]},{"level":2,"title":"defineSlots()","slug":"defineslots","link":"#defineslots","children":[]},{"level":2,"title":"useSlots() 和 useAttrs()","slug":"useslots-useattrs","link":"#useslots-useattrs","children":[]},{"level":2,"title":"与普通的 <script> 一起使用","slug":"usage-alongside-normal-script","link":"#usage-alongside-normal-script","children":[]},{"level":2,"title":"顶层 await","slug":"top-level-await","link":"#top-level-await","children":[]},{"level":2,"title":"导入语句","slug":"imports-statements","link":"#imports-statements","children":[]},{"level":2,"title":"泛型","slug":"generics","link":"#generics","children":[]},{"level":2,"title":"限制","slug":"restrictions","link":"#restrictions","children":[]}],"relativePath":"api/sfc-script-setup.md","filePath":"api/sfc-script-setup.md"}'),o={name:"api/sfc-script-setup.md"};function e(t,s,c,r,i,E){return p(),a("div",null,s[0]||(s[0]=[l(`<h1 id="script-setup" tabindex="-1">&lt;script setup&gt; <a class="header-anchor" href="#script-setup" aria-label="Permalink to &quot;\\&lt;script setup&gt; {#script-setup}&quot;">​</a></h1><p><code>&lt;script setup&gt;</code> 是在单文件组件 (SFC) 中使用组合式 API 的编译时语法糖。当同时使用单文件组件与组合式 API 时该语法是默认推荐。相比于普通的 <code>&lt;script&gt;</code> 语法，它具有更多优势：</p><ul><li>更少的样板内容，更简洁的代码。</li><li>能够使用纯 TypeScript 声明 props 和自定义事件。</li><li>更好的运行时性能 (其模板会被编译成同一作用域内的渲染函数，避免了渲染上下文代理对象)。</li><li>更好的 IDE 类型推导性能 (减少了语言服务器从代码中抽取类型的工作)。</li></ul><h2 id="basic-syntax" tabindex="-1">基本语法 <a class="header-anchor" href="#basic-syntax" aria-label="Permalink to &quot;基本语法 {#basic-syntax}&quot;">​</a></h2><p>要启用该语法，需要在 <code>&lt;script&gt;</code> 代码块上添加 <code>setup</code> attribute：</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> setup</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;hello script setup&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>里面的代码会被编译成组件 <code>setup()</code> 函数的内容。这意味着与普通的 <code>&lt;script&gt;</code> 只在组件被首次引入的时候执行一次不同，<code>&lt;script setup&gt;</code> 中的代码会在<strong>每次组件实例被创建的时候执行</strong>。</p><h3 id="top-level-bindings-are-exposed-to-template" tabindex="-1">顶层的绑定会被暴露给模板 <a class="header-anchor" href="#top-level-bindings-are-exposed-to-template" aria-label="Permalink to &quot;顶层的绑定会被暴露给模板 {#top-level-bindings-are-exposed-to-template}&quot;">​</a></h3><p>当使用 <code>&lt;script setup&gt;</code> 的时候，任何在 <code>&lt;script setup&gt;</code> 声明的顶层的绑定 (包括变量，函数声明，以及 import 导入的内容) 都能在模板中直接使用：</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> setup</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">// 变量</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> msg</span><span style="color:#F97583;"> =</span><span style="color:#9ECBFF;"> &#39;Hello!&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 函数</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> log</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(msg)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">button</span><span style="color:#B392F0;"> @click</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;log&quot;</span><span style="color:#E1E4E8;">&gt;{{ msg }}&lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>import 导入的内容也会以同样的方式暴露。这意味着我们可以在模板表达式中直接使用导入的 helper 函数，而不需要通过 <code>methods</code> 选项来暴露它：</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> setup</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { capitalize } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;./helpers&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;{{ capitalize(&#39;hello&#39;) }}&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="reactivity" tabindex="-1">响应式 <a class="header-anchor" href="#reactivity" aria-label="Permalink to &quot;响应式 {#reactivity}&quot;">​</a></h2><p>响应式状态需要明确使用<a href="/api/reactivity-core.html">响应式 API</a> 来创建。和 <code>setup()</code> 函数的返回值一样，ref 在模板中使用的时候会自动解包：</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> setup</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { ref } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> count</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">button</span><span style="color:#B392F0;"> @click</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;count++&quot;</span><span style="color:#E1E4E8;">&gt;{{ count }}&lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="using-components" tabindex="-1">使用组件 <a class="header-anchor" href="#using-components" aria-label="Permalink to &quot;使用组件 {#using-components}&quot;">​</a></h2><p><code>&lt;script setup&gt;</code> 范围里的值也能被直接作为自定义组件的标签名使用：</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> setup</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> MyComponent </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;./MyComponent.vue&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">MyComponent</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>这里 <code>MyComponent</code> 应当被理解为像是在引用一个变量。如果你使用过 JSX，此处的心智模型是类似的。其 kebab-case 格式的 <code>&lt;my-component&gt;</code> 同样能在模板中使用——不过，我们强烈建议使用 PascalCase 格式以保持一致性。同时这也有助于区分原生的自定义元素。</p><h3 id="dynamic-components" tabindex="-1">动态组件 <a class="header-anchor" href="#dynamic-components" aria-label="Permalink to &quot;动态组件 {#dynamic-components}&quot;">​</a></h3><p>由于组件是通过变量引用而不是基于字符串组件名注册的，在 <code>&lt;script setup&gt;</code> 中要使用动态组件的时候，应该使用动态的 <code>:is</code> 来绑定：</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> setup</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Foo </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;./Foo.vue&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Bar </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;./Bar.vue&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">component</span><span style="color:#B392F0;"> :is</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;Foo&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">component</span><span style="color:#B392F0;"> :is</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;someCondition ? Foo : Bar&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>请注意组件是如何在三元表达式中被当做变量使用的。</p><h3 id="recursive-components" tabindex="-1">递归组件 <a class="header-anchor" href="#recursive-components" aria-label="Permalink to &quot;递归组件 {#recursive-components}&quot;">​</a></h3><p>一个单文件组件可以通过它的文件名被其自己所引用。例如：名为 <code>FooBar.vue</code> 的组件可以在其模板中用 <code>&lt;FooBar/&gt;</code> 引用它自己。</p><p>请注意这种方式相比于导入的组件优先级更低。如果有具名的导入和组件自身推导的名字冲突了，可以为导入的组件添加别名：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { FooBar </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> FooBarChild } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;./components&#39;</span></span></code></pre></div><h3 id="namespaced-components" tabindex="-1">命名空间组件 <a class="header-anchor" href="#namespaced-components" aria-label="Permalink to &quot;命名空间组件 {#namespaced-components}&quot;">​</a></h3><p>可以使用带 <code>.</code> 的组件标签，例如 <code>&lt;Foo.Bar&gt;</code> 来引用嵌套在对象属性中的组件。这在需要从单个文件中导入多个组件的时候非常有用：</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> setup</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#79B8FF;"> *</span><span style="color:#F97583;"> as</span><span style="color:#E1E4E8;"> Form </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;./form-components&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">Form.Input</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">Form.Label</span><span style="color:#E1E4E8;">&gt;label&lt;/</span><span style="color:#85E89D;">Form.Label</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">Form.Input</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="using-custom-directives" tabindex="-1">使用自定义指令 <a class="header-anchor" href="#using-custom-directives" aria-label="Permalink to &quot;使用自定义指令 {#using-custom-directives}&quot;">​</a></h2><p>全局注册的自定义指令将正常工作。本地的自定义指令在 <code>&lt;script setup&gt;</code> 中不需要显式注册，但他们必须遵循 <code>vNameOfDirective</code> 这样的命名规范：</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> setup</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> vMyDirective</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  beforeMount</span><span style="color:#E1E4E8;">: (</span><span style="color:#FFAB70;">el</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    // 在元素上做些操作</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">h1</span><span style="color:#B392F0;"> v-my-directive</span><span style="color:#E1E4E8;">&gt;This is a Heading&lt;/</span><span style="color:#85E89D;">h1</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>如果指令是从别处导入的，可以通过重命名来使其符合命名规范：</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> setup</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { myDirective </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> vMyDirective } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;./MyDirective.js&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="defineprops-defineemits" tabindex="-1">defineProps() 和 defineEmits() <a class="header-anchor" href="#defineprops-defineemits" aria-label="Permalink to &quot;defineProps() 和 defineEmits() {#defineprops-defineemits}&quot;">​</a></h2><p>为了在声明 <code>props</code> 和 <code>emits</code> 选项时获得完整的类型推导支持，我们可以使用 <code>defineProps</code> 和 <code>defineEmits</code> API，它们将自动地在 <code>&lt;script setup&gt;</code> 中可用：</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> setup</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> props</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> defineProps</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  foo: String</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> emit</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> defineEmits</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&#39;change&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;delete&#39;</span><span style="color:#E1E4E8;">])</span></span>
<span class="line"><span style="color:#6A737D;">// setup 代码</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><ul><li><p><code>defineProps</code> 和 <code>defineEmits</code> 都是只能在 <code>&lt;script setup&gt;</code> 中使用的<strong>编译器宏</strong>。他们不需要导入，且会随着 <code>&lt;script setup&gt;</code> 的处理过程一同被编译掉。</p></li><li><p><code>defineProps</code> 接收与 <code>props</code> 选项相同的值，<code>defineEmits</code> 接收与 <code>emits</code> 选项相同的值。</p></li><li><p><code>defineProps</code> 和 <code>defineEmits</code> 在选项传入后，会提供恰当的类型推导。</p></li><li><p>传入到 <code>defineProps</code> 和 <code>defineEmits</code> 的选项会从 setup 中提升到模块的作用域。因此，传入的选项不能引用在 setup 作用域中声明的局部变量。这样做会引起编译错误。但是，它<em>可以</em>引用导入的绑定，因为它们也在模块作用域内。</p></li></ul><h3 id="type-only-props-emit-declarations" tabindex="-1">针对类型的 props/emit 声明<sup class="vt-badge ts"></sup> <a class="header-anchor" href="#type-only-props-emit-declarations" aria-label="Permalink to &quot;针对类型的 props/emit 声明&lt;sup class=&quot;vt-badge ts&quot; /&gt; {#type-only-props-emit-declarations}&quot;">​</a></h3><p>props 和 emit 也可以通过给 <code>defineProps</code> 和 <code>defineEmits</code> 传递纯类型参数的方式来声明：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> props</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> defineProps</span><span style="color:#E1E4E8;">&lt;{</span></span>
<span class="line"><span style="color:#FFAB70;">  foo</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span></span>
<span class="line"><span style="color:#FFAB70;">  bar</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> number</span></span>
<span class="line"><span style="color:#E1E4E8;">}&gt;()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> emit</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> defineEmits</span><span style="color:#E1E4E8;">&lt;{</span></span>
<span class="line"><span style="color:#E1E4E8;">  (</span><span style="color:#FFAB70;">e</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;"> &#39;change&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">id</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> number</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> void</span></span>
<span class="line"><span style="color:#E1E4E8;">  (</span><span style="color:#FFAB70;">e</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;"> &#39;update&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">value</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> void</span></span>
<span class="line"><span style="color:#E1E4E8;">}&gt;()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 3.3+：另一种更简洁的语法</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> emit</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> defineEmits</span><span style="color:#E1E4E8;">&lt;{</span></span>
<span class="line"><span style="color:#FFAB70;">  change</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">] </span><span style="color:#6A737D;">// 具名元组语法</span></span>
<span class="line"><span style="color:#FFAB70;">  update</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">}&gt;()</span></span></code></pre></div><ul><li><p><code>defineProps</code> 或 <code>defineEmits</code> 要么使用运行时声明，要么使用类型声明。同时使用两种声明方式会导致编译报错。</p></li><li><p>使用类型声明的时候，静态分析会自动生成等效的运行时声明，从而在避免双重声明的前提下确保正确的运行时行为。</p><ul><li><p>在开发模式下，编译器会试着从类型来推导对应的运行时验证。例如这里从 <code>foo: string</code> 类型中推断出 <code>foo: String</code>。如果类型是对导入类型的引用，这里的推导结果会是 <code>foo: null</code> (与 <code>any</code> 类型相等)，因为编译器没有外部文件的信息。</p></li><li><p>在生产模式下，编译器会生成数组格式的声明来减少打包体积 (这里的 props 会被编译成 <code>[&#39;foo&#39;, &#39;bar&#39;]</code>)。</p></li></ul></li><li><p>在 3.2 及以下版本中，<code>defineProps()</code> 的泛型类型参数只能使用类型字面量或者本地接口的引用。</p><p>这个限制已经在 3.3 版本中解决。最新版本的 Vue 支持在类型参数的位置引用导入的和有限的复杂类型。然而，由于类型到运行时的转换仍然基于 AST，因此并不支持使用需要实际类型分析的复杂类型，例如条件类型等。你可以在单个 prop 的类型上使用条件类型，但不能对整个 props 对象使用。</p></li></ul><h3 id="reactive-props-destructure" tabindex="-1">响应式 Props 解构 <sup class="vt-badge" data-text="3.5+"></sup> <a class="header-anchor" href="#reactive-props-destructure" aria-label="Permalink to &quot;响应式 Props 解构 &lt;sup class=&quot;vt-badge&quot; data-text=&quot;3.5+&quot; /&gt; {#reactive-props-destructure}&quot;">​</a></h3><p>在 Vue 3.5 及以上版本中，从 <code>defineProps</code> 返回值解构出的变量是响应式的。当在同一个 <code>&lt;script setup&gt;</code> 块中的代码访问从 <code>defineProps</code> 解构出的变量时，Vue 的编译器会自动在前面添加 <code>props.</code>。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">foo</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> defineProps</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;">])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">watchEffect</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">  // 在 3.5 之前仅运行一次</span></span>
<span class="line"><span style="color:#6A737D;">  // 在 3.5+ 版本中会在 &quot;foo&quot; prop 改变时重新运行</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(foo)</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre></div><p>以上编译成以下等效内容：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> props</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> defineProps</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;">])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">watchEffect</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">  // \`foo\` 由编译器转换为 \`props.foo\`</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(props.foo)</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre></div><p>此外，你可以使用 JavaScript 原生的默认值语法声明 props 的默认值。这在使用基于类型的 props 声明时特别有用。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">interface</span><span style="color:#B392F0;"> Props</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#FFAB70;">  msg</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> string</span></span>
<span class="line"><span style="color:#FFAB70;">  labels</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">[]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">msg</span><span style="color:#F97583;"> =</span><span style="color:#9ECBFF;"> &#39;hello&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">labels</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;one&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;two&#39;</span><span style="color:#E1E4E8;">] } </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> defineProps</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Props</span><span style="color:#E1E4E8;">&gt;()</span></span></code></pre></div><h3 id="default-props-values-when-using-type-declaration" tabindex="-1">使用类型声明时的默认 props 值 <sup class="vt-badge ts"></sup> <a class="header-anchor" href="#default-props-values-when-using-type-declaration" aria-label="Permalink to &quot;使用类型声明时的默认 props 值 &lt;sup class=&quot;vt-badge ts&quot; /&gt; {#default-props-values-when-using-type-declaration}&quot;">​</a></h3><p>在 3.5 及以上版本中，当使用响应式 Props 解构时，可以自然地声明默认值。但在 3.4 及以下版本中，默认情况下并未启用响应式 Props 解构。为了用基于类型声明的方式声明 props 的默认值，需要使用 <code>withDefaults</code> 编译器宏：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">interface</span><span style="color:#B392F0;"> Props</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#FFAB70;">  msg</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> string</span></span>
<span class="line"><span style="color:#FFAB70;">  labels</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">[]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> props</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> withDefaults</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">defineProps</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Props</span><span style="color:#E1E4E8;">&gt;(), {</span></span>
<span class="line"><span style="color:#E1E4E8;">  msg: </span><span style="color:#9ECBFF;">&#39;hello&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#B392F0;">  labels</span><span style="color:#E1E4E8;">: () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;one&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;two&#39;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre></div><p>上面代码会被编译为等价的运行时 props 的 <code>default</code> 选项。此外，<code>withDefaults</code> 辅助函数提供了对默认值的类型检查，并确保返回的 <code>props</code> 的类型删除了已声明默认值的属性的可选标志。</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>请注意，在使用 <code>withDefaults</code> 时，默认值为可变引用类型 (如数组或对象) 应该封装在函数中，以避免意外修改和外部副作用。这样可以确保每个组件实例都获得默认值的自己的副本。在使用默认值解构时，这<strong>不</strong>是必要的。</p></div><h2 id="definemodel" tabindex="-1">defineModel() <a class="header-anchor" href="#definemodel" aria-label="Permalink to &quot;defineModel() {#definemodel}&quot;">​</a></h2><ul><li>仅在 3.4+ 中可用</li></ul><p>这个宏可以用来声明一个双向绑定 prop，通过父组件的 <code>v-model</code> 来使用。<a href="/guide/components/v-model.html">组件 <code>v-model</code></a> 指南中也讨论了示例用法。</p><p>在底层，这个宏声明了一个 model prop 和一个相应的值更新事件。如果第一个参数是一个字符串字面量，它将被用作 prop 名称；否则，prop 名称将默认为 <code>&quot;modelValue&quot;</code>。在这两种情况下，你都可以再传递一个额外的对象，它可以包含 prop 的选项和 model ref 的值转换选项。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 声明 &quot;modelValue&quot; prop，由父组件通过 v-model 使用</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> model</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> defineModel</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#6A737D;">// 或者：声明带选项的 &quot;modelValue&quot; prop</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> model</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> defineModel</span><span style="color:#E1E4E8;">({ type: String })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 在被修改时，触发 &quot;update:modelValue&quot; 事件</span></span>
<span class="line"><span style="color:#E1E4E8;">model.value </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &quot;hello&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 声明 &quot;count&quot; prop，由父组件通过 v-model:count 使用</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> count</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> defineModel</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;count&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">// 或者：声明带选项的 &quot;count&quot; prop</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> count</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> defineModel</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;count&quot;</span><span style="color:#E1E4E8;">, { type: Number, default: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> inc</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#6A737D;">  // 在被修改时，触发 &quot;update:count&quot; 事件</span></span>
<span class="line"><span style="color:#E1E4E8;">  count.value</span><span style="color:#F97583;">++</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>如果为 <code>defineModel</code> prop 设置了一个 <code>default</code> 值且父组件没有为该 prop 提供任何值，会导致父组件与子组件之间不同步。在下面的示例中，父组件的 <code>myRef</code> 是 undefined，而子组件的 <code>model</code> 是 1：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 子组件：</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> model</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> defineModel</span><span style="color:#E1E4E8;">({ default: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 父组件</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> myRef</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">()</span></span></code></pre></div><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#FDAEB7;font-style:italic;">Child</span><span style="color:#B392F0;"> v-model</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;myRef&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#FDAEB7;font-style:italic;">Child</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div></div><h3 id="modifiers-and-transformers" tabindex="-1">修饰符和转换器 <a class="header-anchor" href="#modifiers-and-transformers" aria-label="Permalink to &quot;修饰符和转换器 {#modifiers-and-transformers}&quot;">​</a></h3><p>为了获取 <code>v-model</code> 指令使用的修饰符，我们可以像这样解构 <code>defineModel()</code> 的返回值：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">modelValue</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">modelModifiers</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> defineModel</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 对应 v-model.trim</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (modelModifiers.trim) {</span></span>
<span class="line"><span style="color:#6A737D;">  // ...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>当存在修饰符时，我们可能需要在读取或将其同步回父组件时对其值进行转换。我们可以通过使用 <code>get</code> 和 <code>set</code> 转换器选项来实现这一点：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">modelValue</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">modelModifiers</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> defineModel</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#6A737D;">  // get() 省略了，因为这里不需要它</span></span>
<span class="line"><span style="color:#B392F0;">  set</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6A737D;">    // 如果使用了 .trim 修饰符，则返回裁剪过后的值</span></span>
<span class="line"><span style="color:#F97583;">    if</span><span style="color:#E1E4E8;"> (modelModifiers.trim) {</span></span>
<span class="line"><span style="color:#F97583;">      return</span><span style="color:#E1E4E8;"> value.</span><span style="color:#B392F0;">trim</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#6A737D;">    // 否则，原样返回</span></span>
<span class="line"><span style="color:#F97583;">    return</span><span style="color:#E1E4E8;"> value</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre></div><h3 id="usage-with-typescript" tabindex="-1">在 TypeScript 中使用 <sup class="vt-badge ts"></sup> <a class="header-anchor" href="#usage-with-typescript" aria-label="Permalink to &quot;在 TypeScript 中使用 &lt;sup class=&quot;vt-badge ts&quot; /&gt; {#usage-with-typescript}&quot;">​</a></h3><p>与 <code>defineProps</code> 和 <code>defineEmits</code> 一样，<code>defineModel</code> 也可以接收类型参数来指定 model 值和修饰符的类型：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> modelValue</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> defineModel</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="color:#6A737D;">//    ^? Ref&lt;string | undefined&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 用带有选项的默认 model，设置 required 去掉了可能的 undefined 值</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> modelValue</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> defineModel</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">&gt;({ required: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> })</span></span>
<span class="line"><span style="color:#6A737D;">//    ^? Ref&lt;string&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">modelValue</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">modifiers</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> defineModel</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;trim&quot;</span><span style="color:#F97583;"> |</span><span style="color:#9ECBFF;"> &quot;uppercase&quot;</span><span style="color:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="color:#6A737D;">//                 ^? Record&lt;&#39;trim&#39; | &#39;uppercase&#39;, true | undefined&gt;</span></span></code></pre></div><h2 id="defineexpose" tabindex="-1">defineExpose() <a class="header-anchor" href="#defineexpose" aria-label="Permalink to &quot;defineExpose() {#defineexpose}&quot;">​</a></h2><p>使用 <code>&lt;script setup&gt;</code> 的组件是<strong>默认关闭</strong>的——即通过模板引用或者 <code>$parent</code> 链获取到的组件的公开实例，<strong>不会</strong>暴露任何在 <code>&lt;script setup&gt;</code> 中声明的绑定。</p><p>可以通过 <code>defineExpose</code> 编译器宏来显式指定在 <code>&lt;script setup&gt;</code> 组件中要暴露出去的属性：</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> setup</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { ref } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> a</span><span style="color:#F97583;"> =</span><span style="color:#79B8FF;"> 1</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> b</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">defineExpose</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  a,</span></span>
<span class="line"><span style="color:#E1E4E8;">  b</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>当父组件通过模板引用的方式获取到当前组件的实例，获取到的实例会像这样 <code>{ a: number, b: number }</code> (ref 会和在普通实例中一样被自动解包)</p><h2 id="defineoptions" tabindex="-1">defineOptions() <a class="header-anchor" href="#defineoptions" aria-label="Permalink to &quot;defineOptions() {#defineoptions}&quot;">​</a></h2><ul><li>仅在 3.3+ 中支持</li></ul><p>这个宏可以用来直接在 <code>&lt;script setup&gt;</code> 中声明组件选项，而不必使用单独的 <code>&lt;script&gt;</code> 块：</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> setup</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">defineOptions</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  inheritAttrs: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  customOptions: {</span></span>
<span class="line"><span style="color:#6A737D;">    /* ... */</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><ul><li>这是一个宏定义，选项将会被提升到模块作用域中，无法访问 <code>&lt;script setup&gt;</code> 中不是字面常数的局部变量。</li></ul><h2 id="defineslots" tabindex="-1">defineSlots() <sup class="vt-badge ts"></sup> <a class="header-anchor" href="#defineslots" aria-label="Permalink to &quot;defineSlots() &lt;sup class=&quot;vt-badge ts&quot;/&gt; {#defineslots}&quot;">​</a></h2><ul><li>仅在 3.3+ 中支持</li></ul><p>这个宏可以用于为 IDE 提供插槽名称和 props 类型检查的类型提示。</p><p><code>defineSlots()</code> 只接受类型参数，没有运行时参数。类型参数应该是一个类型字面量，其中属性键是插槽名称，值类型是插槽函数。函数的第一个参数是插槽期望接收的 props，其类型将用于模板中的插槽 props。返回类型目前被忽略，可以是 <code>any</code>，但我们将来可能会利用它来检查插槽内容。</p><p>它还返回 <code>slots</code> 对象，该对象等同于在 setup 上下文中暴露或由 <code>useSlots()</code> 返回的 <code>slots</code> 对象。</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> setup</span><span style="color:#B392F0;"> lang</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;ts&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> slots</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> defineSlots</span><span style="color:#E1E4E8;">&lt;{</span></span>
<span class="line"><span style="color:#B392F0;">  default</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">props</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> { </span><span style="color:#FFAB70;">msg</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;"> })</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> any</span></span>
<span class="line"><span style="color:#E1E4E8;">}&gt;()</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="useslots-useattrs" tabindex="-1"><code>useSlots()</code> 和 <code>useAttrs()</code> <a class="header-anchor" href="#useslots-useattrs" aria-label="Permalink to &quot;\`useSlots()\` 和 \`useAttrs()\` {#useslots-useattrs}&quot;">​</a></h2><p>在 <code>&lt;script setup&gt;</code> 使用 <code>slots</code> 和 <code>attrs</code> 的情况应该是相对来说较为罕见的，因为可以在模板中直接通过 <code>$slots</code> 和 <code>$attrs</code> 来访问它们。在你的确需要使用它们的罕见场景中，可以分别用 <code>useSlots</code> 和 <code>useAttrs</code> 两个辅助函数：</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> setup</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { useSlots, useAttrs } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> slots</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> useSlots</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> attrs</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> useAttrs</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p><code>useSlots</code> 和 <code>useAttrs</code> 是真实的运行时函数，它的返回与 <code>setupContext.slots</code> 和 <code>setupContext.attrs</code> 等价。它们同样也能在普通的组合式 API 中使用。</p><h2 id="usage-alongside-normal-script" tabindex="-1">与普通的 <code>&lt;script&gt;</code> 一起使用 <a class="header-anchor" href="#usage-alongside-normal-script" aria-label="Permalink to &quot;与普通的 \`&lt;script&gt;\` 一起使用 {#usage-alongside-normal-script}&quot;">​</a></h2><p><code>&lt;script setup&gt;</code> 可以和普通的 <code>&lt;script&gt;</code> 一起使用。普通的 <code>&lt;script&gt;</code> 在有这些需要的情况下或许会被使用到：</p><ul><li>声明无法在 <code>&lt;script setup&gt;</code> 中声明的选项，例如 <code>inheritAttrs</code> 或插件的自定义选项 (在 3.3+ 中可以通过 <a href="/api/sfc-script-setup.html#defineoptions"><code>defineOptions</code></a> 替代)。</li><li>声明模块的具名导出 (named exports)。</li><li>运行只需要在模块作用域执行一次的副作用，或是创建单例对象。</li></ul><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">// 普通 &lt;script&gt;，在模块作用域下执行 (仅一次)</span></span>
<span class="line"><span style="color:#B392F0;">runSideEffectOnce</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 声明额外的选项</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  inheritAttrs: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  customOptions: {}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> setup</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">// 在 setup() 作用域中执行 (对每个实例皆如此)</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>在同一组件中将 <code>&lt;script setup&gt;</code> 与 <code>&lt;script&gt;</code> 结合使用的支持仅限于上述情况。具体来说：</p><ul><li><strong>不要</strong>为已经可以用 <code>&lt;script setup&gt;</code> 定义的选项使用单独的 <code>&lt;script&gt;</code> 部分，如 <code>props</code> 和 <code>emits</code>。</li><li>在 <code>&lt;script setup&gt;</code> 中创建的变量不会作为属性添加到组件实例中，这使得它们无法从选项式 API 中访问。我们强烈反对以这种方式混合 API。</li></ul><p>如果你发现自己处于以上任一不被支持的场景中，那么你应该考虑切换到一个显式的 <a href="/api/composition-api-setup.html"><code>setup()</code></a> 函数，而不是使用 <code>&lt;script setup&gt;</code>。</p><h2 id="top-level-await" tabindex="-1">顶层 <code>await</code> <a class="header-anchor" href="#top-level-await" aria-label="Permalink to &quot;顶层 \`await\` {#top-level-await}&quot;">​</a></h2><p><code>&lt;script setup&gt;</code> 中可以使用顶层 <code>await</code>。结果代码会被编译成 <code>async setup()</code>：</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> setup</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> post</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> await</span><span style="color:#B392F0;"> fetch</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`/api/post/1\`</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">r</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> r.</span><span style="color:#B392F0;">json</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>另外，await 的表达式会自动编译成在 <code>await</code> 之后保留当前组件实例上下文的格式。</p><div class="warning custom-block"><p class="custom-block-title">注意</p><p><code>async setup()</code> 必须与 <a href="/guide/built-ins/suspense.html"><code>Suspense</code></a> 组合使用，该特性目前仍处于实验阶段。我们计划在未来的版本中完成该特性并编写文档——但如果你现在就感兴趣，可以参考其<a href="https://github.com/vuejs/core/blob/main/packages/runtime-core/__tests__/components/Suspense.spec.ts" target="_blank" rel="noreferrer">测试</a>来了解其工作方式。</p></div><h2 id="imports-statements" tabindex="-1">导入语句 <a class="header-anchor" href="#imports-statements" aria-label="Permalink to &quot;导入语句 {#imports-statements}&quot;">​</a></h2><p>Vue 中的导入语句遵循 <a href="https://nodejs.org/api/esm.html" target="_blank" rel="noreferrer">ECMAScript 模块规范</a>。 此外，你还可以使用构建工具配置中定义的别名：</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> setup</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { ref } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { componentA } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;./Components&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { componentB } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;@/Components&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { componentC } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;~/Components&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="generics" tabindex="-1">泛型 <sup class="vt-badge ts"></sup> <a class="header-anchor" href="#generics" aria-label="Permalink to &quot;泛型 &lt;sup class=&quot;vt-badge ts&quot; /&gt; {#generics}&quot;">​</a></h2><p>可以使用 <code>&lt;script&gt;</code> 标签上的 <code>generic</code> 属性声明泛型类型参数：</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> setup</span><span style="color:#B392F0;"> lang</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;ts&quot;</span><span style="color:#B392F0;"> generic</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">T</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">defineProps</span><span style="color:#E1E4E8;">&lt;{</span></span>
<span class="line"><span style="color:#FFAB70;">  items</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> T</span><span style="color:#E1E4E8;">[]</span></span>
<span class="line"><span style="color:#FFAB70;">  selected</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> T</span></span>
<span class="line"><span style="color:#E1E4E8;">}&gt;()</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p><code>generic</code> 的值与 TypeScript 中位于 <code>&lt;...&gt;</code> 之间的参数列表完全相同。例如，你可以使用多个参数，<code>extends</code> 约束，默认类型和引用导入的类型：</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span></span>
<span class="line"><span style="color:#B392F0;">  setup</span></span>
<span class="line"><span style="color:#B392F0;">  lang</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;ts&quot;</span></span>
<span class="line"><span style="color:#B392F0;">  generic</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">T</span><span style="color:#F97583;"> extends</span><span style="color:#79B8FF;"> string</span><span style="color:#F97583;"> |</span><span style="color:#79B8FF;"> number</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">U</span><span style="color:#F97583;"> extends</span><span style="color:#B392F0;"> Item</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#F97583;"> type</span><span style="color:#E1E4E8;"> { Item } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;./types&#39;</span></span>
<span class="line"><span style="color:#B392F0;">defineProps</span><span style="color:#E1E4E8;">&lt;{</span></span>
<span class="line"><span style="color:#FFAB70;">  id</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> T</span></span>
<span class="line"><span style="color:#FFAB70;">  list</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> U</span><span style="color:#E1E4E8;">[]</span></span>
<span class="line"><span style="color:#E1E4E8;">}&gt;()</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>当无法自动推断泛型组件的具体类型时，可使用指令 <code>@vue-generic</code> 来显式指定：</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">  &lt;!-- @vue-generic {import(&#39;@/api&#39;).Actor} --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">ApiSelect</span><span style="color:#B392F0;"> v-model</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;peopleIds&quot;</span><span style="color:#B392F0;"> endpoint</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;/api/actors&quot;</span><span style="color:#B392F0;"> id-prop</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;actorId&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  &lt;!-- @vue-generic {import(&#39;@/api&#39;).Genre} --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">ApiSelect</span><span style="color:#B392F0;"> v-model</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;genreIds&quot;</span><span style="color:#B392F0;"> endpoint</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;/api/genres&quot;</span><span style="color:#B392F0;"> id-prop</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;genreId&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>为了在 <code>ref</code> 中使用泛型组件的引用，你需要使用 <a href="https://www.npmjs.com/package/vue-component-type-helpers" target="_blank" rel="noreferrer"><code>vue-component-type-helpers</code></a> 库，因为 <code>InstanceType</code> 在这种场景下不起作用。</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span></span>
<span class="line"><span style="color:#B392F0;">  setup</span></span>
<span class="line"><span style="color:#B392F0;">  lang</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;ts&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> componentWithoutGenerics </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;../component-without-generics.vue&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> genericComponent </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;../generic-component.vue&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#F97583;"> type</span><span style="color:#E1E4E8;"> { ComponentExposed } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue-component-type-helpers&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 适用于没有泛型的组件</span></span>
<span class="line"><span style="color:#B392F0;">ref</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">InstanceType</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> componentWithoutGenerics&gt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">ref</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">ComponentExposed</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> genericComponent&gt;&gt;();</span></span></code></pre></div><h2 id="restrictions" tabindex="-1">限制 <a class="header-anchor" href="#restrictions" aria-label="Permalink to &quot;限制 {#restrictions}&quot;">​</a></h2><ul><li>由于模块执行语义的差异，<code>&lt;script setup&gt;</code> 中的代码依赖单文件组件的上下文。当将其移动到外部的 <code>.js</code> 或者 <code>.ts</code> 文件中的时候，对于开发者和工具来说都会感到混乱。因此，<strong><code>&lt;script setup&gt;</code></strong> 不能和 <code>src</code> attribute 一起使用。</li><li><code>&lt;script setup&gt;</code> 不支持 DOM 内根组件模板。(<a href="https://github.com/vuejs/core/issues/8391" target="_blank" rel="noreferrer">相关讨论</a>)</li></ul>`,115)]))}const u=n(o,[["render",e]]);export{d as __pageData,u as default};
