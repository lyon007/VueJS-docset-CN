import{_ as a,c as n,b as p,o as l}from"./chunks/framework.B2oIMGqn.js";const u=JSON.parse('{"title":"TypeScript 工具类型","description":"","frontmatter":{},"headers":[{"level":2,"title":"PropType<T>","slug":"proptype-t","link":"#proptype-t","children":[]},{"level":2,"title":"MaybeRef<T>","slug":"mayberef","link":"#mayberef","children":[]},{"level":2,"title":"MaybeRefOrGetter<T>","slug":"maybereforgetter","link":"#maybereforgetter","children":[]},{"level":2,"title":"ExtractPropTypes<T>","slug":"extractproptypes","link":"#extractproptypes","children":[]},{"level":2,"title":"ExtractPublicPropTypes<T>","slug":"extractpublicproptypes","link":"#extractpublicproptypes","children":[]},{"level":2,"title":"ComponentCustomProperties","slug":"componentcustomproperties","link":"#componentcustomproperties","children":[]},{"level":2,"title":"ComponentCustomOptions","slug":"componentcustomoptions","link":"#componentcustomoptions","children":[]},{"level":2,"title":"ComponentCustomProps","slug":"componentcustomprops","link":"#componentcustomprops","children":[]},{"level":2,"title":"CSSProperties","slug":"cssproperties","link":"#cssproperties","children":[]}],"relativePath":"api/utility-types.md","filePath":"api/utility-types.md"}'),o={name:"api/utility-types.md"};function e(t,s,r,c,i,y){return l(),n("div",null,s[0]||(s[0]=[p(`<h1 id="utility-types" tabindex="-1">TypeScript 工具类型 <a class="header-anchor" href="#utility-types" aria-label="Permalink to &quot;TypeScript 工具类型 {#utility-types}&quot;">​</a></h1><div class="info custom-block"><p class="custom-block-title">INFO</p><p>此页面仅列出了一些可能需要解释其使用方式的常用工具类型。有关导出类型的完整列表，请查看<a href="https://github.com/vuejs/core/blob/main/packages/runtime-core/src/index.ts#L131" target="_blank" rel="noreferrer">源代码</a>。</p></div><h2 id="proptype-t" tabindex="-1">PropType&lt;T&gt; <a class="header-anchor" href="#proptype-t" aria-label="Permalink to &quot;PropType\\&lt;T&gt; {#proptype-t}&quot;">​</a></h2><p>用于在用运行时 props 声明时给一个 prop 标注更复杂的类型定义。</p><ul><li><p><strong>示例</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#F97583;"> type</span><span style="color:#E1E4E8;"> { PropType } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">interface</span><span style="color:#B392F0;"> Book</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#FFAB70;">  title</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span></span>
<span class="line"><span style="color:#FFAB70;">  author</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span></span>
<span class="line"><span style="color:#FFAB70;">  year</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> number</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  props: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    book: {</span></span>
<span class="line"><span style="color:#6A737D;">      // 提供一个比 \`Object\` 更具体的类型</span></span>
<span class="line"><span style="color:#E1E4E8;">      type: Object </span><span style="color:#F97583;">as</span><span style="color:#B392F0;"> PropType</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Book</span><span style="color:#E1E4E8;">&gt;,</span></span>
<span class="line"><span style="color:#E1E4E8;">      required: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>参考</strong><a href="/guide/typescript/options-api.html#typing-component-props">指南 - 为组件 props 标注类型</a></p></li></ul><h2 id="mayberef" tabindex="-1">MaybeRef&lt;T&gt; <a class="header-anchor" href="#mayberef" aria-label="Permalink to &quot;MaybeRef\\&lt;T&gt; {#mayberef}&quot;">​</a></h2><ul><li>仅在 3.3+ 版本中支持。</li></ul><p><code>T | Ref&lt;T&gt;</code> 的别名。对于标注<a href="/guide/reusability/composables.html">组合式函数</a>的参数很有用。</p><h2 id="maybereforgetter" tabindex="-1">MaybeRefOrGetter&lt;T&gt; <a class="header-anchor" href="#maybereforgetter" aria-label="Permalink to &quot;MaybeRefOrGetter\\&lt;T&gt; {#maybereforgetter}&quot;">​</a></h2><ul><li>仅在 3.3+ 版本中支持。</li></ul><p><code>T | Ref&lt;T&gt; | (() =&gt; T)</code> 的别名。对于标注<a href="/guide/reusability/composables.html">组合式函数</a>的参数很有用。</p><h2 id="extractproptypes" tabindex="-1">ExtractPropTypes&lt;T&gt; <a class="header-anchor" href="#extractproptypes" aria-label="Permalink to &quot;ExtractPropTypes\\&lt;T&gt; {#extractproptypes}&quot;">​</a></h2><p>从运行时的 props 选项对象中提取 props 类型。提取到的类型是面向内部的，也就是说组件接收到的是解析后的 props。这意味着 boolean 类型的 props 和带有默认值的 props 总是一个定义的值，即使它们不是必需的。</p><p>要提取面向外部的 props，即父组件允许传递的 props，请使用 <a href="#extractpublicproptypes"><code>ExtractPublicPropTypes</code></a>。</p><ul><li><p><strong>示例</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> propsOptions</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  foo: String,</span></span>
<span class="line"><span style="color:#E1E4E8;">  bar: Boolean,</span></span>
<span class="line"><span style="color:#E1E4E8;">  baz: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    type: Number,</span></span>
<span class="line"><span style="color:#E1E4E8;">    required: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  qux: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    type: Number,</span></span>
<span class="line"><span style="color:#E1E4E8;">    default: </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">as</span><span style="color:#F97583;"> const</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#B392F0;"> Props</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> ExtractPropTypes</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> propsOptions&gt;</span></span>
<span class="line"><span style="color:#6A737D;">// {</span></span>
<span class="line"><span style="color:#6A737D;">//   foo?: string,</span></span>
<span class="line"><span style="color:#6A737D;">//   bar: boolean,</span></span>
<span class="line"><span style="color:#6A737D;">//   baz: number,</span></span>
<span class="line"><span style="color:#6A737D;">//   qux: number</span></span>
<span class="line"><span style="color:#6A737D;">// }</span></span></code></pre></div></li></ul><h2 id="extractpublicproptypes" tabindex="-1">ExtractPublicPropTypes&lt;T&gt; <a class="header-anchor" href="#extractpublicproptypes" aria-label="Permalink to &quot;ExtractPublicPropTypes\\&lt;T&gt; {#extractpublicproptypes}&quot;">​</a></h2><ul><li>仅在 3.3+ 版本中支持。</li></ul><p>从运行时的 props 选项对象中提取 prop。提取的类型是面向外部的，即父组件允许传递的 props。</p><ul><li><p><strong>示例</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> propsOptions</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  foo: String,</span></span>
<span class="line"><span style="color:#E1E4E8;">  bar: Boolean,</span></span>
<span class="line"><span style="color:#E1E4E8;">  baz: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    type: Number,</span></span>
<span class="line"><span style="color:#E1E4E8;">    required: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  qux: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    type: Number,</span></span>
<span class="line"><span style="color:#E1E4E8;">    default: </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">as</span><span style="color:#F97583;"> const</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#B392F0;"> Props</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> ExtractPublicPropTypes</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> propsOptions&gt;</span></span>
<span class="line"><span style="color:#6A737D;">// {</span></span>
<span class="line"><span style="color:#6A737D;">//   foo?: string,</span></span>
<span class="line"><span style="color:#6A737D;">//   bar?: boolean,</span></span>
<span class="line"><span style="color:#6A737D;">//   baz: number,</span></span>
<span class="line"><span style="color:#6A737D;">//   qux?: number</span></span>
<span class="line"><span style="color:#6A737D;">// }</span></span></code></pre></div></li></ul><h2 id="componentcustomproperties" tabindex="-1">ComponentCustomProperties <a class="header-anchor" href="#componentcustomproperties" aria-label="Permalink to &quot;ComponentCustomProperties {#componentcustomproperties}&quot;">​</a></h2><p>用于增强组件实例类型以支持自定义全局属性。</p><ul><li><p><strong>示例</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> axios </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;axios&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">declare</span><span style="color:#F97583;"> module</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">  interface</span><span style="color:#B392F0;"> ComponentCustomProperties</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#FFAB70;">    $http</span><span style="color:#F97583;">:</span><span style="color:#F97583;"> typeof</span><span style="color:#E1E4E8;"> axios</span></span>
<span class="line"><span style="color:#B392F0;">    $translate</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">key</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#79B8FF;"> string</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>类型扩展必须被放置在一个模块 <code>.ts</code> 或 <code>.d.ts</code> 文件中。查看<a href="/guide/typescript/options-api.html#augmenting-global-properties">类型扩展指南</a>了解更多细节</p></div></li><li><p><strong>参考</strong><a href="/guide/typescript/options-api.html#augmenting-global-properties">指南 - 扩展全局属性</a></p></li></ul><h2 id="componentcustomoptions" tabindex="-1">ComponentCustomOptions <a class="header-anchor" href="#componentcustomoptions" aria-label="Permalink to &quot;ComponentCustomOptions {#componentcustomoptions}&quot;">​</a></h2><p>用来扩展组件选项类型以支持自定义选项。</p><ul><li><p><strong>示例</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { Route } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue-router&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">declare</span><span style="color:#F97583;"> module</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">  interface</span><span style="color:#B392F0;"> ComponentCustomOptions</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#B392F0;">    beforeRouteEnter</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">to</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> any</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">from</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> any</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">next</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#79B8FF;"> void</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> void</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>类型扩展必须被放置在一个模块 <code>.ts</code> 或 <code>.d.ts</code> 文件中。查看<a href="/guide/typescript/options-api.html#augmenting-global-properties">类型扩展指南</a>了解更多细节。</p></div></li><li><p><strong>参考</strong><a href="/guide/typescript/options-api.html#augmenting-custom-options">指南 - 扩展自定义选项</a></p></li></ul><h2 id="componentcustomprops" tabindex="-1">ComponentCustomProps <a class="header-anchor" href="#componentcustomprops" aria-label="Permalink to &quot;ComponentCustomProps {#componentcustomprops}&quot;">​</a></h2><p>用于扩展全局可用的 TSX props，以便在 TSX 元素上使用没有在组件选项上定义过的 props。</p><ul><li><p><strong>示例</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">declare</span><span style="color:#F97583;"> module</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">  interface</span><span style="color:#B392F0;"> ComponentCustomProps</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#FFAB70;">    hello</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> string</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> {}</span></span></code></pre></div><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 现在即使没有在组件选项上定义过 hello 这个 prop 也依然能通过类型检查了</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">MyComponent</span><span style="color:#B392F0;"> hello</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;world&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>类型扩展必须被放置在一个模块 <code>.ts</code> 或 <code>.d.ts</code> 文件中。查看<a href="/guide/typescript/options-api.html#augmenting-global-properties">类型扩展指南</a>了解更多细节。</p></div></li></ul><h2 id="cssproperties" tabindex="-1">CSSProperties <a class="header-anchor" href="#cssproperties" aria-label="Permalink to &quot;CSSProperties {#cssproperties}&quot;">​</a></h2><p>用于扩展在样式属性绑定上允许的值的类型。</p><ul><li><strong>示例</strong></li></ul><p>允许任意自定义 CSS 属性：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">declare</span><span style="color:#F97583;"> module</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">  interface</span><span style="color:#B392F0;"> CSSProperties</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    [</span><span style="color:#FFAB70;">key</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;"> \`--\${</span><span style="color:#79B8FF;">string</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#B392F0;"> style</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{ { </span><span style="color:#9ECBFF;">&#39;--bg-color&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;blue&#39;</span><span style="color:#E1E4E8;"> } }&gt;</span></span></code></pre></div><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#B392F0;"> :style</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;{ &#39;--bg-color&#39;: &#39;blue&#39; }&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>类型增强必须被放置在一个模块 <code>.ts</code> 或 <code>.d.ts</code> 文件中。查看<a href="/guide/typescript/options-api.html#augmenting-global-properties">类型增强指南</a>了解更多细节。</p></div><div class="info custom-block"><p class="custom-block-title">参考</p><p>单文件组件 <code>&lt;style&gt;</code> 标签支持通过 <code>v-bind</code> CSS 函数来链接 CSS 值与组件状态。这允许在没有类型扩展的情况下自定义属性。</p><ul><li><a href="/api/sfc-css-features.html#v-bind-in-css">CSS 中的 v-bind()</a></li></ul></div>`,37)]))}const d=a(o,[["render",e]]);export{u as __pageData,d as default};
