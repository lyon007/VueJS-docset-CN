import{_ as n,c as a,b as p,o as l}from"./chunks/framework.B2oIMGqn.js";const F=JSON.parse('{"title":"TypeScript 与组合式 API","description":"","frontmatter":{},"headers":[{"level":2,"title":"为组件的 props 标注类型","slug":"typing-component-props","link":"#typing-component-props","children":[{"level":3,"title":"使用 <script setup>","slug":"using-script-setup","link":"#using-script-setup","children":[]},{"level":3,"title":"Props 解构默认值","slug":"props-default-values","link":"#props-default-values","children":[]},{"level":3,"title":"非 <script setup> 场景下","slug":"without-script-setup","link":"#without-script-setup","children":[]},{"level":3,"title":"复杂的 prop 类型","slug":"complex-prop-types","link":"#complex-prop-types","children":[]}]},{"level":2,"title":"为组件的 emits 标注类型","slug":"typing-component-emits","link":"#typing-component-emits","children":[]},{"level":2,"title":"为 ref() 标注类型","slug":"typing-ref","link":"#typing-ref","children":[]},{"level":2,"title":"为 reactive() 标注类型","slug":"typing-reactive","link":"#typing-reactive","children":[]},{"level":2,"title":"为 computed() 标注类型","slug":"typing-computed","link":"#typing-computed","children":[]},{"level":2,"title":"为事件处理函数标注类型","slug":"typing-event-handlers","link":"#typing-event-handlers","children":[]},{"level":2,"title":"为 provide / inject 标注类型","slug":"typing-provide-inject","link":"#typing-provide-inject","children":[]},{"level":2,"title":"为模板引用标注类型","slug":"typing-template-refs","link":"#typing-template-refs","children":[]},{"level":2,"title":"为组件模板引用标注类型","slug":"typing-component-template-refs","link":"#typing-component-template-refs","children":[]}],"relativePath":"guide/typescript/composition-api.md","filePath":"guide/typescript/composition-api.md"}'),o={name:"guide/typescript/composition-api.md"};function e(t,s,c,r,y,E){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="typescript-with-composition-api" tabindex="-1">TypeScript 与组合式 API <a class="header-anchor" href="#typescript-with-composition-api" aria-label="Permalink to &quot;TypeScript 与组合式 API {#typescript-with-composition-api}&quot;">​</a></h1><blockquote><p>这一章假设你已经阅读了<a href="./overview.html">搭配 TypeScript 使用 Vue</a> 的概览。</p></blockquote><h2 id="typing-component-props" tabindex="-1">为组件的 props 标注类型 <a class="header-anchor" href="#typing-component-props" aria-label="Permalink to &quot;为组件的 props 标注类型 {#typing-component-props}&quot;">​</a></h2><h3 id="using-script-setup" tabindex="-1">使用 <code>&lt;script setup&gt;</code> <a class="header-anchor" href="#using-script-setup" aria-label="Permalink to &quot;使用 \`&lt;script setup&gt;\` {#using-script-setup}&quot;">​</a></h3><p>当使用 <code>&lt;script setup&gt;</code> 时，<code>defineProps()</code> 宏函数支持从它的参数中推导类型：</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> setup</span><span style="color:#B392F0;"> lang</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;ts&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> props</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> defineProps</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  foo: { type: String, required: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">  bar: Number</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">props.foo </span><span style="color:#6A737D;">// string</span></span>
<span class="line"><span style="color:#E1E4E8;">props.bar </span><span style="color:#6A737D;">// number | undefined</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>这被称之为“运行时声明”，因为传递给 <code>defineProps()</code> 的参数会作为运行时的 <code>props</code> 选项使用。</p><p>然而，通过泛型参数来定义 props 的类型通常更直接：</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> setup</span><span style="color:#B392F0;"> lang</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;ts&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> props</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> defineProps</span><span style="color:#E1E4E8;">&lt;{</span></span>
<span class="line"><span style="color:#FFAB70;">  foo</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span></span>
<span class="line"><span style="color:#FFAB70;">  bar</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> number</span></span>
<span class="line"><span style="color:#E1E4E8;">}&gt;()</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>这被称之为“基于类型的声明”。编译器会尽可能地尝试根据类型参数推导出等价的运行时选项。在这种场景下，我们第二个例子中编译出的运行时选项和第一个是完全一致的。</p><p>基于类型的声明或者运行时声明可以择一使用，但是不能同时使用。</p><p>我们也可以将 props 的类型移入一个单独的接口中：</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> setup</span><span style="color:#B392F0;"> lang</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;ts&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">interface</span><span style="color:#B392F0;"> Props</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#FFAB70;">  foo</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span></span>
<span class="line"><span style="color:#FFAB70;">  bar</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> number</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> props</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> defineProps</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Props</span><span style="color:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>这同样适用于 <code>Props</code> 从另一个源文件中导入的情况。该功能要求 TypeScript 作为 Vue 的一个 peer dependency。</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> setup</span><span style="color:#B392F0;"> lang</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;ts&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#F97583;"> type</span><span style="color:#E1E4E8;"> { Props } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;./foo&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> props</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> defineProps</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Props</span><span style="color:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><h4 id="syntax-limitations" tabindex="-1">语法限制 <a class="header-anchor" href="#syntax-limitations" aria-label="Permalink to &quot;语法限制 {#syntax-limitations}&quot;">​</a></h4><p>在 3.2 及以下版本中，<code>defineProps()</code> 的泛型类型参数仅限于类型字面量或对本地接口的引用。</p><p>这个限制在 3.3 中得到了解决。最新版本的 Vue 支持在类型参数位置引用导入和有限的复杂类型。但是，由于类型到运行时转换仍然基于 AST，一些需要实际类型分析的复杂类型，例如条件类型，还未支持。你可以使用条件类型来指定单个 prop 的类型，但不能用于整个 props 对象的类型。</p><h3 id="props-default-values" tabindex="-1">Props 解构默认值 <a class="header-anchor" href="#props-default-values" aria-label="Permalink to &quot;Props 解构默认值 {#props-default-values}&quot;">​</a></h3><p>当使用基于类型的声明时，我们失去了为 props 声明默认值的能力。可以通过使用<a href="/guide/components/props.html#reactive-props-destructure">响应式 Props 解构</a>解决这个问题。 <sup class="vt-badge" data-text="3.5+"></sup>：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">interface</span><span style="color:#B392F0;"> Props</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#FFAB70;">  msg</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> string</span></span>
<span class="line"><span style="color:#FFAB70;">  labels</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">[]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">msg</span><span style="color:#F97583;"> =</span><span style="color:#9ECBFF;"> &#39;hello&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">labels</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;one&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;two&#39;</span><span style="color:#E1E4E8;">] } </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> defineProps</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Props</span><span style="color:#E1E4E8;">&gt;()</span></span></code></pre></div><p>在 3.4 及更低版本，响应式 Props 解构不会被默认启用。另一种选择是使用 <code>withDefaults</code> 编译器宏：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">interface</span><span style="color:#B392F0;"> Props</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#FFAB70;">  msg</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> string</span></span>
<span class="line"><span style="color:#FFAB70;">  labels</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">[]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> props</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> withDefaults</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">defineProps</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Props</span><span style="color:#E1E4E8;">&gt;(), {</span></span>
<span class="line"><span style="color:#E1E4E8;">  msg: </span><span style="color:#9ECBFF;">&#39;hello&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#B392F0;">  labels</span><span style="color:#E1E4E8;">: () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;one&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;two&#39;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre></div><p>这将被编译为等效的运行时 props <code>default</code> 选项。此外，<code>withDefaults</code> 帮助程序为默认值提供类型检查，并确保返回的 props 类型删除了已声明默认值的属性的可选标志。</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>请注意，在使用 <code>withDefaults</code> 时，默认值的可变引用类型 (如数组或对象) 应该在函数中进行包装，以避免意外修改和外部副作用。这样可以确保每个组件实例都会获得自己默认值的副本。当使用解构时，这<strong>不</strong>是必要的。</p></div><h3 id="without-script-setup" tabindex="-1">非 <code>&lt;script setup&gt;</code> 场景下 <a class="header-anchor" href="#without-script-setup" aria-label="Permalink to &quot;非 \`&lt;script setup&gt;\` 场景下 {#without-script-setup}&quot;">​</a></h3><p>如果没有使用 <code>&lt;script setup&gt;</code>，那么为了开启 props 的类型推导，必须使用 <code>defineComponent()</code>。传入 <code>setup()</code> 的 props 对象类型是从 <code>props</code> 选项中推导而来。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { defineComponent } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#B392F0;"> defineComponent</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  props: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    message: String</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#B392F0;">  setup</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">props</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    props.message </span><span style="color:#6A737D;">// &lt;-- 类型：string</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre></div><h3 id="complex-prop-types" tabindex="-1">复杂的 prop 类型 <a class="header-anchor" href="#complex-prop-types" aria-label="Permalink to &quot;复杂的 prop 类型 {#complex-prop-types}&quot;">​</a></h3><p>通过基于类型的声明，一个 prop 可以像使用其他任何类型一样使用一个复杂类型：</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> setup</span><span style="color:#B392F0;"> lang</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;ts&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">interface</span><span style="color:#B392F0;"> Book</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#FFAB70;">  title</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span></span>
<span class="line"><span style="color:#FFAB70;">  author</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span></span>
<span class="line"><span style="color:#FFAB70;">  year</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> number</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> props</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> defineProps</span><span style="color:#E1E4E8;">&lt;{</span></span>
<span class="line"><span style="color:#FFAB70;">  book</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Book</span></span>
<span class="line"><span style="color:#E1E4E8;">}&gt;()</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>对于运行时声明，我们可以使用 <code>PropType</code> 工具类型：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#F97583;"> type</span><span style="color:#E1E4E8;"> { PropType } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> props</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> defineProps</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  book: Object </span><span style="color:#F97583;">as</span><span style="color:#B392F0;"> PropType</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Book</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre></div><p>其工作方式与直接指定 <code>props</code> 选项基本相同：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { defineComponent } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#F97583;"> type</span><span style="color:#E1E4E8;"> { PropType } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#B392F0;"> defineComponent</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  props: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    book: Object </span><span style="color:#F97583;">as</span><span style="color:#B392F0;"> PropType</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Book</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre></div><p><code>props</code> 选项通常用于 Options API，因此你会在<a href="/guide/typescript/options-api.html#typing-component-props">选项式 API 与 TypeScript</a> 指南中找到更详细的例子。这些例子中展示的技术也适用于使用 <code>defineProps()</code> 的运行时声明。</p><h2 id="typing-component-emits" tabindex="-1">为组件的 emits 标注类型 <a class="header-anchor" href="#typing-component-emits" aria-label="Permalink to &quot;为组件的 emits 标注类型 {#typing-component-emits}&quot;">​</a></h2><p>在 <code>&lt;script setup&gt;</code> 中，<code>emit</code> 函数的类型标注也可以通过运行时声明或是类型声明进行：</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> setup</span><span style="color:#B392F0;"> lang</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;ts&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">// 运行时</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> emit</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> defineEmits</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&#39;change&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;update&#39;</span><span style="color:#E1E4E8;">])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 基于选项</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> emit</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> defineEmits</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#B392F0;">  change</span><span style="color:#E1E4E8;">: (</span><span style="color:#FFAB70;">id</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> number</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    // 返回 \`true\` 或 \`false\`</span></span>
<span class="line"><span style="color:#6A737D;">    // 表明验证通过或失败</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#B392F0;">  update</span><span style="color:#E1E4E8;">: (</span><span style="color:#FFAB70;">value</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    // 返回 \`true\` 或 \`false\`</span></span>
<span class="line"><span style="color:#6A737D;">    // 表明验证通过或失败</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 基于类型</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> emit</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> defineEmits</span><span style="color:#E1E4E8;">&lt;{</span></span>
<span class="line"><span style="color:#E1E4E8;">  (</span><span style="color:#FFAB70;">e</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;"> &#39;change&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">id</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> number</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> void</span></span>
<span class="line"><span style="color:#E1E4E8;">  (</span><span style="color:#FFAB70;">e</span><span style="color:#F97583;">:</span><span style="color:#9ECBFF;"> &#39;update&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">value</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> void</span></span>
<span class="line"><span style="color:#E1E4E8;">}&gt;()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 3.3+: 可选的、更简洁的语法</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> emit</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> defineEmits</span><span style="color:#E1E4E8;">&lt;{</span></span>
<span class="line"><span style="color:#FFAB70;">  change</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#FFAB70;">  update</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">}&gt;()</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>类型参数可以是以下的一种：</p><ol><li>一个可调用的函数类型，但是写作一个包含<a href="https://www.typescriptlang.org/docs/handbook/2/functions.html#call-signatures" target="_blank" rel="noreferrer">调用签名</a>的类型字面量。它将被用作返回的 <code>emit</code> 函数的类型。</li><li>一个类型字面量，其中键是事件名称，值是数组或元组类型，表示事件的附加接受参数。上面的示例使用了具名元组，因此每个参数都可以有一个显式的名称。</li></ol><p>我们可以看到，基于类型的声明使我们可以对所触发事件的类型进行更细粒度的控制。</p><p>若没有使用 <code>&lt;script setup&gt;</code>，<code>defineComponent()</code> 也可以根据 <code>emits</code> 选项推导暴露在 setup 上下文中的 <code>emit</code> 函数的类型：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { defineComponent } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#B392F0;"> defineComponent</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  emits: [</span><span style="color:#9ECBFF;">&#39;change&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#B392F0;">  setup</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">props</span><span style="color:#E1E4E8;">, { </span><span style="color:#FFAB70;">emit</span><span style="color:#E1E4E8;"> }) {</span></span>
<span class="line"><span style="color:#B392F0;">    emit</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;change&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// &lt;-- 类型检查 / 自动补全</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre></div><h2 id="typing-ref" tabindex="-1">为 <code>ref()</code> 标注类型 <a class="header-anchor" href="#typing-ref" aria-label="Permalink to &quot;为 \`ref()\` 标注类型 {#typing-ref}&quot;">​</a></h2><p>ref 会根据初始化时的值推导其类型：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { ref } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 推导出的类型：Ref&lt;number&gt;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> year</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2020</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// =&gt; TS Error: Type &#39;string&#39; is not assignable to type &#39;number&#39;.</span></span>
<span class="line"><span style="color:#E1E4E8;">year.value </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &#39;2020&#39;</span></span></code></pre></div><p>有时我们可能想为 ref 内的值指定一个更复杂的类型，可以通过使用 <code>Ref</code> 这个类型：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { ref } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#F97583;"> type</span><span style="color:#E1E4E8;"> { Ref } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> year</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Ref</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">string</span><span style="color:#F97583;"> |</span><span style="color:#79B8FF;"> number</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;2020&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">year.value </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> 2020</span><span style="color:#6A737D;"> // 成功！</span></span></code></pre></div><p>或者，在调用 <code>ref()</code> 时传入一个泛型参数，来覆盖默认的推导行为：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 得到的类型：Ref&lt;string | number&gt;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> year</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">string</span><span style="color:#F97583;"> |</span><span style="color:#79B8FF;"> number</span><span style="color:#E1E4E8;">&gt;(</span><span style="color:#9ECBFF;">&#39;2020&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">year.value </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> 2020</span><span style="color:#6A737D;"> // 成功！</span></span></code></pre></div><p>如果你指定了一个泛型参数但没有给出初始值，那么最后得到的就将是一个包含 <code>undefined</code> 的联合类型：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 推导得到的类型：Ref&lt;number | undefined&gt;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> n</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">&gt;()</span></span></code></pre></div><h2 id="typing-reactive" tabindex="-1">为 <code>reactive()</code> 标注类型 <a class="header-anchor" href="#typing-reactive" aria-label="Permalink to &quot;为 \`reactive()\` 标注类型 {#typing-reactive}&quot;">​</a></h2><p><code>reactive()</code> 也会隐式地从它的参数中推导类型：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { reactive } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 推导得到的类型：{ title: string }</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> book</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> reactive</span><span style="color:#E1E4E8;">({ title: </span><span style="color:#9ECBFF;">&#39;Vue 3 指引&#39;</span><span style="color:#E1E4E8;"> })</span></span></code></pre></div><p>要显式地标注一个 <code>reactive</code> 变量的类型，我们可以使用接口：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { reactive } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">interface</span><span style="color:#B392F0;"> Book</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#FFAB70;">  title</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span></span>
<span class="line"><span style="color:#FFAB70;">  year</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> number</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> book</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Book</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> reactive</span><span style="color:#E1E4E8;">({ title: </span><span style="color:#9ECBFF;">&#39;Vue 3 指引&#39;</span><span style="color:#E1E4E8;"> })</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>不推荐使用 <code>reactive()</code> 的泛型参数，因为处理了深层次 ref 解包的返回值与泛型参数的类型不同。</p></div><h2 id="typing-computed" tabindex="-1">为 <code>computed()</code> 标注类型 <a class="header-anchor" href="#typing-computed" aria-label="Permalink to &quot;为 \`computed()\` 标注类型 {#typing-computed}&quot;">​</a></h2><p><code>computed()</code> 会自动从其计算函数的返回值上推导出类型：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { ref, computed } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> count</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 推导得到的类型：ComputedRef&lt;number&gt;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> double</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> computed</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> count.value </span><span style="color:#F97583;">*</span><span style="color:#79B8FF;"> 2</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// =&gt; TS Error: Property &#39;split&#39; does not exist on type &#39;number&#39;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> result</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> double.value.</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre></div><p>你还可以通过泛型参数显式指定类型：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> double</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> computed</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">&gt;(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">  // 若返回值不是 number 类型则会报错</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre></div><h2 id="typing-event-handlers" tabindex="-1">为事件处理函数标注类型 <a class="header-anchor" href="#typing-event-handlers" aria-label="Permalink to &quot;为事件处理函数标注类型 {#typing-event-handlers}&quot;">​</a></h2><p>在处理原生 DOM 事件时，应该为我们传递给事件处理函数的参数正确地标注类型。让我们看一下这个例子：</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> setup</span><span style="color:#B392F0;"> lang</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;ts&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> handleChange</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6A737D;">  // \`event\` 隐式地标注为 \`any\` 类型</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(event.target.value)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">input</span><span style="color:#B392F0;"> type</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;text&quot;</span><span style="color:#B392F0;"> @change</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;handleChange&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>没有类型标注时，这个 <code>event</code> 参数会隐式地标注为 <code>any</code> 类型。这也会在 <code>tsconfig.json</code> 中配置了 <code>&quot;strict&quot;: true</code> 或 <code>&quot;noImplicitAny&quot;: true</code> 时报出一个 TS 错误。因此，建议显式地为事件处理函数的参数标注类型。此外，你在访问 <code>event</code> 上的属性时可能需要使用类型断言：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> handleChange</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">event</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Event</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">((event.target </span><span style="color:#F97583;">as</span><span style="color:#B392F0;"> HTMLInputElement</span><span style="color:#E1E4E8;">).value)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><h2 id="typing-provide-inject" tabindex="-1">为 provide / inject 标注类型 <a class="header-anchor" href="#typing-provide-inject" aria-label="Permalink to &quot;为 provide / inject 标注类型 {#typing-provide-inject}&quot;">​</a></h2><p>provide 和 inject 通常会在不同的组件中运行。要正确地为注入的值标记类型，Vue 提供了一个 <code>InjectionKey</code> 接口，它是一个继承自 <code>Symbol</code> 的泛型类型，可以用来在提供者和消费者之间同步注入值的类型：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { provide, inject } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#F97583;"> type</span><span style="color:#E1E4E8;"> { InjectionKey } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> key</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> Symbol</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">as</span><span style="color:#B392F0;"> InjectionKey</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">provide</span><span style="color:#E1E4E8;">(key, </span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 若提供的是非字符串值会导致错误</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> foo</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> inject</span><span style="color:#E1E4E8;">(key) </span><span style="color:#6A737D;">// foo 的类型：string | undefined</span></span></code></pre></div><p>建议将注入 key 的类型放在一个单独的文件中，这样它就可以被多个组件导入。</p><p>当使用字符串注入 key 时，注入值的类型是 <code>unknown</code>，需要通过泛型参数显式声明：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> foo</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> inject</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">&gt;(</span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 类型：string | undefined</span></span></code></pre></div><p>注意注入的值仍然可以是 <code>undefined</code>，因为无法保证提供者一定会在运行时 provide 这个值。</p><p>当提供了一个默认值后，这个 <code>undefined</code> 类型就可以被移除：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> foo</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> inject</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">&gt;(</span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;bar&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 类型：string</span></span></code></pre></div><p>如果你确定该值将始终被提供，则还可以强制转换该值：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> foo</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> inject</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">as</span><span style="color:#79B8FF;"> string</span></span></code></pre></div><h2 id="typing-template-refs" tabindex="-1">为模板引用标注类型 <a class="header-anchor" href="#typing-template-refs" aria-label="Permalink to &quot;为模板引用标注类型 {#typing-template-refs}&quot;">​</a></h2><p>在 Vue 3.5 和 @vue/language-tools 2.1 (为 IDE 语言服务和 vue-tsc 提供支持) 中，在单文件组件中由 <code>useTemplateRef()</code> 创建的 ref 类型可以基于匹配的 ref attribute 所在的元素<strong>自动推断</strong>为静态类型。</p><p>在无法自动推断的情况下，仍然可以通过泛型参数将模板 ref 转换为显式类型。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> el</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> useTemplateRef</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">HTMLInputElement</span><span style="color:#E1E4E8;">&gt;(</span><span style="color:#9ECBFF;">&#39;el&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre></div><details><summary>3.5 前的用法</summary><p>模板引用需要通过一个显式指定的泛型参数和一个初始值 <code>null</code> 来创建：</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> setup</span><span style="color:#B392F0;"> lang</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;ts&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { ref, onMounted } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> el</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">HTMLInputElement</span><span style="color:#F97583;"> |</span><span style="color:#79B8FF;"> null</span><span style="color:#E1E4E8;">&gt;(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">onMounted</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  el.value?.</span><span style="color:#B392F0;">focus</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">input</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;el&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div></details><p>可以通过类似于 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/input#technical_summary" target="_blank" rel="noreferrer">MDN</a> 的页面来获取正确的 DOM 接口。</p><p>注意为了严格的类型安全，有必要在访问 <code>el.value</code> 时使用可选链或类型守卫。这是因为直到组件被挂载前，这个 ref 的值都是初始的 <code>null</code>，并且在由于 <code>v-if</code> 的行为将引用的元素卸载时也可以被设置为 <code>null</code>。</p><h2 id="typing-component-template-refs" tabindex="-1">为组件模板引用标注类型 <a class="header-anchor" href="#typing-component-template-refs" aria-label="Permalink to &quot;为组件模板引用标注类型 {#typing-component-template-refs}&quot;">​</a></h2><p>在 Vue 3.5 和 @vue/language-tools 2.1 (为 IDE 语言服务和 vue-tsc 提供支持) 中，在单文件组件中由 <code>useTemplateRef()</code> 创建的 ref 类型可以基于匹配的 ref attribute 所在的元素<strong>自动推断</strong>为静态类型。</p><p>在无法自动推断的情况下 (如非单文件组件使用或动态组件)，仍然可以通过泛型参数将模板 ref 强制转换为显式类型。</p><p>为了获取导入组件的实例类型，我们需要先通过 <code>typeof</code> 获取其类型，然后使用 TypeScript 的内置 <code>InstanceType</code> 工具提取其实例类型：</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">&lt;!-- App.vue --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> setup</span><span style="color:#B392F0;"> lang</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;ts&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { useTemplateRef } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Foo </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;./Foo.vue&#39;</span></span>
<span class="line highlighted"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Bar </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;./Bar.vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#B392F0;"> FooType</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> InstanceType</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> Foo&gt;</span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#B392F0;"> BarType</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> InstanceType</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> Bar&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> compRef</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> useTemplateRef</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">FooType</span><span style="color:#F97583;"> |</span><span style="color:#B392F0;"> BarType</span><span style="color:#E1E4E8;">&gt;(</span><span style="color:#9ECBFF;">&#39;comp&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">component</span><span style="color:#B392F0;"> :is</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;Math.random() &gt; 0.5 ? Foo : Bar&quot;</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;comp&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>如果组件的具体类型无法获得，或者你并不关心组件的具体类型，那么可以使用 <code>ComponentPublicInstance</code>。这只会包含所有组件都共享的属性，比如 <code>$el</code>。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { useTemplateRef } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#F97583;"> type</span><span style="color:#E1E4E8;"> { ComponentPublicInstance } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> child</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> useTemplateRef</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">ComponentPublicInstance</span><span style="color:#E1E4E8;">&gt;(</span><span style="color:#9ECBFF;">&#39;child&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre></div><p>如果引用的组件是一个<a href="/guide/typescript/overview.html#generic-components">泛型组件</a>，例如 <code>MyGenericModal</code>：</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">&lt;!-- MyGenericModal.vue --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> setup</span><span style="color:#B392F0;"> lang</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;ts&quot;</span><span style="color:#B392F0;"> generic</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">ContentType</span><span style="color:#F97583;"> extends</span><span style="color:#79B8FF;"> string</span><span style="color:#F97583;"> |</span><span style="color:#79B8FF;"> number</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { ref } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> content</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">ContentType</span><span style="color:#F97583;"> |</span><span style="color:#79B8FF;"> null</span><span style="color:#E1E4E8;">&gt;(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> open</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">newContent</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> ContentType</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> (content.value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newContent)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">defineExpose</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  open</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>则需要使用 <a href="https://www.npmjs.com/package/vue-component-type-helpers" target="_blank" rel="noreferrer"><code>vue-component-type-helpers</code></a> 库中的 <code>ComponentExposed</code> 来引用组件类型，因为 <code>InstanceType</code> 在这种场景下不起作用。</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">&lt;!-- App.vue --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> setup</span><span style="color:#B392F0;"> lang</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;ts&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { useTemplateRef } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> MyGenericModal </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;./MyGenericModal.vue&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#F97583;"> type</span><span style="color:#E1E4E8;"> { ComponentExposed } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue-component-type-helpers&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> modal</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> useTemplateRef</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">ComponentExposed</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> MyGenericModal&gt;&gt;(</span><span style="color:#9ECBFF;">&#39;modal&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> openModal</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  modal.value?.</span><span style="color:#B392F0;">open</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;newValue&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>请注意在 <code>@vue/language-tools</code> 2.1 以上版本中，静态模板 ref 的类型可以被自动推导，上述这些仅在极端情况下需要。</p>`,99)]))}const d=n(o,[["render",e]]);export{F as __pageData,d as default};
