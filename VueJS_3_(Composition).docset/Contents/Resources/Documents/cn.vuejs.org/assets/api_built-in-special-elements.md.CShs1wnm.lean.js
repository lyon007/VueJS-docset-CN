import{_ as n,c as a,b as l,o as p}from"./chunks/framework.B2oIMGqn.js";const d=JSON.parse('{"title":"内置特殊元素","description":"","frontmatter":{},"headers":[{"level":2,"title":"<component>","slug":"component","link":"#component","children":[]},{"level":2,"title":"<slot>","slug":"slot","link":"#slot","children":[]},{"level":2,"title":"<template>","slug":"template","link":"#template","children":[]}],"relativePath":"api/built-in-special-elements.md","filePath":"api/built-in-special-elements.md"}'),o={name:"api/built-in-special-elements.md"};function e(t,s,c,r,E,i){return p(),a("div",null,s[0]||(s[0]=[l(`<h1 id="built-in-special-elements" tabindex="-1">内置特殊元素 <a class="header-anchor" href="#built-in-special-elements" aria-label="Permalink to &quot;内置特殊元素 {#built-in-special-elements}&quot;">​</a></h1><div class="info custom-block"><p class="custom-block-title">不是组件</p><p><code>&lt;component&gt;</code>、<code>&lt;slot&gt;</code> 和 <code>&lt;template&gt;</code> 具有类似组件的特性，也是模板语法的一部分。但它们并非真正的组件，同时在模板编译期间会被编译掉。因此，它们通常在模板中用小写字母书写。</p></div><h2 id="component" tabindex="-1"><code>&lt;component&gt;</code> <a class="header-anchor" href="#component" aria-label="Permalink to &quot;\`&lt;component&gt;\` {#component}&quot;">​</a></h2><p>一个用于渲染动态组件或元素的“元组件”。</p><ul><li><p><strong>Props</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">interface</span><span style="color:#B392F0;"> DynamicComponentProps</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#FFAB70;">  is</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span><span style="color:#F97583;"> |</span><span style="color:#B392F0;"> Component</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>详细信息</strong></p><p>要渲染的实际组件由 <code>is</code> prop 决定。</p><ul><li><p>当 <code>is</code> 是字符串，它既可以是 HTML 标签名也可以是组件的注册名。</p></li><li><p>或者，<code>is</code> 也可以直接绑定到组件的定义。</p></li></ul></li><li><p><strong>示例</strong></p><p>按注册名渲染组件 (选项式 API)：</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Foo </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;./Foo.vue&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Bar </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;./Bar.vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  components: { Foo, Bar },</span></span>
<span class="line"><span style="color:#B392F0;">  data</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">    return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      view: </span><span style="color:#9ECBFF;">&#39;Foo&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">component</span><span style="color:#B392F0;"> :is</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;view&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>按定义渲染组件 (<code>&lt;script setup&gt;</code> 组合式 API)：</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> setup</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Foo </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;./Foo.vue&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Bar </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;./Bar.vue&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">component</span><span style="color:#B392F0;"> :is</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;Math.random() &gt; 0.5 ? Foo : Bar&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>渲染 HTML 元素：</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">component</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">is</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">href </span><span style="color:#F97583;">?</span><span style="color:#9ECBFF;"> &#39;a&#39;</span><span style="color:#F97583;"> :</span><span style="color:#9ECBFF;"> &#39;span&#39;&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">component</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p><a href="./built-in-components.html">内置组件</a>都可以传递给 <code>is</code>，但是如果想通过名称传递则必须先对其进行注册。举例来说：</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { Transition, TransitionGroup } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  components: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Transition,</span></span>
<span class="line"><span style="color:#E1E4E8;">    TransitionGroup</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">component</span><span style="color:#B392F0;"> :is</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;isGroup ? &#39;TransitionGroup&#39; : &#39;Transition&#39;&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    ...</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">component</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>如果将组件本身传递给 <code>is</code> 而不是其名称，则不需要注册，例如在 <code>&lt;script setup&gt;</code> 中。</p><p>如果在 <code>&lt;component&gt;</code> 标签上使用 <code>v-model</code>，模板编译器会将其扩展为 <code>modelValue</code> prop 和 <code>update:modelValue</code> 事件监听器，就像对任何其他组件一样。但是，这与原生 HTML 元素不兼容，例如 <code>&lt;input&gt;</code> 或 <code>&lt;select&gt;</code>。因此，在动态创建的原生元素上使用 <code>v-model</code> 将不起作用：</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> setup</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { ref } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> tag</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;input&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> username</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">  &lt;!-- 由于 &#39;input&#39; 是原生 HTML 元素，因此这个 v-model 不起作用 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">component</span><span style="color:#B392F0;"> :is</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;tag&quot;</span><span style="color:#B392F0;"> v-model</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;username&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>在实践中，这种极端情况并不常见，因为原生表单字段通常包裹在实际应用的组件中。如果确实需要直接使用原生元素，那么你可以手动将 <code>v-model</code> 拆分为 attribute 和事件。</p></li><li><p><strong>参考</strong><a href="/guide/essentials/component-basics.html#dynamic-components">动态组件</a></p></li></ul><h2 id="slot" tabindex="-1"><code>&lt;slot&gt;</code> <a class="header-anchor" href="#slot" aria-label="Permalink to &quot;\`&lt;slot&gt;\` {#slot}&quot;">​</a></h2><p>表示模板中的插槽内容出口。</p><ul><li><p><strong>Props</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">interface</span><span style="color:#B392F0;"> SlotProps</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * 任何传递给 &lt;slot&gt; 的 prop 都可以作为作用域插槽</span></span>
<span class="line"><span style="color:#6A737D;">   * 的参数传递</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#E1E4E8;">  [</span><span style="color:#FFAB70;">key</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> any</span></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * 保留，用于指定插槽名。</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#FFAB70;">  name</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> string</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>详细信息</strong></p><p><code>&lt;slot&gt;</code> 元素可以使用 <code>name</code> attribute 来指定插槽名。当没有指定 <code>name</code> 时，将会渲染默认插槽。传递给插槽元素的附加 attributes 将作为插槽 props，传递给父级中定义的作用域插槽。</p><p>元素本身将被其所匹配的插槽内容替换。</p><p>Vue 模板里的 <code>&lt;slot&gt;</code> 元素会被编译到 JavaScript，因此不要与<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/slot" target="_blank" rel="noreferrer">原生 <code>&lt;slot&gt;</code> 元素</a>进行混淆。</p></li><li><p><strong>参考</strong><a href="/guide/components/slots.html">组件 - 插槽</a></p></li></ul><h2 id="template" tabindex="-1"><code>&lt;template&gt;</code> <a class="header-anchor" href="#template" aria-label="Permalink to &quot;\`&lt;template&gt;\` {#template}&quot;">​</a></h2><p>当我们想要使用内置指令而不在 DOM 中渲染元素时，<code>&lt;template&gt;</code> 标签可以作为占位符使用。</p><ul><li><p><strong>详细信息</strong></p><p>对 <code>&lt;template&gt;</code> 的特殊处理只有在它与以下任一指令一起使用时才会被触发：</p><ul><li><code>v-if</code>、<code>v-else-if</code> 或 <code>v-else</code></li><li><code>v-for</code></li><li><code>v-slot</code></li></ul><p>如果这些指令都不存在，那么它将被渲染成一个<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template" target="_blank" rel="noreferrer">原生的 <code>&lt;template&gt;</code> 元素</a>。</p><p>带有 <code>v-for</code> 的 <code>&lt;template&gt;</code> 也可以有一个 <a href="/api/built-in-special-attributes.html#key"><code>key</code> 属性</a>。所有其他的属性和指令都将被丢弃，因为没有相应的元素，它们就没有意义。</p><p>单文件组件使用<a href="/api/sfc-spec.html#language-blocks">顶层的 <code>&lt;template&gt;</code> 标签</a>来包裹整个模板。这种用法与上面描述的 <code>&lt;template&gt;</code> 使用方式是有区别的。该顶层标签不是模板本身的一部分，不支持指令等模板语法。</p></li><li><p><strong>参考</strong></p><ul><li><a href="/guide/essentials/conditional.html#v-if-on-template">指南 - <code>&lt;template&gt;</code> 上的 <code>v-if</code></a></li><li><a href="/guide/essentials/list.html#v-for-on-template">指南 - <code>&lt;template&gt;</code> 上的 <code>v-for</code></a></li><li><a href="/guide/components/slots.html#named-slots">指南 - 具名插槽</a></li></ul></li></ul>`,11)]))}const u=n(o,[["render",e]]);export{d as __pageData,u as default};
