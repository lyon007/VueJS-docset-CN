import{_ as n,c as a,b as l,o as e}from"./chunks/framework.B2oIMGqn.js";const m=JSON.parse('{"title":"Vue 与 Web Components","description":"","frontmatter":{},"headers":[{"level":2,"title":"在 Vue 中使用自定义元素","slug":"using-custom-elements-in-vue","link":"#using-custom-elements-in-vue","children":[{"level":3,"title":"跳过组件解析","slug":"skipping-component-resolution","link":"#skipping-component-resolution","children":[]},{"level":3,"title":"传递 DOM 属性","slug":"passing-dom-properties","link":"#passing-dom-properties","children":[]}]},{"level":2,"title":"使用 Vue 构建自定义元素","slug":"building-custom-elements-with-vue","link":"#building-custom-elements-with-vue","children":[{"level":3,"title":"defineCustomElement","slug":"definecustomelement","link":"#definecustomelement","children":[]},{"level":3,"title":"将单文件组件编译为自定义元素","slug":"sfc-as-custom-element","link":"#sfc-as-custom-element","children":[]},{"level":3,"title":"基于 Vue 构建自定义元素库","slug":"tips-for-a-vue-custom-elements-library","link":"#tips-for-a-vue-custom-elements-library","children":[]},{"level":3,"title":"基于 Vue 的 Web Components 和 TypeScript","slug":"web-components-and-typescript","link":"#web-components-and-typescript","children":[]}]},{"level":2,"title":"非 Vue Web Components 和 TypeScript","slug":"non-vue-web-components-and-typescript","link":"#non-vue-web-components-and-typescript","children":[]},{"level":2,"title":"Web Components vs. Vue Components","slug":"web-components-vs-vue-components","link":"#web-components-vs-vue-components","children":[]}],"relativePath":"guide/extras/web-components.md","filePath":"guide/extras/web-components.md"}'),p={name:"guide/extras/web-components.md"};function o(t,s,c,r,E,i){return e(),a("div",null,s[0]||(s[0]=[l(`<h1 id="vue-and-web-components" tabindex="-1">Vue 与 Web Components <a class="header-anchor" href="#vue-and-web-components" aria-label="Permalink to &quot;Vue 与 Web Components {#vue-and-web-components}&quot;">​</a></h1><p><a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components" target="_blank" rel="noreferrer">Web Components</a> 是一组 web 原生 API 的统称，允许开发者创建可复用的自定义元素 (custom elements)。</p><p>我们认为 Vue 和 Web Components 是互补的技术。Vue 为使用和创建自定义元素提供了出色的支持。无论你是将自定义元素集成到现有的 Vue 应用中，还是使用 Vue 来构建和分发自定义元素都很方便。</p><h2 id="using-custom-elements-in-vue" tabindex="-1">在 Vue 中使用自定义元素 <a class="header-anchor" href="#using-custom-elements-in-vue" aria-label="Permalink to &quot;在 Vue 中使用自定义元素 {#using-custom-elements-in-vue}&quot;">​</a></h2><p>Vue <a href="https://custom-elements-everywhere.com/libraries/vue/results/results.html" target="_blank" rel="noreferrer">在 Custom Elements Everywhere 测试中取得了 100% 的分数</a>。在 Vue 应用中使用自定义元素基本上与使用原生 HTML 元素的效果相同，但需要留意以下几点：</p><h3 id="skipping-component-resolution" tabindex="-1">跳过组件解析 <a class="header-anchor" href="#skipping-component-resolution" aria-label="Permalink to &quot;跳过组件解析 {#skipping-component-resolution}&quot;">​</a></h3><p>默认情况下，Vue 会将任何非原生的 HTML 标签优先当作 Vue 组件处理，而将“渲染一个自定义元素”作为后备选项。这会在开发时导致 Vue 抛出一个“解析组件失败”的警告。要让 Vue 知晓特定元素应该被视为自定义元素并跳过组件解析，我们可以指定 <a href="/api/application.html#app-config-compileroptions"><code>compilerOptions.isCustomElement</code> 这个选项</a>。</p><p>如果在开发 Vue 应用时进行了构建配置，则应该在构建配置中传递该选项，因为它是一个编译时选项。</p><h4 id="example-in-browser-config" tabindex="-1">浏览器内编译时的示例配置 <a class="header-anchor" href="#example-in-browser-config" aria-label="Permalink to &quot;浏览器内编译时的示例配置 {#example-in-browser-config}&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 仅在浏览器内编译时才会工作</span></span>
<span class="line"><span style="color:#6A737D;">// 如果使用了构建工具，请看下面的配置示例</span></span>
<span class="line"><span style="color:#E1E4E8;">app.config.compilerOptions.</span><span style="color:#B392F0;">isCustomElement</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">tag</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> tag.</span><span style="color:#B392F0;">includes</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;-&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre></div><h4 id="example-vite-config" tabindex="-1">Vite 示例配置 <a class="header-anchor" href="#example-vite-config" aria-label="Permalink to &quot;Vite 示例配置 {#example-vite-config}&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// vite.config.js</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> vue </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;@vitejs/plugin-vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  plugins: [</span></span>
<span class="line"><span style="color:#B392F0;">    vue</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">      template: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        compilerOptions: {</span></span>
<span class="line"><span style="color:#6A737D;">          // 将所有带短横线的标签名都视为自定义元素</span></span>
<span class="line"><span style="color:#B392F0;">          isCustomElement</span><span style="color:#E1E4E8;">: (</span><span style="color:#FFAB70;">tag</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> tag.</span><span style="color:#B392F0;">includes</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;-&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">  ]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><h4 id="example-vue-cli-config" tabindex="-1">Vue CLI 示例配置 <a class="header-anchor" href="#example-vue-cli-config" aria-label="Permalink to &quot;Vue CLI 示例配置 {#example-vue-cli-config}&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// vue.config.js</span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  chainWebpack</span><span style="color:#E1E4E8;">: (</span><span style="color:#FFAB70;">config</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    config.module</span></span>
<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">rule</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;vue&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;vue-loader&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">tap</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">options</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> ({</span></span>
<span class="line"><span style="color:#F97583;">        ...</span><span style="color:#E1E4E8;">options,</span></span>
<span class="line"><span style="color:#E1E4E8;">        compilerOptions: {</span></span>
<span class="line"><span style="color:#6A737D;">          // 将所有以 ion- 开头的标签都视为自定义元素</span></span>
<span class="line"><span style="color:#B392F0;">          isCustomElement</span><span style="color:#E1E4E8;">: (</span><span style="color:#FFAB70;">tag</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> tag.</span><span style="color:#B392F0;">startsWith</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;ion-&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }))</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><h3 id="passing-dom-properties" tabindex="-1">传递 DOM 属性 <a class="header-anchor" href="#passing-dom-properties" aria-label="Permalink to &quot;传递 DOM 属性 {#passing-dom-properties}&quot;">​</a></h3><p>由于 DOM attribute 只能为字符串值，因此我们只能使用 DOM 对象的属性来传递复杂数据。当为自定义元素设置 props 时，Vue 3 将通过 <code>in</code> 操作符自动检查该属性是否已经存在于 DOM 对象上，并且在这个 key 存在时，更倾向于将值设置为一个 DOM 对象的属性。这意味着，在大多数情况下，如果自定义元素遵循<a href="https://web.dev/custom-elements-best-practices/" target="_blank" rel="noreferrer">推荐的最佳实践</a>，你就不需要考虑这个问题。</p><p>然而，也会有一些特别的情况：必须将数据以一个 DOM 对象属性的方式传递，但该自定义元素无法正确地定义/反射这个属性 (因为 <code>in</code> 检查失败)。在这种情况下，你可以强制使用一个 <code>v-bind</code> 绑定、通过 <code>.prop</code> 修饰符来设置该 DOM 对象的属性：</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">my-element</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">user</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">prop</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">{ name: </span><span style="color:#9ECBFF;">&#39;jack&#39;</span><span style="color:#E1E4E8;"> }</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">my-element</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- 等价简写 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">my-element</span><span style="color:#E1E4E8;"> .</span><span style="color:#B392F0;">user</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;{ name: &#39;jack&#39; }&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">my-element</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="building-custom-elements-with-vue" tabindex="-1">使用 Vue 构建自定义元素 <a class="header-anchor" href="#building-custom-elements-with-vue" aria-label="Permalink to &quot;使用 Vue 构建自定义元素 {#building-custom-elements-with-vue}&quot;">​</a></h2><p>自定义元素的主要好处是，它们可以在使用任何框架，甚至是在不使用框架的场景下使用。当你面向的最终用户可能使用了不同的前端技术栈，或是当你希望将最终的应用与它使用的组件实现细节解耦时，它们会是理想的选择。</p><h3 id="definecustomelement" tabindex="-1">defineCustomElement <a class="header-anchor" href="#definecustomelement" aria-label="Permalink to &quot;defineCustomElement {#definecustomelement}&quot;">​</a></h3><p>Vue 提供了一个和定义一般 Vue 组件几乎完全一致的 <a href="/api/custom-elements.html#definecustomelement"><code>defineCustomElement</code></a> 方法来支持创建自定义元素。这个方法接收的参数和 <a href="/api/general.html#definecomponent"><code>defineComponent</code></a> 完全相同。但它会返回一个继承自 <code>HTMLElement</code> 的自定义元素构造器：</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">my-vue-element</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">my-vue-element</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { defineCustomElement } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> MyVueElement</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> defineCustomElement</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#6A737D;">  // 这里是同平常一样的 Vue 组件选项</span></span>
<span class="line"><span style="color:#E1E4E8;">  props: {},</span></span>
<span class="line"><span style="color:#E1E4E8;">  emits: {},</span></span>
<span class="line"><span style="color:#E1E4E8;">  template: </span><span style="color:#9ECBFF;">\`...\`</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  // defineCustomElement 特有的：注入进 shadow root 的 CSS</span></span>
<span class="line"><span style="color:#E1E4E8;">  styles: [</span><span style="color:#9ECBFF;">\`/* inlined css */\`</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 注册自定义元素</span></span>
<span class="line"><span style="color:#6A737D;">// 注册之后，所有此页面中的 \`&lt;my-vue-element&gt;\` 标签</span></span>
<span class="line"><span style="color:#6A737D;">// 都会被升级</span></span>
<span class="line"><span style="color:#E1E4E8;">customElements.</span><span style="color:#B392F0;">define</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;my-vue-element&#39;</span><span style="color:#E1E4E8;">, MyVueElement)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 你也可以编程式地实例化元素：</span></span>
<span class="line"><span style="color:#6A737D;">// （必须在注册之后）</span></span>
<span class="line"><span style="color:#E1E4E8;">document.body.</span><span style="color:#B392F0;">appendChild</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#F97583;">  new</span><span style="color:#B392F0;"> MyVueElement</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#6A737D;">    // 初始化 props（可选）</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre></div><h4 id="lifecycle" tabindex="-1">生命周期 <a class="header-anchor" href="#lifecycle" aria-label="Permalink to &quot;生命周期 {#lifecycle}&quot;">​</a></h4><ul><li><p>当该元素的 <a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements#using_the_lifecycle_callbacks" target="_blank" rel="noreferrer"><code>connectedCallback</code></a> 初次调用时，一个 Vue 自定义元素会在内部挂载一个 Vue 组件实例到它的 shadow root 上。</p></li><li><p>当此元素的 <code>disconnectedCallback</code> 被调用时，Vue 会在一个微任务后检查元素是否还留在文档中。</p><ul><li><p>如果元素仍然在文档中，那么说明它是一次移动操作，组件实例将被保留；</p></li><li><p>如果该元素不再存在于文档中，那么说明这是一次移除操作，组件实例将被销毁。</p></li></ul></li></ul><h4 id="props" tabindex="-1">Props <a class="header-anchor" href="#props" aria-label="Permalink to &quot;Props {#props}&quot;">​</a></h4><ul><li><p>所有使用 <code>props</code> 选项声明了的 props 都会作为属性定义在该自定义元素上。Vue 会自动地、恰当地处理其作为 attribute 还是属性的反射。</p><ul><li><p>attribute 总是根据需要反射为相应的属性类型。</p></li><li><p>基础类型的属性值 (<code>string</code>，<code>boolean</code> 或 <code>number</code>) 会被反射为 attribute。</p></li></ul></li><li><p>当它们被设为 attribute 时 (永远是字符串)，Vue 也会自动将以 <code>Boolean</code> 或 <code>Number</code> 类型声明的 prop 转换为所期望的类型。比如下面这样的 props 声明：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">props</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#B392F0;">  selected</span><span style="color:#E1E4E8;">: Boolean,</span></span>
<span class="line"><span style="color:#B392F0;">  index</span><span style="color:#E1E4E8;">: Number</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>并以下面这样的方式使用自定义元素：</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">my-element</span><span style="color:#B392F0;"> selected</span><span style="color:#B392F0;"> index</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;1&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">my-element</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>在组件中，<code>selected</code> 会被转换为 <code>true</code> (boolean 类型值) 而 <code>index</code> 会被转换为 <code>1</code> (number 类型值)。</p></li></ul><h4 id="events" tabindex="-1">事件 <a class="header-anchor" href="#events" aria-label="Permalink to &quot;事件 {#events}&quot;">​</a></h4><p>通过 <code>this.$emit</code> 或者 setup 中的 <code>emit</code> 触发的事件都会通过以 <a href="https://developer.mozilla.org/en-US/docs/Web/Events/Creating_and_triggering_events#adding_custom_data_%E2%80%93_customevent" target="_blank" rel="noreferrer">CustomEvents</a> 的形式从自定义元素上派发。额外的事件参数 (payload) 将会被暴露为 CustomEvent 对象上的一个 <code>detail</code> 数组。</p><h4 id="slots" tabindex="-1">插槽 <a class="header-anchor" href="#slots" aria-label="Permalink to &quot;插槽 {#slots}&quot;">​</a></h4><p>在一个组件中，插槽将会照常使用 <code>&lt;slot/&gt;</code> 渲染。然而，当使用最终的元素时，它只接受<a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_templates_and_slots" target="_blank" rel="noreferrer">原生插槽的语法</a>：</p><ul><li><p>不支持<a href="/guide/components/slots.html#scoped-slots">作用域插槽</a>。</p></li><li><p>当传递具名插槽时，应使用 <code>slot</code> attribute 而不是 <code>v-slot</code> 指令：</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">my-element</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">div</span><span style="color:#B392F0;"> slot</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;named&quot;</span><span style="color:#E1E4E8;">&gt;hello&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">my-element</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div></li></ul><h4 id="provide-inject" tabindex="-1">依赖注入 <a class="header-anchor" href="#provide-inject" aria-label="Permalink to &quot;依赖注入 {#provide-inject}&quot;">​</a></h4><p><a href="/guide/components/provide-inject.html#provide-inject">Provide / Inject API</a> 和<a href="/api/composition-api-dependency-injection.html#provide">相应的组合式 API</a> 在 Vue 定义的自定义元素中都可以正常工作。但是请注意，依赖关系<strong>只在自定义元素之间</strong>起作用。例如一个 Vue 定义的自定义元素就无法注入一个由常规 Vue 组件所提供的属性。</p><h4 id="app-level-config" tabindex="-1">应用级配置 <sup class="vt-badge" data-text="3.5+"></sup> <a class="header-anchor" href="#app-level-config" aria-label="Permalink to &quot;应用级配置 &lt;sup class=&quot;vt-badge&quot; data-text=&quot;3.5+&quot; /&gt; {#app-level-config}&quot;">​</a></h4><p>你可以使用 <code>configureApp</code> 选项来配置 Vue 自定义元素的应用实例：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">defineCustomElement</span><span style="color:#E1E4E8;">(MyComponent, {</span></span>
<span class="line"><span style="color:#B392F0;">  configureApp</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">app</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    app.config.</span><span style="color:#B392F0;">errorHandler</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">      /* ... */</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre></div><h3 id="sfc-as-custom-element" tabindex="-1">将单文件组件编译为自定义元素 <a class="header-anchor" href="#sfc-as-custom-element" aria-label="Permalink to &quot;将单文件组件编译为自定义元素 {#sfc-as-custom-element}&quot;">​</a></h3><p><code>defineCustomElement</code> 也可以搭配 Vue 单文件组件 (SFC) 使用。但是，根据默认的工具链配置，SFC 中的 <code>&lt;style&gt;</code> 在生产环境构建时仍然会被抽取和合并到一个单独的 CSS 文件中。当正在使用单文件组件编写自定义元素时，通常需要改为注入 <code>&lt;style&gt;</code> 标签到自定义元素的 shadow root 上。</p><p>官方的单文件组件工具链支持以“自定义元素模式”导入单文件组件 (需要 <code>@vitejs/plugin-vue@^1.4.0</code> 或 <code>vue-loader@^16.5.0</code>)。一个以自定义元素模式加载的单文件组件将会内联其 <code>&lt;style&gt;</code> 标签为 CSS 字符串，并将其暴露为组件的 <code>styles</code> 选项。这会被 <code>defineCustomElement</code> 提取使用，并在初始化时注入到元素的 shadow root 上。</p><p>要开启这个模式，只需要将你的组件文件以 <code>.ce.vue</code> 结尾即可：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { defineCustomElement } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Example </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;./Example.ce.vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(Example.styles) </span><span style="color:#6A737D;">// [&quot;/* 内联 css */&quot;]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 转换为自定义元素构造器</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> ExampleElement</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> defineCustomElement</span><span style="color:#E1E4E8;">(Example)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 注册</span></span>
<span class="line"><span style="color:#E1E4E8;">customElements.</span><span style="color:#B392F0;">define</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;my-example&#39;</span><span style="color:#E1E4E8;">, ExampleElement)</span></span></code></pre></div><p>如果你想要自定义如何判断是否将文件作为自定义元素导入 (例如将所有的单文件组件都视为用作自定义元素)，你可以通过给构建插件传递相应插件的 <code>customElement</code> 选项来实现：</p><ul><li><a href="https://github.com/vitejs/vite-plugin-vue/tree/main/packages/plugin-vue#using-vue-sfcs-as-custom-elements" target="_blank" rel="noreferrer">@vitejs/plugin-vue</a></li><li><a href="https://github.com/vuejs/vue-loader/tree/next#v16-only-options" target="_blank" rel="noreferrer">vue-loader</a></li></ul><h3 id="tips-for-a-vue-custom-elements-library" tabindex="-1">基于 Vue 构建自定义元素库 <a class="header-anchor" href="#tips-for-a-vue-custom-elements-library" aria-label="Permalink to &quot;基于 Vue 构建自定义元素库 {#tips-for-a-vue-custom-elements-library}&quot;">​</a></h3><p>当使用 Vue 构建自定义元素时，该元素将依赖于 Vue 的运行时。这会有大约 16kb 的基本打包大小，并视功能的使用情况而增长。这意味着如果只编写一个自定义元素，那么使用 Vue 并不是理想的选择。你可能想要使用原生 JavaScript、<a href="https://github.com/vuejs/petite-vue" target="_blank" rel="noreferrer">petite-vue</a>，或其他框架以追求更小的运行时体积。但是，如果你需要编写的是一组具有复杂逻辑的自定义元素，那么这个基本体积是非常合理的，因为 Vue 允许用更少的代码编写每个组件。在一起发布的元素越多，收益就会越高。</p><p>如果自定义元素将在同样使用 Vue 的应用中使用，那么你可以选择将构建包中的 Vue 外部化 (externalize)，这样这些自定义元素将与宿主应用使用同一份 Vue。</p><p>建议按元素分别导出构造函数，以便用户可以灵活地按需导入它们，并使用期望的标签名称注册它们。你还可以导出一个函数来方便用户自动注册所有元素。下面是一个 Vue 自定义元素库的入口文件示例：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// elements.js</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { defineCustomElement } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Foo </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;./MyFoo.ce.vue&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Bar </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;./MyBar.ce.vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> MyFoo</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> defineCustomElement</span><span style="color:#E1E4E8;">(Foo)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> MyBar</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> defineCustomElement</span><span style="color:#E1E4E8;">(Bar)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 分别导出元素</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> { MyFoo, MyBar }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> function</span><span style="color:#B392F0;"> register</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  customElements.</span><span style="color:#B392F0;">define</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;my-foo&#39;</span><span style="color:#E1E4E8;">, MyFoo)</span></span>
<span class="line"><span style="color:#E1E4E8;">  customElements.</span><span style="color:#B392F0;">define</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;my-bar&#39;</span><span style="color:#E1E4E8;">, MyBar)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>消费者可以使用 Vue 文件中的元素：</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> setup</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { register } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;path/to/elements.js&#39;</span></span>
<span class="line"><span style="color:#B392F0;">register</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">my-foo</span><span style="color:#B392F0;"> ...</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">my-bar</span><span style="color:#B392F0;"> ...</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">my-bar</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">my-foo</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>或在任何其他框架中，如 JSX，使用自定义名称：</p><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { MyFoo, MyBar } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;path/to/elements.js&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">customElements.</span><span style="color:#B392F0;">define</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;some-foo&#39;</span><span style="color:#E1E4E8;">, MyFoo)</span></span>
<span class="line"><span style="color:#E1E4E8;">customElements.</span><span style="color:#B392F0;">define</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;some-bar&#39;</span><span style="color:#E1E4E8;">, MyBar)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> function</span><span style="color:#B392F0;"> MyComponent</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">  return</span><span style="color:#E1E4E8;"> &lt;&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#79B8FF;">some-foo</span><span style="color:#FDAEB7;font-style:italic;"> ...</span><span style="color:#E1E4E8;"> &gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#79B8FF;">some-bar</span><span style="color:#FDAEB7;font-style:italic;"> ...</span><span style="color:#E1E4E8;"> &gt;&lt;/</span><span style="color:#79B8FF;">some-bar</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#79B8FF;">some-foo</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><h3 id="web-components-and-typescript" tabindex="-1">基于 Vue 的 Web Components 和 TypeScript <a class="header-anchor" href="#web-components-and-typescript" aria-label="Permalink to &quot;基于 Vue 的 Web Components 和 TypeScript {#web-components-and-typescript}&quot;">​</a></h3><p>在编写 Vue SFC 模板时，你可能想要为你的 Vue 组件添加<a href="/guide/scaling-up/tooling.html#typescript">类型检查</a>，包括那些被定义为自定义元素的组件。</p><p>自定义元素是使用原生 API 全局注册的，所以默认情况下，当在 Vue 模板中使用时，它们不会有类型推断。为了给注册为自定义元素的 Vue 组件提供类型支持，我们可以通过扩充 <a href="https://github.com/vuejs/language-tools/blob/master/packages/vscode-vue/README.md#usage" target="_blank" rel="noreferrer"><code>GlobalComponents</code> 接口</a>来注册全局组件类型定义，以便在 Vue 模板中进行类型检查 (JSX 用户可以改为扩充 <a href="https://www.typescriptlang.org/docs/handbook/jsx.html#intrinsic-elements" target="_blank" rel="noreferrer"><code>JSX.IntrinsicElements</code></a> 类型，此处省略这部分内容)。</p><p>下面介绍如何使用 Vue 创建的自定义元素定义类型的方法：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { defineCustomElement } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 导入 Vue 组件。</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> SomeComponent </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;./src/components/SomeComponent.ce.vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 将 Vue 组件转为自定义元素类。</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> const</span><span style="color:#79B8FF;"> SomeElement</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> defineCustomElement</span><span style="color:#E1E4E8;">(SomeComponent)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 记得在浏览器中注册元素类。</span></span>
<span class="line"><span style="color:#E1E4E8;">customElements.</span><span style="color:#B392F0;">define</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;some-element&#39;</span><span style="color:#E1E4E8;">, SomeElement)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 将新元素类型添加到 Vue 的 GlobalComponents 类型中。</span></span>
<span class="line"><span style="color:#F97583;">declare</span><span style="color:#F97583;"> module</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">  interface</span><span style="color:#B392F0;"> GlobalComponents</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    // 请务必在此处输入 Vue 组件类型</span></span>
<span class="line"><span style="color:#6A737D;">    // (SomeComponent，*而不是* SomeElement)。</span></span>
<span class="line"><span style="color:#6A737D;">    // 自定义元素的名称中需要连字符，</span></span>
<span class="line"><span style="color:#6A737D;">    // 因此请在此处使用连字符元素名称。</span></span>
<span class="line"><span style="color:#9ECBFF;">    &#39;some-element&#39;</span><span style="color:#F97583;">:</span><span style="color:#F97583;"> typeof</span><span style="color:#E1E4E8;"> SomeComponent</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><h2 id="non-vue-web-components-and-typescript" tabindex="-1">非 Vue Web Components 和 TypeScript <a class="header-anchor" href="#non-vue-web-components-and-typescript" aria-label="Permalink to &quot;非 Vue Web Components 和 TypeScript {#non-vue-web-components-and-typescript}&quot;">​</a></h2><p>以下是在非 Vue 构建的自定义元素的 SFC 模板中启用类型检查的推荐方法。</p><div class="tip custom-block"><p class="custom-block-title">注意</p><p>这种方法是实现该功能的一种可能方式，但具体实现可能因创建自定义元素所用的框架而异。</p></div><p>假设我们有一个自定义元素，其中定义了一些 JS 属性和事件，并且它发布在名为 <code>some-lib</code> 的库中：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// file: some-lib/src/SomeElement.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 定义一个带有类型化 JS 属性的类</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> SomeElement</span><span style="color:#F97583;"> extends</span><span style="color:#B392F0;"> HTMLElement</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#FFAB70;">  foo</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> number</span><span style="color:#F97583;"> =</span><span style="color:#79B8FF;"> 123</span></span>
<span class="line"><span style="color:#FFAB70;">  bar</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span><span style="color:#F97583;"> =</span><span style="color:#9ECBFF;"> &#39;blah&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFAB70;">  lorem</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> boolean</span><span style="color:#F97583;"> =</span><span style="color:#79B8FF;"> false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  // 这个方法不应该暴露给模板类型</span></span>
<span class="line"><span style="color:#B392F0;">  someMethod</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#6A737D;">    /* ... */</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  // ... 省略实现细节 ...</span></span>
<span class="line"><span style="color:#6A737D;">  // ... 假设元素会分派名为 &quot;apple-fell&quot; 的事件 ...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">customElements.</span><span style="color:#B392F0;">define</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;some-element&#39;</span><span style="color:#E1E4E8;">, SomeElement)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 这是一个包含 SomeElement 属性列表的类型定义</span></span>
<span class="line"><span style="color:#6A737D;">// 这些属性将用于框架模板 (如 Vue SFC 模板 的类型检查</span></span>
<span class="line"><span style="color:#6A737D;">// 其他属性将不会暴露</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> type</span><span style="color:#B392F0;"> SomeElementAttributes</span><span style="color:#F97583;"> =</span><span style="color:#9ECBFF;"> &#39;foo&#39;</span><span style="color:#F97583;"> |</span><span style="color:#9ECBFF;"> &#39;bar&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 定义 SomeElement 分派的事件类型</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> type</span><span style="color:#B392F0;"> SomeElementEvents</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#9ECBFF;">  &#39;apple-fell&#39;</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> AppleFellEvent</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> class</span><span style="color:#B392F0;"> AppleFellEvent</span><span style="color:#F97583;"> extends</span><span style="color:#B392F0;"> Event</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">  /* ... 省略细节 ... */</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>实现细节已省略，重点是我们为两个东西提供了类型定义：prop 类型和事件类型。</p><p>让我们创建一个类型工具，以便在 Vue 中轻松注册自定义元素类型定义：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// file: some-lib/src/DefineCustomElement.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 我们可以为每个需要定义的元素重复使用这个类型助手</span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#B392F0;"> DefineCustomElement</span><span style="color:#E1E4E8;">&lt;</span></span>
<span class="line"><span style="color:#B392F0;">  ElementType</span><span style="color:#F97583;"> extends</span><span style="color:#B392F0;"> HTMLElement</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#B392F0;">  Events</span><span style="color:#F97583;"> extends</span><span style="color:#B392F0;"> EventMap</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {},</span></span>
<span class="line"><span style="color:#B392F0;">  SelectedAttributes</span><span style="color:#F97583;"> extends</span><span style="color:#F97583;"> keyof</span><span style="color:#B392F0;"> ElementType</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> keyof</span><span style="color:#B392F0;"> ElementType</span></span>
<span class="line"><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> ElementType</span><span style="color:#F97583;"> &amp;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  // 使用 $props 定义暴露给模板类型检查的属性</span></span>
<span class="line"><span style="color:#6A737D;">  // Vue 特别从 \`$props\` 类型读取属性定义</span></span>
<span class="line"><span style="color:#6A737D;">  // 请注意，我们将元素的属性与全局 HTML 属性和 Vue 的特殊属性结合在一起</span></span>
<span class="line"><span style="color:#6A737D;">  /** </span><span style="color:#F97583;">@deprecated</span><span style="color:#6A737D;"> 不要在自定义元素引用上使用 $props 属性，</span></span>
<span class="line"><span style="color:#6A737D;">    这仅用于模板属性类型检查 */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFAB70;">  $props</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> HTMLAttributes</span><span style="color:#F97583;"> &amp;</span></span>
<span class="line"><span style="color:#B392F0;">    Partial</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Pick</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">ElementType</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">SelectedAttributes</span><span style="color:#E1E4E8;">&gt;&gt; </span><span style="color:#F97583;">&amp;</span></span>
<span class="line"><span style="color:#B392F0;">    PublicProps</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  // 使用 $emit 专门定义事件类型</span></span>
<span class="line"><span style="color:#6A737D;">  // Vue 特别从 \`$emit\` 类型读取事件类型</span></span>
<span class="line"><span style="color:#6A737D;">  // 请注意，\`$emit\` 期望我们将 \`Events\` 映射到特定格式</span></span>
<span class="line"><span style="color:#6A737D;">  /** </span><span style="color:#F97583;">@deprecated</span><span style="color:#6A737D;"> 不要在自定义元素引用上使用 $emit 属性，</span></span>
<span class="line"><span style="color:#6A737D;">    这仅用于模板属性类型检查 */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFAB70;">  $emit</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> VueEmit</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Events</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#B392F0;"> EventMap</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  [</span><span style="color:#FFAB70;">event</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Event</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 这将 EventMap 映射到 Vue 的 $emit 类型期望的格式</span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#B392F0;"> VueEmit</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#F97583;"> extends</span><span style="color:#B392F0;"> EventMap</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> EmitFn</span><span style="color:#E1E4E8;">&lt;{</span></span>
<span class="line"><span style="color:#E1E4E8;">  [</span><span style="color:#B392F0;">K</span><span style="color:#F97583;"> in</span><span style="color:#F97583;"> keyof</span><span style="color:#B392F0;"> T</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">event</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> T</span><span style="color:#E1E4E8;">[</span><span style="color:#B392F0;">K</span><span style="color:#E1E4E8;">]) </span><span style="color:#F97583;">=&gt;</span><span style="color:#79B8FF;"> void</span></span>
<span class="line"><span style="color:#E1E4E8;">}&gt;</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">注意</p><p>我们将 <code>$props</code> 和 <code>$emit</code> 标记为已弃用，以便当我们获取自定义元素的 <code>ref</code> 时，我们不会被诱导使用这些属性，因为这些属性在自定义元素的情况下仅用于类型检查。这些属性实际上并不存在于自定义元素实例上。</p></div><p>使用类型助手，我们现在可以选择在 Vue 模板中应暴露的 JS 属性进行类型检查：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// file: some-lib/src/SomeElement.vue.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  SomeElement,</span></span>
<span class="line"><span style="color:#E1E4E8;">  SomeElementAttributes,</span></span>
<span class="line"><span style="color:#E1E4E8;">  SomeElementEvents</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;./SomeElement.js&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#F97583;"> type</span><span style="color:#E1E4E8;"> { Component } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#F97583;"> type</span><span style="color:#E1E4E8;"> { DefineCustomElement } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;./DefineCustomElement&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 将新元素类型添加到 Vue 的 GlobalComponents 类型中</span></span>
<span class="line"><span style="color:#F97583;">declare</span><span style="color:#F97583;"> module</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">  interface</span><span style="color:#B392F0;"> GlobalComponents</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#9ECBFF;">    &#39;some-element&#39;</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> DefineCustomElement</span><span style="color:#E1E4E8;">&lt;</span></span>
<span class="line"><span style="color:#B392F0;">      SomeElement</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#B392F0;">      SomeElementAttributes</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#B392F0;">      SomeElementEvents</span></span>
<span class="line"><span style="color:#E1E4E8;">    &gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>假设 some-lib 将其 TypeScript 源文件构建到 dist/ 文件夹中。some-lib 的用户可以像这样导入 SomeElement 并在 Vue SFC 中使用它：</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> setup</span><span style="color:#B392F0;"> lang</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;ts&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">// 这将创建并在浏览器中注册元素</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#9ECBFF;"> &#39;some-lib/dist/SomeElement.js&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 使用 TypeScript 和 Vue 的用户应另外导入 Vue 特定的类型定义</span></span>
<span class="line"><span style="color:#6A737D;">//(使用其他框架的用户可以导入其他框架特定的类型定义)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#F97583;"> type</span><span style="color:#E1E4E8;"> {} </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;some-lib/dist/SomeElement.vue.js&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { useTemplateRef, onMounted } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> el</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> useTemplateRef</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;el&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">onMounted</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    el.value</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">.foo,</span></span>
<span class="line"><span style="color:#E1E4E8;">    el.value</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">.bar,</span></span>
<span class="line"><span style="color:#E1E4E8;">    el.value</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">.lorem,</span></span>
<span class="line"><span style="color:#E1E4E8;">    el.value</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">someMethod</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  // 不要使用这些属性，它们是 \`undefined\` </span></span>
<span class="line"><span style="color:#6A737D;">  // IDE 会将它们显示为删除线</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  el.$props</span></span>
<span class="line"><span style="color:#E1E4E8;">  el.$emit</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">  &lt;!-- 现在我们可以使用这个元素，并进行类型检查： --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">some-element</span></span>
<span class="line"><span style="color:#B392F0;">    ref</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;el&quot;</span></span>
<span class="line"><span style="color:#B392F0;">    :foo</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;456&quot;</span></span>
<span class="line"><span style="color:#B392F0;">    :blah</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;&#39;hello&#39;&quot;</span></span>
<span class="line"><span style="color:#B392F0;">    @apple-fell</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#9ECBFF;">      (event) =&gt; {</span></span>
<span class="line"><span style="color:#9ECBFF;">        // 这里 \`event\` 的类型被推断为 \`AppleFellEvent\`</span></span>
<span class="line"><span style="color:#9ECBFF;">      }</span></span>
<span class="line"><span style="color:#9ECBFF;">    &quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &gt;&lt;/</span><span style="color:#85E89D;">some-element</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>如果一个元素没有类型定义，可以通过更手动的方式定义属性和事件的类型：</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> setup</span><span style="color:#B392F0;"> lang</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;ts&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">// 假设 \`some-lib\` 是纯 JavaScript，没有类型定义，并且 TypeScript 无法推断类型：</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { SomeElement } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;some-lib&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 我们将使用之前相同的类型助手</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { DefineCustomElement } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;./DefineCustomElement&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#B392F0;"> SomeElementProps</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> { </span><span style="color:#FFAB70;">foo</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> number</span><span style="color:#E1E4E8;">; </span><span style="color:#FFAB70;">bar</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#B392F0;"> SomeElementEvents</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> { </span><span style="color:#9ECBFF;">&#39;apple-fell&#39;</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> AppleFellEvent</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#F97583;">interface</span><span style="color:#B392F0;"> AppleFellEvent</span><span style="color:#F97583;"> extends</span><span style="color:#B392F0;"> Event</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">  /* ... */</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 将新元素类型添加到 Vue 的 GlobalComponents 类型中</span></span>
<span class="line"><span style="color:#F97583;">declare</span><span style="color:#F97583;"> module</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">  interface</span><span style="color:#B392F0;"> GlobalComponents</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#9ECBFF;">    &#39;some-element&#39;</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> DefineCustomElement</span><span style="color:#E1E4E8;">&lt;</span></span>
<span class="line"><span style="color:#B392F0;">      SomeElementProps</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#B392F0;">      SomeElementEvents</span></span>
<span class="line"><span style="color:#E1E4E8;">    &gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// ... 与之前相同，使用元素引用 ...</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">  &lt;!-- ... 与之前相同，在模板中使用元素 ... --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>自定义元素的作者不应该从他们的库中自动导出特定框架的自定义元素类型定义，例如他们不应该同时从 <code>index.ts</code> 文件中导出它们以及库的其余部分，否则用户将会遇到意外的模块扩展错误。用户应该导入他们需要的特定框架的类型定义文件。</p><h2 id="web-components-vs-vue-components" tabindex="-1">Web Components vs. Vue Components <a class="header-anchor" href="#web-components-vs-vue-components" aria-label="Permalink to &quot;Web Components vs. Vue Components {#web-components-vs-vue-components}&quot;">​</a></h2><p>一些开发者认为应该避免使用框架专有的组件模型，而改为全部使用自定义元素来构建应用，因为这样可以使应用“永不过时”。在这里，我们将解释为什么我们认为这样的想法过于简单。</p><p>自定义元素和 Vue 组件之间确实存在一定程度的功能重叠：它们都允许我们定义具有数据传递、事件发射和生命周期管理的可重用组件。然而，Web Components 的 API 相对来说是更底层的和更基础的。要构建一个实际的应用，我们需要相当多平台没有涵盖的附加功能：</p><ul><li><p>一个声明式的、高效的模板系统；</p></li><li><p>一个响应式的，利于跨组件逻辑提取和重用的状态管理系统；</p></li><li><p>一种在服务器上呈现组件并在客户端“激活”(hydrate) 组件的高性能方法 (SSR)，这对 SEO 和 <a href="https://web.dev/vitals/" target="_blank" rel="noreferrer">LCP 这样的 Web 关键指标</a>非常重要。原生自定义元素 SSR 通常需要在 Node.js 中模拟 DOM，然后序列化更改后的 DOM，而 Vue SSR 则尽可能地将其编译为拼接起来的字符串，这会高效得多。</p></li></ul><p>Vue 的组件模型在设计时同时兼顾了这些需求，因此是一个更内聚的系统。</p><p>当你的团队有足够的技术水平时，可能可以在原生自定义元素的基础上构建具备同等功能的组件。但这也意味着你将承担长期维护内部框架的负担，同时失去了像 Vue 这样成熟的框架生态社区所带来的收益。</p><p>也有一些框架使用自定义元素作为其组件模型的基础，但它们都不可避免地要引入自己的专有解决方案来解决上面列出的问题。使用这些框架便意味着对它们针对这些问题的技术决策买单。不管这类框架怎么宣传它们“永不过时”，它们其实都无法保证你以后永远不需要重构。</p><p>除此之外，我们还发现自定义元素存在以下限制：</p><ul><li><p>贪婪 (eager) 的插槽求值会阻碍组件之间的可组合性。Vue 的<a href="/guide/components/slots.html#scoped-slots">作用域插槽</a>是一套强大的组件组合机制，而由于原生插槽的贪婪求值性质，自定义元素无法支持这样的设计。贪婪求值的插槽也意味着接收组件时不能控制何时或是否创建插槽内容的节点。</p></li><li><p>在当下要想使用 shadow DOM 书写局部作用域的 CSS，必须将样式嵌入到 JavaScript 中才可以在运行时将其注入到 shadow root 上。这也导致了 SSR 场景下需要渲染大量重复的样式标签。虽然有一些<a href="https://github.com/whatwg/html/pull/4898/" target="_blank" rel="noreferrer">平台功能</a>在尝试解决这一领域的问题，但是直到现在还没有达到通用支持的状态，而且仍有生产性能 / SSR 方面的问题需要解决。可与此同时，Vue 的单文件组件本身就提供了 <a href="/api/sfc-css-features.html">CSS 局域化机制</a>，并支持抽取样式到纯 CSS 文件中。</p></li></ul><p>Vue 将始终紧跟 Web 平台的最新标准，如果平台的新功能能让我们的工作变得更简单，我们将非常乐于利用它们。但是，我们的目标是提供“好用，且现在就能用”的解决方案。这意味着我们在采用新的原生功能时需要保持客观、批判性的态度，并在原生功能完成度不足的时候选择更适当的解决方案。</p>`,85)]))}const u=n(p,[["render",o]]);export{m as __pageData,u as default};
