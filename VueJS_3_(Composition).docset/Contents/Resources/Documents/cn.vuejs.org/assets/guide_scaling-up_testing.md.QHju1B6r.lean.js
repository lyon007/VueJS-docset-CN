import{i as t,j as r}from"./chunks/theme.BXWf4tll.js";import{c,b as p,x as e,w as l,h as o,o as i,a as s,s as n}from"./chunks/framework.B2oIMGqn.js";const E="/images/lambdatest.svg",F=JSON.parse('{"title":"测试","description":"","frontmatter":{},"headers":[{"level":2,"title":"为什么需要测试","slug":"why-test","link":"#why-test","children":[]},{"level":2,"title":"何时测试","slug":"when-to-test","link":"#when-to-test","children":[]},{"level":2,"title":"测试的类型","slug":"testing-types","link":"#testing-types","children":[]},{"level":2,"title":"总览","slug":"overview","link":"#overview","children":[]},{"level":2,"title":"单元测试","slug":"unit-testing","link":"#unit-testing","children":[{"level":3,"title":"组合式函数","slug":"composables","link":"#composables","children":[]},{"level":3,"title":"组件的单元测试","slug":"unit-testing-components","link":"#unit-testing-components","children":[]},{"level":3,"title":"推荐方案","slug":"recommendation","link":"#recommendation","children":[]},{"level":3,"title":"其他选择","slug":"other-options","link":"#other-options","children":[]}]},{"level":2,"title":"组件测试","slug":"component-testing","link":"#component-testing","children":[{"level":3,"title":"推荐方案","slug":"recommendation-1","link":"#recommendation-1","children":[]},{"level":3,"title":"组件挂载库","slug":"mounting-libraries","link":"#mounting-libraries","children":[]},{"level":3,"title":"其他选择","slug":"other-options-1","link":"#other-options-1","children":[]}]},{"level":2,"title":"端到端（E2E）测试","slug":"e2e-testing","link":"#e2e-testing","children":[{"level":3,"title":"选择一个端到端测试解决方案","slug":"choosing-an-e2e-testing-solution","link":"#choosing-an-e2e-testing-solution","children":[]},{"level":3,"title":"推荐方案","slug":"recommendation-2","link":"#recommendation-2","children":[]},{"level":3,"title":"其他选项","slug":"other-options-2","link":"#other-options-2","children":[]}]},{"level":2,"title":"用例指南","slug":"recipes","link":"#recipes","children":[{"level":3,"title":"添加 Vitest 到项目中","slug":"adding-vitest-to-a-project","link":"#adding-vitest-to-a-project","children":[]},{"level":3,"title":"测试组合式函数","slug":"testing-composables","link":"#testing-composables","children":[]}]}],"relativePath":"guide/scaling-up/testing.md","filePath":"guide/scaling-up/testing.md"}'),y={name:"guide/scaling-up/testing.md"},b=Object.assign(y,{setup(d){return(h,a)=>(i(),c("div",null,[a[3]||(a[3]=p(`<h1 id="testing" tabindex="-1">测试 <a class="header-anchor" href="#testing" aria-label="Permalink to &quot;测试 {#testing}&quot;">​</a></h1><h2 id="why-test" tabindex="-1">为什么需要测试 <a class="header-anchor" href="#why-test" aria-label="Permalink to &quot;为什么需要测试 {#why-test}&quot;">​</a></h2><p>自动化测试能够预防无意引入的 bug，并鼓励开发者将应用分解为可测试、可维护的函数、模块、类和组件。这能够帮助你和你的团队更快速、自信地构建复杂的 Vue 应用。与任何应用一样，新的 Vue 应用可能会以多种方式崩溃，因此，在发布前发现并解决这些问题就变得十分重要。</p><p>在本篇指引中，我们将介绍一些基本术语，并就你的 Vue 3 应用应选择哪些工具提供一些建议。</p><p>还有一个特定用于 Vue 的小节，介绍了组合式函数的测试，详情请参阅<a href="#testing-composables">测试组合式函数</a>。</p><h2 id="when-to-test" tabindex="-1">何时测试 <a class="header-anchor" href="#when-to-test" aria-label="Permalink to &quot;何时测试 {#when-to-test}&quot;">​</a></h2><p>越早越好！我们建议你尽快开始编写测试。拖得越久，应用就会有越多的依赖和复杂性，想要开始添加测试也就越困难。</p><h2 id="testing-types" tabindex="-1">测试的类型 <a class="header-anchor" href="#testing-types" aria-label="Permalink to &quot;测试的类型 {#testing-types}&quot;">​</a></h2><p>当设计你的 Vue 应用的测试策略时，你应该利用以下几种测试类型：</p><ul><li><strong>单元测试</strong>：检查给定函数、类或组合式函数的输入是否产生预期的输出或副作用。</li><li><strong>组件测试</strong>：检查你的组件是否正常挂载和渲染、是否可以与之互动，以及表现是否符合预期。这些测试比单元测试导入了更多的代码，更复杂，需要更多时间来执行。</li><li><strong>端到端测试</strong>：检查跨越多个页面的功能，并对生产构建的 Vue 应用进行实际的网络请求。这些测试通常涉及到建立一个数据库或其他后端。</li></ul><p>每种测试类型在你的应用的测试策略中都发挥着作用，保护你免受不同类型的问题的影响。</p><h2 id="overview" tabindex="-1">总览 <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;总览 {#overview}&quot;">​</a></h2><p>我们将简要地讨论这些测试是什么，以及如何在 Vue 应用中实现它们，并提供一些普适性建议。</p><h2 id="unit-testing" tabindex="-1">单元测试 <a class="header-anchor" href="#unit-testing" aria-label="Permalink to &quot;单元测试 {#unit-testing}&quot;">​</a></h2><p>编写单元测试是为了验证小的、独立的代码单元是否按预期工作。一个单元测试通常覆盖一个单个函数、类、组合式函数或模块。单元测试侧重于逻辑上的正确性，只关注应用整体功能的一小部分。他们可能会模拟你的应用环境的很大一部分（如初始状态、复杂的类、第三方模块和网络请求）。</p><p>一般来说，单元测试将捕获函数的业务逻辑和逻辑正确性的问题。</p><p>以这个 <code>increment</code> 函数为例：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// helpers.js</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> function</span><span style="color:#B392F0;"> increment</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">current</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">max</span><span style="color:#F97583;"> =</span><span style="color:#79B8FF;"> 10</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">  if</span><span style="color:#E1E4E8;"> (current </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> max) {</span></span>
<span class="line"><span style="color:#F97583;">    return</span><span style="color:#E1E4E8;"> current </span><span style="color:#F97583;">+</span><span style="color:#79B8FF;"> 1</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#F97583;">  return</span><span style="color:#E1E4E8;"> current</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>因为它很独立，可以很容易地调用 <code>increment</code> 函数并断言它是否返回了所期望的内容，所以我们将编写一个单元测试。</p><p>如果任何一条断言失败了，那么问题一定是出在 <code>increment</code> 函数上。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// helpers.spec.js</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { increment } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;./helpers&#39;</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#B392F0;">describe</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;increment&#39;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line highlighted"><span style="color:#B392F0;">  test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;increments the current number by 1&#39;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line highlighted"><span style="color:#B392F0;">    expect</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">increment</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">)).</span><span style="color:#B392F0;">toBe</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">  })</span></span>
<span class="line highlighted"><wbr></span>
<span class="line highlighted"><span style="color:#B392F0;">  test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;does not increment the current number over the max&#39;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line highlighted"><span style="color:#B392F0;">    expect</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">increment</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">)).</span><span style="color:#B392F0;">toBe</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">)</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">  })</span></span>
<span class="line highlighted"><wbr></span>
<span class="line highlighted"><span style="color:#B392F0;">  test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;has a default max of 10&#39;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line highlighted"><span style="color:#B392F0;">    expect</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">increment</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">)).</span><span style="color:#B392F0;">toBe</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">)</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">  })</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">})</span></span></code></pre></div><p>如前所述，单元测试通常适用于独立的业务逻辑、组件、类、模块或函数，不涉及 UI 渲染、网络请求或其他环境问题。</p><p>这些通常是与 Vue 无关的纯 JavaScript/TypeScript 模块。一般来说，在 Vue 应用中为业务逻辑编写单元测试与使用其他框架的应用没有明显区别。</p><p>但有两种情况，你必须对 Vue 的特定功能进行单元测试：</p><ol><li>组合式函数</li><li>组件</li></ol><h3 id="composables" tabindex="-1">组合式函数 <a class="header-anchor" href="#composables" aria-label="Permalink to &quot;组合式函数 {#composables}&quot;">​</a></h3><p>有一类 Vue 应用中特有的函数被称为 <a href="/guide/reusability/composables.html">组合式函数</a>，在测试过程中可能需要特殊处理。 你可以跳转到下方查看 <a href="#testing-composables">测试组合式函数</a> 了解更多细节。</p><h3 id="unit-testing-components" tabindex="-1">组件的单元测试 <a class="header-anchor" href="#unit-testing-components" aria-label="Permalink to &quot;组件的单元测试 {#unit-testing-components}&quot;">​</a></h3><p>一个组件可以通过两种方式测试：</p><ol><li><p>白盒：单元测试</p><p>白盒测试知晓一个组件的实现细节和依赖关系。它们更专注于将组件进行更 <strong>独立</strong> 的测试。这些测试通常会涉及到模拟一些组件的部分子组件，以及设置插件的状态和依赖性（例如 Pinia）。</p></li><li><p>黑盒：组件测试</p><p>黑盒测试不知晓一个组件的实现细节。这些测试尽可能少地模拟，以测试组件在整个系统中的集成情况。它们通常会渲染所有子组件，因而会被认为更像一种“集成测试”。请查看下方的<a href="#component-testing">组件测试建议</a>作进一步了解。</p></li></ol><h3 id="recommendation" tabindex="-1">推荐方案 <a class="header-anchor" href="#recommendation" aria-label="Permalink to &quot;推荐方案 {#recommendation}&quot;">​</a></h3><ul><li><p><a href="https://vitest.dev/" target="_blank" rel="noreferrer">Vitest</a></p><p>因为由 <code>create-vue</code> 创建的官方项目配置是基于 <a href="https://cn.vitejs.dev/" target="_blank" rel="noreferrer">Vite</a> 的，所以我们推荐你使用一个可以利用同一套 Vite 配置和转换管道的单元测试框架。<a href="https://cn.vitest.dev/" target="_blank" rel="noreferrer">Vitest</a> 正是一个针对此目标设计的单元测试框架，它由 Vue / Vite 团队成员开发和维护。在 Vite 的项目集成它会非常简单，而且速度非常快。</p></li></ul><h3 id="other-options" tabindex="-1">其他选择 <a class="header-anchor" href="#other-options" aria-label="Permalink to &quot;其他选择 {#other-options}&quot;">​</a></h3><ul><li><a href="https://jestjs.io/" target="_blank" rel="noreferrer">Jest</a> 是一个广受欢迎的单元测试框架。不过，我们只推荐你在已有一套 Jest 测试配置、且需要迁移到基于 Vite 的项目时使用它，因为 Vitest 提供了更无缝的集成和更好的性能。</li></ul><h2 id="component-testing" tabindex="-1">组件测试 <a class="header-anchor" href="#component-testing" aria-label="Permalink to &quot;组件测试 {#component-testing}&quot;">​</a></h2><p>在 Vue 应用中，主要用组件来构建用户界面。因此，当验证应用的行为时，组件是一个很自然的独立单元。从粒度的角度来看，组件测试位于单元测试之上，可以被认为是集成测试的一种形式。你的 Vue 应用中大部分内容都应该由组件测试来覆盖，我们建议每个 Vue 组件都应有自己的组件测试文件。</p><p>组件测试应该捕捉组件中的 prop、事件、提供的插槽、样式、CSS class 名、生命周期钩子，和其他相关的问题。</p><p>组件测试不应该模拟子组件，而应该像用户一样，通过与组件互动来测试组件和其子组件之间的交互。例如，组件测试应该像用户那样点击一个元素，而不是编程式地与组件进行交互。</p><p>组件测试主要需要关心组件的公开接口而不是内部实现细节。对于大部分的组件来说，公开接口包括触发的事件、prop 和插槽。当进行测试时，请记住，<strong>测试这个组件做了什么，而不是测试它是怎么做到的</strong>。</p><ul><li><p><strong>推荐的做法</strong></p><ul><li>对于 <strong>视图</strong> 的测试：根据输入 prop 和插槽断言渲染输出是否正确。</li><li>对于 <strong>交互</strong> 的测试：断言渲染的更新是否正确或触发的事件是否正确地响应了用户输入事件。</li></ul><p>在下面的例子中，我们展示了一个步进器（Stepper）组件，它拥有一个标记为 <code>increment</code> 的可点击的 DOM 元素。我们还传入了一个名为 <code>max</code> 的 prop 防止步进器增长超过 <code>2</code>，因此如果我们点击了按钮 3 次，视图将仍然显示 <code>2</code>。</p><p>我们不了解这个步进器的实现细节，只知道“输入”是这个 <code>max</code> prop，“输出”是这个组件状态所呈现出的视图。</p></li></ul>`,40)),e(o(r),null,{default:l(()=>[e(o(t),{label:"Vue Test Utils"},{default:l(()=>a[0]||(a[0]=[s("div",{class:"language-js"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"js"),s("pre",{class:"shiki github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#F97583"}},"const"),s("span",{style:{color:"#79B8FF"}}," valueSelector"),s("span",{style:{color:"#F97583"}}," ="),s("span",{style:{color:"#9ECBFF"}}," '[data-testid=stepper-value]'")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F97583"}},"const"),s("span",{style:{color:"#79B8FF"}}," buttonSelector"),s("span",{style:{color:"#F97583"}}," ="),s("span",{style:{color:"#9ECBFF"}}," '[data-testid=increment]'")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F97583"}},"const"),s("span",{style:{color:"#79B8FF"}}," wrapper"),s("span",{style:{color:"#F97583"}}," ="),s("span",{style:{color:"#B392F0"}}," mount"),s("span",{style:{color:"#E1E4E8"}},"(Stepper, {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  props: {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"    max: "),s("span",{style:{color:"#79B8FF"}},"1")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  }")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"})")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#B392F0"}},"expect"),s("span",{style:{color:"#E1E4E8"}},"(wrapper."),s("span",{style:{color:"#B392F0"}},"find"),s("span",{style:{color:"#E1E4E8"}},"(valueSelector)."),s("span",{style:{color:"#B392F0"}},"text"),s("span",{style:{color:"#E1E4E8"}},"())."),s("span",{style:{color:"#B392F0"}},"toContain"),s("span",{style:{color:"#E1E4E8"}},"("),s("span",{style:{color:"#9ECBFF"}},"'0'"),s("span",{style:{color:"#E1E4E8"}},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F97583"}},"await"),s("span",{style:{color:"#E1E4E8"}}," wrapper."),s("span",{style:{color:"#B392F0"}},"find"),s("span",{style:{color:"#E1E4E8"}},"(buttonSelector)."),s("span",{style:{color:"#B392F0"}},"trigger"),s("span",{style:{color:"#E1E4E8"}},"("),s("span",{style:{color:"#9ECBFF"}},"'click'"),s("span",{style:{color:"#E1E4E8"}},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#B392F0"}},"expect"),s("span",{style:{color:"#E1E4E8"}},"(wrapper."),s("span",{style:{color:"#B392F0"}},"find"),s("span",{style:{color:"#E1E4E8"}},"(valueSelector)."),s("span",{style:{color:"#B392F0"}},"text"),s("span",{style:{color:"#E1E4E8"}},"())."),s("span",{style:{color:"#B392F0"}},"toContain"),s("span",{style:{color:"#E1E4E8"}},"("),s("span",{style:{color:"#9ECBFF"}},"'1'"),s("span",{style:{color:"#E1E4E8"}},")")])])])],-1)])),_:1}),e(o(t),{label:"Cypress"},{default:l(()=>a[1]||(a[1]=[s("div",{class:"language-js"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"js"),s("pre",{class:"shiki github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#F97583"}},"const"),s("span",{style:{color:"#79B8FF"}}," valueSelector"),s("span",{style:{color:"#F97583"}}," ="),s("span",{style:{color:"#9ECBFF"}}," '[data-testid=stepper-value]'")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F97583"}},"const"),s("span",{style:{color:"#79B8FF"}}," buttonSelector"),s("span",{style:{color:"#F97583"}}," ="),s("span",{style:{color:"#9ECBFF"}}," '[data-testid=increment]'")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#B392F0"}},"mount"),s("span",{style:{color:"#E1E4E8"}},"(Stepper, {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  props: {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"    max: "),s("span",{style:{color:"#79B8FF"}},"1")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  }")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"})")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"cy."),s("span",{style:{color:"#B392F0"}},"get"),s("span",{style:{color:"#E1E4E8"}},"(valueSelector)")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  ."),s("span",{style:{color:"#B392F0"}},"should"),s("span",{style:{color:"#E1E4E8"}},"("),s("span",{style:{color:"#9ECBFF"}},"'be.visible'"),s("span",{style:{color:"#E1E4E8"}},")")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  ."),s("span",{style:{color:"#B392F0"}},"and"),s("span",{style:{color:"#E1E4E8"}},"("),s("span",{style:{color:"#9ECBFF"}},"'contain.text'"),s("span",{style:{color:"#E1E4E8"}},", "),s("span",{style:{color:"#9ECBFF"}},"'0'"),s("span",{style:{color:"#E1E4E8"}},")")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  ."),s("span",{style:{color:"#B392F0"}},"get"),s("span",{style:{color:"#E1E4E8"}},"(buttonSelector)")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  ."),s("span",{style:{color:"#B392F0"}},"click"),s("span",{style:{color:"#E1E4E8"}},"()")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  ."),s("span",{style:{color:"#B392F0"}},"get"),s("span",{style:{color:"#E1E4E8"}},"(valueSelector)")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  ."),s("span",{style:{color:"#B392F0"}},"should"),s("span",{style:{color:"#E1E4E8"}},"("),s("span",{style:{color:"#9ECBFF"}},"'contain.text'"),s("span",{style:{color:"#E1E4E8"}},", "),s("span",{style:{color:"#9ECBFF"}},"'1'"),s("span",{style:{color:"#E1E4E8"}},")")])])])],-1)])),_:1}),e(o(t),{label:"Testing Library"},{default:l(()=>a[2]||(a[2]=[s("div",{class:"language-js"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"js"),s("pre",{class:"shiki github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{color:"#F97583"}},"const"),s("span",{style:{color:"#E1E4E8"}}," { "),s("span",{style:{color:"#79B8FF"}},"getByText"),s("span",{style:{color:"#E1E4E8"}}," } "),s("span",{style:{color:"#F97583"}},"="),s("span",{style:{color:"#B392F0"}}," render"),s("span",{style:{color:"#E1E4E8"}},"(Stepper, {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  props: {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"    max: "),s("span",{style:{color:"#79B8FF"}},"1")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"  }")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#E1E4E8"}},"})")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#B392F0"}},"getByText"),s("span",{style:{color:"#E1E4E8"}},"("),s("span",{style:{color:"#9ECBFF"}},"'0'"),s("span",{style:{color:"#E1E4E8"}},") "),s("span",{style:{color:"#6A737D"}},'// Implicit assertion that "0" is within the component')]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F97583"}},"const"),s("span",{style:{color:"#79B8FF"}}," button"),s("span",{style:{color:"#F97583"}}," ="),s("span",{style:{color:"#B392F0"}}," getByRole"),s("span",{style:{color:"#E1E4E8"}},"("),s("span",{style:{color:"#9ECBFF"}},"'button'"),s("span",{style:{color:"#E1E4E8"}},", { name:"),s("span",{style:{color:"#9ECBFF"}}," /"),s("span",{style:{color:"#DBEDFF"}},"increment"),s("span",{style:{color:"#9ECBFF"}},"/"),s("span",{style:{color:"#F97583"}},"i"),s("span",{style:{color:"#E1E4E8"}}," })")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#6A737D"}},"// Dispatch a click event to our increment button.")]),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F97583"}},"await"),s("span",{style:{color:"#E1E4E8"}}," fireEvent."),s("span",{style:{color:"#B392F0"}},"click"),s("span",{style:{color:"#E1E4E8"}},"(button)")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#B392F0"}},"getByText"),s("span",{style:{color:"#E1E4E8"}},"("),s("span",{style:{color:"#9ECBFF"}},"'1'"),s("span",{style:{color:"#E1E4E8"}},")")]),n(`
`),s("span",{class:"line"}),n(`
`),s("span",{class:"line"},[s("span",{style:{color:"#F97583"}},"await"),s("span",{style:{color:"#E1E4E8"}}," fireEvent."),s("span",{style:{color:"#B392F0"}},"click"),s("span",{style:{color:"#E1E4E8"}},"(button)")])])])],-1)])),_:1})]),_:1}),a[4]||(a[4]=p('<p><strong>应避免的做法</strong></p><ul><li><p>不要去断言一个组件实例的私有状态或测试一个组件的私有方法。测试实现细节会使测试代码太脆弱，因为当实现发生变化时，它们更有可能失败并需要更新重写。</p><p>组件的最终工作是渲染正确的 DOM 输出，所以专注于 DOM 输出的测试提供了足够的正确性保证（如果你不需要更多其他方面测试的话），同时更加健壮、需要的改动更少。</p><p>不要完全依赖快照测试。断言 HTML 字符串并不能完全说明正确性。应当编写有意图的测试。</p><p>如果一个方法需要测试，把它提取到一个独立的实用函数中，并为它写一个专门的单元测试。如果它不能被直截了当地抽离出来，那么对它的调用应该作为交互测试的一部分。</p></li></ul><h3 id="recommendation-1" tabindex="-1">推荐方案 <a class="header-anchor" href="#recommendation-1" aria-label="Permalink to &quot;推荐方案 {#recommendation-1}&quot;">​</a></h3><ul><li><p><a href="https://vitest.dev/" target="_blank" rel="noreferrer">Vitest</a> 对于组件和组合式函数都采用无头渲染的方式 (例如 VueUse 中的 <a href="https://vueuse.org/core/useFavicon/#usefavicon" target="_blank" rel="noreferrer"><code>useFavicon</code></a> 函数)。组件和 DOM 都可以通过 <a href="https://github.com/vuejs/test-utils" target="_blank" rel="noreferrer">@vue/test-utils</a> 来测试。</p></li><li><p><a href="https://on.cypress.io/component" target="_blank" rel="noreferrer">Cypress 组件测试</a> 会预期其准确地渲染样式或者触发原生 DOM 事件。它可以搭配 <a href="https://testing-library.com/docs/cypress-testing-library/intro" target="_blank" rel="noreferrer">@testing-library/cypress</a> 这个库一同进行测试。</p></li></ul><p>Vitest 和基于浏览器的运行器之间的主要区别是速度和执行上下文。简而言之，基于浏览器的运行器，如 Cypress，可以捕捉到基于 Node 的运行器（如 Vitest）所不能捕捉的问题（比如样式问题、原生 DOM 事件、Cookies、本地存储和网络故障），但基于浏览器的运行器比 Vitest <em>慢几个数量级</em>，因为它们要执行打开浏览器，编译样式表以及其他步骤。Cypress 是一个基于浏览器的运行器，支持组件测试。请阅读 <a href="https://vitest.dev/guide/comparisons.html#cypress" target="_blank" rel="noreferrer">Vitest 文档的“比较”这一章</a> 了解 Vitest 和 Cypress 最新的比较信息。</p><h3 id="mounting-libraries" tabindex="-1">组件挂载库 <a class="header-anchor" href="#mounting-libraries" aria-label="Permalink to &quot;组件挂载库 {#mounting-libraries}&quot;">​</a></h3><p>组件测试通常涉及到单独挂载被测试的组件，触发模拟的用户输入事件，并对渲染的 DOM 输出进行断言。有一些专门的工具库可以使这些任务变得更简单。</p><ul><li><p><a href="https://github.com/vuejs/test-utils" target="_blank" rel="noreferrer"><code>@vue/test-utils</code></a> 是官方的底层组件测试库，用来提供给用户访问 Vue 特有的 API。<code>@testing-library/vue</code> 也是基于此库构建的。</p></li><li><p><a href="https://github.com/testing-library/vue-testing-library" target="_blank" rel="noreferrer"><code>@testing-library/vue</code></a> 是一个专注于测试组件而不依赖于实现细节的 Vue 测试库。它的指导原则是：测试越是类似于软件的使用方式，它们就能提供越多的信心。</p></li></ul><p>我们推荐在应用中使用 <code>@vue/test-utils</code> 测试组件。<code>@testing-library/vue</code> 在测试带有 Suspense 的异步组件时存在问题，在使用时需要谨慎。</p><h3 id="other-options-1" tabindex="-1">其他选择 <a class="header-anchor" href="#other-options-1" aria-label="Permalink to &quot;其他选择 {#other-options-1}&quot;">​</a></h3><ul><li><p><a href="https://v2.nightwatchjs.org/" target="_blank" rel="noreferrer">Nightwatch</a> 是一个端到端测试运行器，支持 Vue 的组件测试。(Nightwatch v2 版本的 <a href="https://github.com/nightwatchjs-community/todo-vue" target="_blank" rel="noreferrer">示例项目</a>)</p></li><li><p><a href="https://webdriver.io/docs/component-testing/vue" target="_blank" rel="noreferrer">WebdriverIO</a> 用于跨浏览器组件测试，该测试依赖于基于标准自动化的原生用户交互。它也可以与测试库一起使用。</p></li></ul><h2 id="e2e-testing" tabindex="-1">端到端（E2E）测试 <a class="header-anchor" href="#e2e-testing" aria-label="Permalink to &quot;端到端（E2E）测试 {#e2e-testing}&quot;">​</a></h2><p>虽然单元测试为所写的代码提供了一定程度的验证，但单元测试和组件测试在部署到生产时，对应用整体覆盖的能力有限。因此，端到端测试针对的可以说是应用最重要的方面：当用户实际使用你的应用时发生了什么。</p><p>端到端测试的重点是多页面的应用表现，针对你的应用在生产环境下进行网络请求。他们通常需要建立一个数据库或其他形式的后端，甚至可能针对一个预备上线的环境运行。</p><p>端到端测试通常会捕捉到路由、状态管理库、顶级组件（常见为 App 或 Layout）、公共资源或任何请求处理方面的问题。如上所述，它们可以捕捉到单元测试或组件测试无法捕捉的关键问题。</p><p>端到端测试不导入任何 Vue 应用的代码，而是完全依靠在真实浏览器中浏览整个页面来测试你的应用。</p><p>端到端测试验证了你的应用中的许多层。可以在你的本地构建的应用中，甚至是一个预上线的环境中运行。针对预上线环境的测试不仅包括你的前端代码和静态服务器，还包括所有相关的后端服务和基础设施。</p><blockquote><p>你的测试越是类似于你的软件的使用方式，它们就越能值得你信赖。- <a href="https://twitter.com/kentcdodds/status/977018512689455106" target="_blank" rel="noreferrer">Kent C. Dodds</a> - Testing Library 的作者</p></blockquote><p>通过测试用户操作如何影响你的应用，端到端测试通常是提高应用能否正常运行的置信度的关键。</p><h3 id="choosing-an-e2e-testing-solution" tabindex="-1">选择一个端到端测试解决方案 <a class="header-anchor" href="#choosing-an-e2e-testing-solution" aria-label="Permalink to &quot;选择一个端到端测试解决方案 {#choosing-an-e2e-testing-solution}&quot;">​</a></h3><p>虽然因为不可靠且拖慢了开发过程，市面上对 Web 上的端到端测试的评价并不好，但现代端到端工具已经在创建更可靠、更有用和交互性更好的测试方面取得了很大进步。在选择端到端测试框架时，以下小节会为你给应用选择测试框架时需要注意的事项提供一些指导。</p><h4 id="cross-browser-testing" tabindex="-1">跨浏览器测试 <a class="header-anchor" href="#cross-browser-testing" aria-label="Permalink to &quot;跨浏览器测试 {#cross-browser-testing}&quot;">​</a></h4><p>端到端测试的一个主要优点是你可以了解你的应用在多个不同浏览器上运行的情况。尽管理想情况应该是 100% 的跨浏览器覆盖率，但很重要的一点是跨浏览器测试对团队资源的回报是递减的，因为需要额外的时间和机器来持续运行它们。因此，在选择应用所需的跨浏览器测试的数量时，注意权衡是很有必要的。</p><h4 id="faster-feedback-loops" tabindex="-1">更快的反馈 <a class="header-anchor" href="#faster-feedback-loops" aria-label="Permalink to &quot;更快的反馈 {#faster-feedback-loops}&quot;">​</a></h4><p>端到端测试和相应开发过程的主要问题之一是，运行整个套件需要很长的时间。通常情况下，这只在持续集成和部署（CI/CD）管道中进行。现代的端到端测试框架通过增加并行化等功能来帮助解决这个问题，这使得 CI/CD 管道的运行速度比以前快了几倍。此外，在本地开发时，能够有选择地为你正在工作的页面运行单个测试，同时还提供测试的热重载，大大提高了开发者的工作流程和生产力。</p><h4 id="first-class-debugging-experience" tabindex="-1">第一优先级的调试体验 <a class="header-anchor" href="#first-class-debugging-experience" aria-label="Permalink to &quot;第一优先级的调试体验 {#first-class-debugging-experience}&quot;">​</a></h4><p>传统上，开发者依靠扫描终端窗口中的日志来帮助确定测试中出现的问题，而现代端到端测试框架允许开发者利用他们已经熟悉的工具，例如浏览器开发工具。</p><h4 id="visibility-in-headless-mode" tabindex="-1">无头模式下的可见性 <a class="header-anchor" href="#visibility-in-headless-mode" aria-label="Permalink to &quot;无头模式下的可见性 {#visibility-in-headless-mode}&quot;">​</a></h4><p>当端到端测试在 CI/CD 管道中运行时，它们通常在无头浏览器（即不带界面的浏览器）中运行。因此，当错误发生时，现代端到端测试框架的一个关键特性是能够在不同的测试阶段查看应用的快照、视频，从而深入了解错误的原因。而在很早以前，要手动维护这些集成是非常繁琐的。</p><h3 id="recommendation-2" tabindex="-1">推荐方案 <a class="header-anchor" href="#recommendation-2" aria-label="Permalink to &quot;推荐方案 {#recommendation-2}&quot;">​</a></h3><ul><li><p><a href="https://playwright.dev/" target="_blank" rel="noreferrer">Playwright</a> 是一个非常好的端到端测试解决方案，支持 Chromium、WebKit 和 Firefox。在 Windows、Linux 和 macOS 上进行本地或 CI 测试、无头测试，或使用适用于 Android 和 Mobile Safari 的 Google Chrome 的原生移动端模拟测试。它拥有信息丰富的用户界面、出色的调试能力、内置断言、并行处理功能以及追踪功能，旨在消除不稳定的测试。它还提供对<a href="https://docs.cypress.io/guides/component-testing/introduction" target="_blank" rel="noreferrer">组件测试</a>的支持，但目前处于实验阶段。Playwright 由微软开源并维护。</p></li><li><p><a href="https://www.cypress.io/" target="_blank" rel="noreferrer">Cypress</a> 具有信息丰富的图形界面、出色的调试性、内置断言、存根、抗剥落性、并行化和快照等诸多特性。而且如上所述，它还提供对 <a href="https://docs.cypress.io/guides/component-testing/introduction" target="_blank" rel="noreferrer">组件测试</a> 的支持。它支持基于 Chromium 的浏览器、Firefox 和 Electron。但 WebKit 被标记为实验性支持。Cypress 采用 MIT 许可，但并行化等部分功能需要订阅 Cypress Cloud。</p></li></ul><div class="lambdatest"><a href="https://lambdatest.com" target="_blank"><img src="'+E+`"><div><div class="testing-partner">测试赞助商</div><div>Lambdatest 是一个云平台，用于在所有主流浏览器和真实设备上运行 E2E、可访问性和可视化回归测试，并提供人工智能辅助测试生成！</div></div></a></div><h3 id="other-options-2" tabindex="-1">其他选项 <a class="header-anchor" href="#other-options-2" aria-label="Permalink to &quot;其他选项 {#other-options-2}&quot;">​</a></h3><ul><li><p><a href="https://nightwatchjs.org/" target="_blank" rel="noreferrer">Nightwatch</a> 是一个基于 <a href="https://www.npmjs.com/package/selenium-webdriver" target="_blank" rel="noreferrer">Selenium WebDriver</a> 的端到端测试解决方案。它的浏览器品类支持范围是最广的，包括原生移动测试。基于 Selenium 的解决方案将比 Playwright 或 Cypress 慢。</p></li><li><p><a href="https://webdriver.io/" target="_blank" rel="noreferrer">WebdriverIO</a> 是一个基于 WebDriver 协议的网络和移动测试的自动化测试框架。</p></li></ul><h2 id="recipes" tabindex="-1">用例指南 <a class="header-anchor" href="#recipes" aria-label="Permalink to &quot;用例指南 {#recipes}&quot;">​</a></h2><h3 id="adding-vitest-to-a-project" tabindex="-1">添加 Vitest 到项目中 <a class="header-anchor" href="#adding-vitest-to-a-project" aria-label="Permalink to &quot;添加 Vitest 到项目中 {#adding-vitest-to-a-project}&quot;">​</a></h3><p>在一个基于 Vite 的 Vue 项目中，运行如下命令：</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> npm install -D vitest happy-dom @testing-library/vue</span></span></code></pre></div><p>接着，更新你的 Vite 配置，添加上 <code>test</code> 选项：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// vite.config.js</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { defineConfig } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vite&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#B392F0;"> defineConfig</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#6A737D;">  // ...</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">  test: {</span></span>
<span class="line highlighted"><span style="color:#6A737D;">    // 启用类似 jest 的全局测试 API</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">    globals: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line highlighted"><span style="color:#6A737D;">    // 使用 happy-dom 模拟 DOM</span></span>
<span class="line highlighted"><span style="color:#6A737D;">    // 这需要你安装 happy-dom 作为对等依赖（peer dependency）</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">    environment: </span><span style="color:#9ECBFF;">&#39;happy-dom&#39;</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>如果使用 TypeScript，请将 <code>vitest/globals</code> 添加到 <code>tsconfig.json</code> 的 <code>types</code> 字段当中。</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// tsconfig.json</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#79B8FF;">  &quot;compilerOptions&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#79B8FF;">    &quot;types&quot;</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&quot;vitest/globals&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></div><p>接着，在你的项目中创建名字以 <code>*.test.js</code> 结尾的文件。你可以把所有的测试文件放在项目根目录下的 <code>test</code> 目录中，或者放在源文件旁边的 <code>test</code> 目录中。Vitest 会使用命名规则自动搜索它们。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// MyComponent.test.js</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { render } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;@testing-library/vue&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> MyComponent </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;./MyComponent.vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;it should work&#39;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">getByText</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> render</span><span style="color:#E1E4E8;">(MyComponent, {</span></span>
<span class="line"><span style="color:#E1E4E8;">    props: {</span></span>
<span class="line"><span style="color:#6A737D;">      /* ... */</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  // 断言输出</span></span>
<span class="line"><span style="color:#B392F0;">  getByText</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;...&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre></div><p>最后，在 <code>package.json</code> 之中添加测试命令，然后运行它：</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#6A737D;">  // ...</span></span>
<span class="line"><span style="color:#79B8FF;">  &quot;scripts&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line highlighted"><span style="color:#79B8FF;">    &quot;test&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;vitest&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> npm test</span></span></code></pre></div><h3 id="testing-composables" tabindex="-1">测试组合式函数 <a class="header-anchor" href="#testing-composables" aria-label="Permalink to &quot;测试组合式函数 {#testing-composables}&quot;">​</a></h3><blockquote><p>这一小节假设你已经读过了<a href="/guide/reusability/composables.html">组合式函数</a>这一章。</p></blockquote><p>当涉及到测试组合式函数时，我们可以根据是否依赖宿主组件实例把它们分为两类。</p><p>当一个组合式函数使用以下 API 时，它依赖于一个宿主组件实例：</p><ul><li>生命周期钩子</li><li>供给/注入</li></ul><p>如果一个组合式程序只使用响应式 API，那么它可以通过直接调用并断言其返回的状态或方法来进行测试。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// counter.js</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { ref } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> function</span><span style="color:#B392F0;"> useCounter</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> count</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#B392F0;"> increment</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> count.value</span><span style="color:#F97583;">++</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">  return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    count,</span></span>
<span class="line"><span style="color:#E1E4E8;">    increment</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// counter.test.js</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { useCounter } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;./counter.js&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;useCounter&#39;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">count</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">increment</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> useCounter</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#B392F0;">  expect</span><span style="color:#E1E4E8;">(count.value).</span><span style="color:#B392F0;">toBe</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">  increment</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#B392F0;">  expect</span><span style="color:#E1E4E8;">(count.value).</span><span style="color:#B392F0;">toBe</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre></div><p>一个依赖生命周期钩子或供给/注入的组合式函数需要被包装在一个宿主组件中才可以测试。我们可以创建下面这样的帮手函数：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// test-utils.js</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { createApp } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> function</span><span style="color:#B392F0;"> withSetup</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">composable</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">  let</span><span style="color:#E1E4E8;"> result</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> app</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> createApp</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#B392F0;">    setup</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      result </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> composable</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#6A737D;">      // 忽略模板警告</span></span>
<span class="line"><span style="color:#F97583;">      return</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {}</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">  app.</span><span style="color:#B392F0;">mount</span><span style="color:#E1E4E8;">(document.</span><span style="color:#B392F0;">createElement</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#6A737D;">  // 返回结果与应用实例</span></span>
<span class="line"><span style="color:#6A737D;">  // 用来测试供给和组件卸载</span></span>
<span class="line"><span style="color:#F97583;">  return</span><span style="color:#E1E4E8;"> [result, app]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { withSetup } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;./test-utils&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { useFoo } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;./foo&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;useFoo&#39;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">result</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">app</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> withSetup</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> useFoo</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">123</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#6A737D;">  // 为注入的测试模拟一方供给</span></span>
<span class="line"><span style="color:#E1E4E8;">  app.</span><span style="color:#B392F0;">provide</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">  // 执行断言</span></span>
<span class="line"><span style="color:#B392F0;">  expect</span><span style="color:#E1E4E8;">(result.foo.value).</span><span style="color:#B392F0;">toBe</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#6A737D;">  // 如果需要的话可以这样触发</span></span>
<span class="line"><span style="color:#E1E4E8;">  app.</span><span style="color:#B392F0;">unmount</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre></div><p>对于更复杂的组合式函数，通过使用<a href="#component-testing">组件测试</a>编写针对这个包装器组件的测试，这会容易很多。</p>`,58))]))}});export{F as __pageData,b as default};
