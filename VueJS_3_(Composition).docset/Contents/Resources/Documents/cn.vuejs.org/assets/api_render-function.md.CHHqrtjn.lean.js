import{_ as n,c as a,b as l,o as p}from"./chunks/framework.B2oIMGqn.js";const F=JSON.parse('{"title":"渲染函数 API","description":"","frontmatter":{},"headers":[{"level":2,"title":"h()","slug":"h","link":"#h","children":[]},{"level":2,"title":"mergeProps()","slug":"mergeprops","link":"#mergeprops","children":[]},{"level":2,"title":"cloneVNode()","slug":"clonevnode","link":"#clonevnode","children":[]},{"level":2,"title":"isVNode()","slug":"isvnode","link":"#isvnode","children":[]},{"level":2,"title":"resolveComponent()","slug":"resolvecomponent","link":"#resolvecomponent","children":[]},{"level":2,"title":"resolveDirective()","slug":"resolvedirective","link":"#resolvedirective","children":[]},{"level":2,"title":"withDirectives()","slug":"withdirectives","link":"#withdirectives","children":[]},{"level":2,"title":"withModifiers()","slug":"withmodifiers","link":"#withmodifiers","children":[]}],"relativePath":"api/render-function.md","filePath":"api/render-function.md"}'),o={name:"api/render-function.md"};function e(t,s,c,r,i,E){return p(),a("div",null,s[0]||(s[0]=[l(`<h1 id="render-function-apis" tabindex="-1">渲染函数 API <a class="header-anchor" href="#render-function-apis" aria-label="Permalink to &quot;渲染函数 API {#render-function-apis}&quot;">​</a></h1><h2 id="h" tabindex="-1">h() <a class="header-anchor" href="#h" aria-label="Permalink to &quot;h() {#h}&quot;">​</a></h2><p>创建虚拟 DOM 节点 (vnode)。</p><ul><li><p><strong>类型</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 完整参数签名</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> h</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#FFAB70;">  type</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span><span style="color:#F97583;"> |</span><span style="color:#B392F0;"> Component</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#FFAB70;">  props</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> object</span><span style="color:#F97583;"> |</span><span style="color:#79B8FF;"> null</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#FFAB70;">  children</span><span style="color:#F97583;">?:</span><span style="color:#B392F0;"> Children</span><span style="color:#F97583;"> |</span><span style="color:#B392F0;"> Slot</span><span style="color:#F97583;"> |</span><span style="color:#B392F0;"> Slots</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> VNode</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 省略 props</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> h</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">type</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span><span style="color:#F97583;"> |</span><span style="color:#B392F0;"> Component</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">children</span><span style="color:#F97583;">?:</span><span style="color:#B392F0;"> Children</span><span style="color:#F97583;"> |</span><span style="color:#B392F0;"> Slot</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> VNode</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#B392F0;"> Children</span><span style="color:#F97583;"> =</span><span style="color:#79B8FF;"> string</span><span style="color:#F97583;"> |</span><span style="color:#79B8FF;"> number</span><span style="color:#F97583;"> |</span><span style="color:#79B8FF;"> boolean</span><span style="color:#F97583;"> |</span><span style="color:#B392F0;"> VNode</span><span style="color:#F97583;"> |</span><span style="color:#79B8FF;"> null</span><span style="color:#F97583;"> |</span><span style="color:#B392F0;"> Children</span><span style="color:#E1E4E8;">[]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#B392F0;"> Slot</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> Children</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#B392F0;"> Slots</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> { [</span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Slot</span><span style="color:#E1E4E8;"> }</span></span></code></pre></div><blockquote><p>为了便于阅读，对类型进行了简化。</p></blockquote></li><li><p><strong>详细信息</strong></p><p>第一个参数既可以是一个字符串 (用于原生元素) 也可以是一个 Vue 组件定义。第二个参数是要传递的 prop，第三个参数是子节点。</p><p>当创建一个组件的 vnode 时，子节点必须以插槽函数进行传递。如果组件只有默认槽，可以使用单个插槽函数进行传递。否则，必须以插槽函数的对象形式来传递。</p><p>为了方便阅读，当子节点不是插槽对象时，可以省略 prop 参数。</p></li><li><p><strong>示例</strong></p><p>创建原生元素：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { h } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 除了 type 外，其他参数都是可选的</span></span>
<span class="line"><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">, { id: </span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;"> })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// attribute 和 property 都可以用于 prop</span></span>
<span class="line"><span style="color:#6A737D;">// Vue 会自动选择正确的方式来分配它</span></span>
<span class="line"><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">, { class: </span><span style="color:#9ECBFF;">&#39;bar&#39;</span><span style="color:#E1E4E8;">, innerHTML: </span><span style="color:#9ECBFF;">&#39;hello&#39;</span><span style="color:#E1E4E8;"> })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// class 与 style 可以像在模板中一样</span></span>
<span class="line"><span style="color:#6A737D;">// 用数组或对象的形式书写</span></span>
<span class="line"><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">, { class: [foo, { bar }], style: { color: </span><span style="color:#9ECBFF;">&#39;red&#39;</span><span style="color:#E1E4E8;"> } })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 事件监听器应以 onXxx 的形式书写</span></span>
<span class="line"><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">, { </span><span style="color:#B392F0;">onClick</span><span style="color:#E1E4E8;">: () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {} })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// children 可以是一个字符串</span></span>
<span class="line"><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">, { id: </span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;"> }, </span><span style="color:#9ECBFF;">&#39;hello&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 没有 prop 时可以省略不写</span></span>
<span class="line"><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;hello&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">, [</span><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;span&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;hello&#39;</span><span style="color:#E1E4E8;">)])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// children 数组可以同时包含 vnode 和字符串</span></span>
<span class="line"><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">, [</span><span style="color:#9ECBFF;">&#39;hello&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;span&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;hello&#39;</span><span style="color:#E1E4E8;">)])</span></span></code></pre></div><p>创建组件：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Foo </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;./Foo.vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 传递 prop</span></span>
<span class="line"><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(Foo, {</span></span>
<span class="line"><span style="color:#6A737D;">  // 等价于 some-prop=&quot;hello&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  someProp: </span><span style="color:#9ECBFF;">&#39;hello&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#6A737D;">  // 等价于 @update=&quot;() =&gt; {}&quot;</span></span>
<span class="line"><span style="color:#B392F0;">  onUpdate</span><span style="color:#E1E4E8;">: () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {}</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 传递单个默认插槽</span></span>
<span class="line"><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(Foo, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#9ECBFF;"> &#39;default slot&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 传递具名插槽</span></span>
<span class="line"><span style="color:#6A737D;">// 注意，需要使用 \`null\` 来避免</span></span>
<span class="line"><span style="color:#6A737D;">// 插槽对象被当作是 prop</span></span>
<span class="line"><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(MyComponent, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#B392F0;">  default</span><span style="color:#E1E4E8;">: () </span><span style="color:#F97583;">=&gt;</span><span style="color:#9ECBFF;"> &#39;default slot&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#B392F0;">  foo</span><span style="color:#E1E4E8;">: () </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#B392F0;">  bar</span><span style="color:#E1E4E8;">: () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> [</span><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;span&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;one&#39;</span><span style="color:#E1E4E8;">), </span><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;span&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;two&#39;</span><span style="color:#E1E4E8;">)]</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre></div></li><li><p><strong>参考</strong><a href="/guide/extras/render-function.html#creating-vnodes">指南 - 渲染函数 - 创建 VNode</a></p></li></ul><h2 id="mergeprops" tabindex="-1">mergeProps() <a class="header-anchor" href="#mergeprops" aria-label="Permalink to &quot;mergeProps() {#mergeprops}&quot;">​</a></h2><p>合并多个 props 对象，用于处理含有特定的 props 参数的情况。</p><ul><li><p><strong>类型</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> mergeProps</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">...</span><span style="color:#FFAB70;">args</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> object</span><span style="color:#E1E4E8;">[])</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> object</span></span></code></pre></div></li><li><p><strong>详细信息</strong></p><p><code>mergeProps()</code> 支持以下特定 props 参数的处理，将它们合并成一个对象。</p><ul><li><code>class</code></li><li><code>style</code></li><li><code>onXxx</code> 事件监听器——多个同名的事件监听器将被合并到一个数组。</li></ul><p>如果你不需要合并行为而是简单覆盖，可以使用原生 object spread 语法来代替。</p></li><li><p><strong>示例</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { mergeProps } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> one</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  class: </span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  onClick: handlerA</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> two</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  class: { bar: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">  onClick: handlerB</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> merged</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> mergeProps</span><span style="color:#E1E4E8;">(one, two)</span></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> {</span></span>
<span class="line"><span style="color:#6A737D;">   class: &#39;foo bar&#39;,</span></span>
<span class="line"><span style="color:#6A737D;">   onClick: [handlerA, handlerB]</span></span>
<span class="line"><span style="color:#6A737D;"> }</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span></code></pre></div></li></ul><h2 id="clonevnode" tabindex="-1">cloneVNode() <a class="header-anchor" href="#clonevnode" aria-label="Permalink to &quot;cloneVNode() {#clonevnode}&quot;">​</a></h2><p>克隆一个 vnode。</p><ul><li><p><strong>类型</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> cloneVNode</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">vnode</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> VNode</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">extraProps</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> object</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> VNode</span></span></code></pre></div></li><li><p><strong>详细信息</strong></p><p>返回一个克隆的 vnode，可在原有基础上添加一些额外的 prop。</p><p>Vnode 被认为是一旦创建就不能修改的，你不应该修改已创建的 vnode 的 prop，而应该附带不同的/额外的 prop 来克隆它。</p><p>Vnode 具有特殊的内部属性，因此克隆它并不像 object spread 一样简单。<code>cloneVNode()</code> 处理了大部分这样的内部逻辑。</p></li><li><p><strong>示例</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { h, cloneVNode } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> original</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> cloned</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> cloneVNode</span><span style="color:#E1E4E8;">(original, { id: </span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;"> })</span></span></code></pre></div></li></ul><h2 id="isvnode" tabindex="-1">isVNode() <a class="header-anchor" href="#isvnode" aria-label="Permalink to &quot;isVNode() {#isvnode}&quot;">​</a></h2><p>判断一个值是否为 vnode 类型。</p><ul><li><p><strong>类型</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> isVNode</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">value</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> unknown</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> boolean</span></span></code></pre></div></li></ul><h2 id="resolvecomponent" tabindex="-1">resolveComponent() <a class="header-anchor" href="#resolvecomponent" aria-label="Permalink to &quot;resolveComponent() {#resolvecomponent}&quot;">​</a></h2><p>按名称手动解析已注册的组件。</p><ul><li><p><strong>类型</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> resolveComponent</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Component</span><span style="color:#F97583;"> |</span><span style="color:#79B8FF;"> string</span></span></code></pre></div></li><li><p><strong>详细信息</strong></p><p><strong>备注：如果你可以直接引入组件就不需使用此方法。</strong></p><p>为了能从正确的组件上下文进行解析，<code>resolveComponent()</code> 必须在<span class="composition-api"><code>setup()</code> 或</span>渲染函数内调用。</p><p>如果组件未找到，会抛出一个运行时警告，并返回组件名字符串。</p></li><li><p><strong>示例</strong></p><div class="composition-api"><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { h, resolveComponent } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  setup</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">    const</span><span style="color:#79B8FF;"> ButtonCounter</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> resolveComponent</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;ButtonCounter&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">    return</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">      return</span><span style="color:#B392F0;"> h</span><span style="color:#E1E4E8;">(ButtonCounter)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></div><div class="options-api"><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { h, resolveComponent } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  render</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">    const</span><span style="color:#79B8FF;"> ButtonCounter</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> resolveComponent</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;ButtonCounter&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">    return</span><span style="color:#B392F0;"> h</span><span style="color:#E1E4E8;">(ButtonCounter)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></div></li><li><p><strong>参考</strong><a href="/guide/extras/render-function.html#components">指南 - 渲染函数 - 组件</a></p></li></ul><h2 id="resolvedirective" tabindex="-1">resolveDirective() <a class="header-anchor" href="#resolvedirective" aria-label="Permalink to &quot;resolveDirective() {#resolvedirective}&quot;">​</a></h2><p>按名称手动解析已注册的指令。</p><ul><li><p><strong>类型</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> resolveDirective</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Directive</span><span style="color:#F97583;"> |</span><span style="color:#79B8FF;"> undefined</span></span></code></pre></div></li><li><p><strong>详细信息</strong></p><p><strong>备注：如果你可以直接引入指令就不需使用此方法。</strong></p><p>为了能从正确的组件上下文进行解析，<code>resolveDirective()</code> 必须在<span class="composition-api"><code>setup()</code> 或</span>渲染函数内调用。</p><p>如果指令没有找到，会抛出一个运行时警告，并返回 <code>undefined</code>。</p></li><li><p><strong>参考</strong><a href="/guide/extras/render-function.html#custom-directives">指南 - 渲染函数 - 自定义指令</a></p></li></ul><h2 id="withdirectives" tabindex="-1">withDirectives() <a class="header-anchor" href="#withdirectives" aria-label="Permalink to &quot;withDirectives() {#withdirectives}&quot;">​</a></h2><p>用于给 vnode 增加自定义指令。</p><ul><li><p><strong>类型</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> withDirectives</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#FFAB70;">  vnode</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> VNode</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#FFAB70;">  directives</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> DirectiveArguments</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> VNode</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// [Directive, value, argument, modifiers]</span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#B392F0;"> DirectiveArguments</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> Array</span><span style="color:#E1E4E8;">&lt;</span></span>
<span class="line"><span style="color:#F97583;">  |</span><span style="color:#E1E4E8;"> [</span><span style="color:#B392F0;">Directive</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#F97583;">  |</span><span style="color:#E1E4E8;"> [</span><span style="color:#B392F0;">Directive</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#F97583;">  |</span><span style="color:#E1E4E8;"> [</span><span style="color:#B392F0;">Directive</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#F97583;">  |</span><span style="color:#E1E4E8;"> [</span><span style="color:#B392F0;">Directive</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">DirectiveModifiers</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p><strong>详细信息</strong></p><p>用自定义指令包装一个现有的 vnode。第二个参数是自定义指令数组。每个自定义指令也可以表示为 <code>[Directive, value, argument, modifiers]</code> 形式的数组。如果不需要，可以省略数组的尾元素。</p></li><li><p><strong>示例</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { h, withDirectives } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 一个自定义指令</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> pin</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  mounted</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#6A737D;">    /* ... */</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#B392F0;">  updated</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#6A737D;">    /* ... */</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// &lt;div v-pin:top.animate=&quot;200&quot;&gt;&lt;/div&gt;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> vnode</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> withDirectives</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">), [</span></span>
<span class="line"><span style="color:#E1E4E8;">  [pin, </span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;top&#39;</span><span style="color:#E1E4E8;">, { animate: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> }]</span></span>
<span class="line"><span style="color:#E1E4E8;">])</span></span></code></pre></div></li><li><p><strong>参考</strong><a href="/guide/extras/render-function.html#custom-directives">指南 - 渲染函数 - 自定义指令</a></p></li></ul><h2 id="withmodifiers" tabindex="-1">withModifiers() <a class="header-anchor" href="#withmodifiers" aria-label="Permalink to &quot;withModifiers() {#withmodifiers}&quot;">​</a></h2><p>用于向事件处理函数添加内置 <a href="/guide/essentials/event-handling.html#event-modifiers"><code>v-on</code> 修饰符</a>。</p><ul><li><p><strong>类型</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> withModifiers</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">fn</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Function</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">modifiers</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> ModifierGuardsKeys</span><span style="color:#E1E4E8;">[])</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Function</span></span></code></pre></div></li><li><p><strong>示例</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { h, withModifiers } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> vnode</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> h</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;button&#39;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#6A737D;">  // 等价于 v-on:click.stop.prevent</span></span>
<span class="line"><span style="color:#E1E4E8;">  onClick: </span><span style="color:#B392F0;">withModifiers</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    // ...</span></span>
<span class="line"><span style="color:#E1E4E8;">  }, [</span><span style="color:#9ECBFF;">&#39;stop&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;prevent&#39;</span><span style="color:#E1E4E8;">])</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre></div></li><li><p><strong>参考</strong><a href="/guide/extras/render-function.html#event-modifiers">指南 - 渲染函数 - 事件修饰符</a></p></li></ul>`,25)]))}const d=n(o,[["render",e]]);export{F as __pageData,d as default};
