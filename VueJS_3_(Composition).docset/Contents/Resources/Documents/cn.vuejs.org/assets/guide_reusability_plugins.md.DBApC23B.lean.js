import{_ as n,c as a,b as p,o as l}from"./chunks/framework.B2oIMGqn.js";const d=JSON.parse('{"title":"插件","description":"","frontmatter":{},"headers":[{"level":2,"title":"介绍","slug":"introduction","link":"#introduction","children":[]},{"level":2,"title":"编写一个插件","slug":"writing-a-plugin","link":"#writing-a-plugin","children":[{"level":3,"title":"插件中的 Provide / Inject","slug":"provide-inject-with-plugins","link":"#provide-inject-with-plugins","children":[]},{"level":3,"title":"为 NPM 打包","slug":"为-npm-打包","link":"#为-npm-打包","children":[]}]}],"relativePath":"guide/reusability/plugins.md","filePath":"guide/reusability/plugins.md"}'),o={name:"guide/reusability/plugins.md"};function e(t,s,c,i,r,E){return l(),a("div",null,s[0]||(s[0]=[p(`<h1 id="plugins" tabindex="-1">插件 <a class="header-anchor" href="#plugins" aria-label="Permalink to &quot;插件 {#plugins}&quot;">​</a></h1><h2 id="introduction" tabindex="-1">介绍 <a class="header-anchor" href="#introduction" aria-label="Permalink to &quot;介绍 {#introduction}&quot;">​</a></h2><p>插件 (Plugins) 是一种能为 Vue 添加全局功能的工具代码。下面是如何安装一个插件的示例：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { createApp } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> app</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> createApp</span><span style="color:#E1E4E8;">({})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;">(myPlugin, {</span></span>
<span class="line"><span style="color:#6A737D;">  /* 可选的选项 */</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre></div><p>一个插件可以是一个拥有 <code>install()</code> 方法的对象，也可以直接是一个安装函数本身。安装函数会接收到安装它的<a href="/api/application.html">应用实例</a>和传递给 <code>app.use()</code> 的额外选项作为参数：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> myPlugin</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  install</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">app</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">options</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6A737D;">    // 配置此应用</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>插件没有严格定义的使用范围，但是插件发挥作用的常见场景主要包括以下几种：</p><ol><li><p>通过 <a href="/api/application.html#app-component"><code>app.component()</code></a> 和 <a href="/api/application.html#app-directive"><code>app.directive()</code></a> 注册一到多个全局组件或自定义指令。</p></li><li><p>通过 <a href="/api/application.html#app-provide"><code>app.provide()</code></a> 使一个资源<a href="/guide/components/provide-inject.html">可被注入</a>进整个应用。</p></li><li><p>向 <a href="/api/application.html#app-config-globalproperties"><code>app.config.globalProperties</code></a> 中添加一些全局实例属性或方法</p></li><li><p>一个可能上述三种都包含了的功能库 (例如 <a href="https://github.com/vuejs/vue-router-next" target="_blank" rel="noreferrer">vue-router</a>)。</p></li></ol><h2 id="writing-a-plugin" tabindex="-1">编写一个插件 <a class="header-anchor" href="#writing-a-plugin" aria-label="Permalink to &quot;编写一个插件 {#writing-a-plugin}&quot;">​</a></h2><p>为了更好地理解如何构建 Vue.js 插件，我们可以试着写一个简单的 <code>i18n</code> (<a href="https://en.wikipedia.org/wiki/Internationalization_and_localization" target="_blank" rel="noreferrer">国际化 (Internationalization)</a> 的缩写) 插件。</p><p>让我们从设置插件对象开始。建议在一个单独的文件中创建并导出它，以保证更好地管理逻辑，如下所示：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// plugins/i18n.js</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  install</span><span style="color:#E1E4E8;">: (</span><span style="color:#FFAB70;">app</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">options</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    // 在这里编写插件代码</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>我们希望有一个翻译函数，这个函数接收一个以 <code>.</code> 作为分隔符的 <code>key</code> 字符串，用来在用户提供的翻译字典中查找对应语言的文本。期望的使用方式如下：</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">h1</span><span style="color:#E1E4E8;">&gt;{{ </span><span style="color:#B392F0;">$translate</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;greetings.hello&#39;</span><span style="color:#E1E4E8;">) }}&lt;/</span><span style="color:#85E89D;">h1</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>这个函数应当能够在任意模板中被全局调用。这一点可以通过在插件中将它添加到 <code>app.config.globalProperties</code> 上来实现：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// plugins/i18n.js</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  install</span><span style="color:#E1E4E8;">: (</span><span style="color:#FFAB70;">app</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">options</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line highlighted"><span style="color:#6A737D;">    // 注入一个全局可用的 $translate() 方法</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">    app.config.globalProperties.</span><span style="color:#B392F0;">$translate</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">key</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line highlighted"><span style="color:#6A737D;">      // 获取 \`options\` 对象的深层属性</span></span>
<span class="line highlighted"><span style="color:#6A737D;">      // 使用 \`key\` 作为索引</span></span>
<span class="line highlighted"><span style="color:#F97583;">      return</span><span style="color:#E1E4E8;"> key.</span><span style="color:#B392F0;">split</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;.&#39;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">reduce</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">o</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">i</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line highlighted"><span style="color:#F97583;">        if</span><span style="color:#E1E4E8;"> (o) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> o[i]</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">      }, options)</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>我们的 <code>$translate</code> 函数会接收一个例如 <code>greetings.hello</code> 的字符串，在用户提供的翻译字典中查找，并返回翻译得到的值。</p><p>用于查找的翻译字典对象则应当在插件被安装时作为 <code>app.use()</code> 的额外参数被传入：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> i18nPlugin </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;./plugins/i18n&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;">(i18nPlugin, {</span></span>
<span class="line"><span style="color:#E1E4E8;">  greetings: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    hello: </span><span style="color:#9ECBFF;">&#39;Bonjour!&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre></div><p>这样，我们一开始的表达式 <code>$translate(&#39;greetings.hello&#39;)</code> 就会在运行时被替换为 <code>Bonjour!</code> 了。</p><p>TypeScript 用户请参考：<a href="/guide/typescript/options-api.html#augmenting-global-properties">扩展全局属性</a> <sup class="vt-badge ts"></sup></p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>请谨慎使用全局属性，如果在整个应用中使用不同插件注入的太多全局属性，很容易让应用变得难以理解和维护。</p></div><h3 id="provide-inject-with-plugins" tabindex="-1">插件中的 Provide / Inject <a class="header-anchor" href="#provide-inject-with-plugins" aria-label="Permalink to &quot;插件中的 Provide / Inject {#provide-inject-with-plugins}&quot;">​</a></h3><p>在插件中，我们可以通过 <code>provide</code> 来为插件用户提供访问某个函数或属性的能力。举例来说，我们可以将插件接收到的 <code>options</code> 参数提供给整个应用，让任何组件都能使用这个翻译字典对象。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// plugins/i18n.js</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  install</span><span style="color:#E1E4E8;">: (</span><span style="color:#FFAB70;">app</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">options</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    app.</span><span style="color:#B392F0;">provide</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;i18n&#39;</span><span style="color:#E1E4E8;">, options)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>现在，插件用户就可以在他们的组件中以 <code>i18n</code> 为 key 注入并访问插件的选项对象了。</p><div class="composition-api"><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> setup</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { inject } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> i18n</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> inject</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;i18n&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(i18n.greetings.hello)</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div></div><div class="options-api"><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  inject: [</span><span style="color:#9ECBFF;">&#39;i18n&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#B392F0;">  created</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.i18n.greetings.hello)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></div><h3 id="为-npm-打包" tabindex="-1">为 NPM 打包 <a class="header-anchor" href="#为-npm-打包" aria-label="Permalink to &quot;为 NPM 打包&quot;">​</a></h3><p>如果你想进一步打包并发布插件给他人使用，请参阅 <a href="https://vitejs.dev/guide/build.html#library-mode" target="_blank" rel="noreferrer">Vite 库模式</a>。</p>`,30)]))}const g=n(o,[["render",e]]);export{d as __pageData,g as default};
