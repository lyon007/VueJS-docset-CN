import{_ as e,c as n,b as a,o as l}from"./chunks/framework.B2oIMGqn.js";const E=JSON.parse('{"title":"搭配 TypeScript 使用 Vue","description":"","frontmatter":{"outline":"deep"},"headers":[{"level":2,"title":"项目配置","slug":"project-setup","link":"#project-setup","children":[{"level":3,"title":"总览","slug":"overview","link":"#overview","children":[]},{"level":3,"title":"IDE 支持","slug":"ide-support","link":"#ide-support","children":[]},{"level":3,"title":"配置 tsconfig.json","slug":"configuring-tsconfig-json","link":"#configuring-tsconfig-json","children":[]},{"level":3,"title":"关于 Vue CLI 和 ts-loader","slug":"note-on-vue-cli-and-ts-loader","link":"#note-on-vue-cli-and-ts-loader","children":[]}]},{"level":2,"title":"常见使用说明","slug":"general-usage-notes","link":"#general-usage-notes","children":[{"level":3,"title":"defineComponent()","slug":"definecomponent","link":"#definecomponent","children":[]},{"level":3,"title":"在单文件组件中的用法","slug":"usage-in-single-file-components","link":"#usage-in-single-file-components","children":[]},{"level":3,"title":"模板中的 TypeScript","slug":"typescript-in-templates","link":"#typescript-in-templates","children":[]},{"level":3,"title":"使用 TSX","slug":"usage-with-tsx","link":"#usage-with-tsx","children":[]}]},{"level":2,"title":"泛型组件","slug":"generic-components","link":"#generic-components","children":[]},{"level":2,"title":"特定 API 的使用指南","slug":"api-specific-recipes","link":"#api-specific-recipes","children":[]}],"relativePath":"guide/typescript/overview.md","filePath":"guide/typescript/overview.md"}'),p={name:"guide/typescript/overview.md"};function t(o,s,r,c,i,d){return l(),n("div",null,s[0]||(s[0]=[a(`<h1 id="using-vue-with-typescript" tabindex="-1">搭配 TypeScript 使用 Vue <a class="header-anchor" href="#using-vue-with-typescript" aria-label="Permalink to &quot;搭配 TypeScript 使用 Vue {#using-vue-with-typescript}&quot;">​</a></h1><p>像 TypeScript 这样的类型系统可以在编译时通过静态分析检测出很多常见错误。这减少了生产环境中的运行时错误，也让我们在重构大型项目的时候更有信心。通过 IDE 中基于类型的自动补全，TypeScript 还改善了开发体验和效率。</p><p>Vue 本身就是用 TypeScript 编写的，并对 TypeScript 提供了一等公民的支持。所有的 Vue 官方库都自带了类型声明文件，开箱即用。</p><h2 id="project-setup" tabindex="-1">项目配置 <a class="header-anchor" href="#project-setup" aria-label="Permalink to &quot;项目配置 {#project-setup}&quot;">​</a></h2><p><a href="https://github.com/vuejs/create-vue" target="_blank" rel="noreferrer"><code>create-vue</code></a>，即官方的项目脚手架工具，提供了搭建基于 <a href="https://cn.vitejs.dev/" target="_blank" rel="noreferrer">Vite</a> 且 TypeScript 就绪的 Vue 项目的选项。</p><h3 id="overview" tabindex="-1">总览 <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;总览 {#overview}&quot;">​</a></h3><p>在基于 Vite 的配置中，开发服务器和打包器将只会对 TypeScript 文件执行语法转译，而不会执行任何类型检查，这保证了 Vite 开发服务器在使用 TypeScript 时也能始终保持飞快的速度。</p><ul><li><p>在开发阶段，我们推荐你依赖一个好的 <a href="#ide-support">IDE 配置</a>来获取即时的类型错误反馈。</p></li><li><p>对于单文件组件，你可以使用工具 <a href="https://github.com/vuejs/language-tools/tree/master/packages/tsc" target="_blank" rel="noreferrer"><code>vue-tsc</code></a> 在命令行检查类型和生成类型声明文件。<code>vue-tsc</code> 是对 TypeScript 自身命令行界面 <code>tsc</code> 的一个封装。它的工作方式基本和 <code>tsc</code> 一致。除了 TypeScript 文件，它还支持 Vue 的单文件组件。你可以在开启 Vite 开发服务器的同时以侦听模式运行 <code>vue-tsc</code>，或是使用 <a href="https://vite-plugin-checker.netlify.app/" target="_blank" rel="noreferrer">vite-plugin-checker</a> 这样在另一个 worker 线程里做静态检查的插件。</p></li><li><p>Vue CLI 也提供了对 TypeScript 的支持，但是已经不推荐了。详见<a href="#note-on-vue-cli-and-ts-loader">下方的说明</a>。</p></li></ul><h3 id="ide-support" tabindex="-1">IDE 支持 <a class="header-anchor" href="#ide-support" aria-label="Permalink to &quot;IDE 支持 {#ide-support}&quot;">​</a></h3><ul><li><p>强烈推荐 <a href="https://code.visualstudio.com/" target="_blank" rel="noreferrer">Visual Studio Code</a> (VS Code)，因为它对 TypeScript 有着很好的内置支持。</p><ul><li><p><a href="https://marketplace.visualstudio.com/items?itemName=Vue.volar" target="_blank" rel="noreferrer">Vue - Official</a> (之前是 Volar) 是官方的 VS Code 扩展，提供了 Vue 单文件组件中的 TypeScript 支持，还伴随着一些其他非常棒的特性。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Vue - Official 扩展取代了我们之前为 Vue 2 提供的官方 VS Code 扩展 <a href="https://marketplace.visualstudio.com/items?itemName=octref.vetur" target="_blank" rel="noreferrer">Vetur</a>。如果你之前已经安装了 Vetur，请确保在 Vue 3 的项目中禁用它。</p></div></li></ul></li><li><p><a href="https://www.jetbrains.com/webstorm/" target="_blank" rel="noreferrer">WebStorm</a> 对 TypeScript 和 Vue 也都提供了开箱即用的支持。其他的 JetBrains IDE 也同样可以通过一个<a href="https://plugins.jetbrains.com/plugin/9442-vue-js" target="_blank" rel="noreferrer">免费插件</a>支持。从 2023.2 版开始，WebStorm 和 Vue 插件内置了对 Vue 语言服务器的支持。你可以在设置 &gt; 语言和框架 &gt; TypeScript &gt; Vue 下将 Vue 服务设置为在所有 TypeScript 版本上使用 Volar 集成。默认情况下，Volar 将用于 TypeScript 5.0 及更高版本。</p></li></ul><h3 id="configuring-tsconfig-json" tabindex="-1">配置 <code>tsconfig.json</code> <a class="header-anchor" href="#configuring-tsconfig-json" aria-label="Permalink to &quot;配置 \`tsconfig.json\` {#configuring-tsconfig-json}&quot;">​</a></h3><p>通过 <code>create-vue</code> 搭建的项目包含了预先配置好的 <code>tsconfig.json</code>。其底层配置抽象于 <a href="https://github.com/vuejs/tsconfig" target="_blank" rel="noreferrer"><code>@vue/tsconfig</code></a> 包中。在项目内我们使用 <a href="https://www.typescriptlang.org/docs/handbook/project-references.html" target="_blank" rel="noreferrer">Project References</a> 来确保运行在不同环境下的代码的类型正确 (比如应用代码和测试代码应该有不同的全局变量)。</p><p>手动配置 <code>tsconfig.json</code> 时，请留意以下选项：</p><ul><li><p><a href="https://www.typescriptlang.org/tsconfig#isolatedModules" target="_blank" rel="noreferrer"><code>compilerOptions.isolatedModules</code></a> 应当设置为 <code>true</code>，因为 Vite 使用 <a href="https://esbuild.github.io/" target="_blank" rel="noreferrer">esbuild</a> 来转译 TypeScript，并受限于单文件转译的限制。<a href="https://www.typescriptlang.org/tsconfig#verbatimModuleSyntax" target="_blank" rel="noreferrer"><code>compilerOptions.verbatimModuleSyntax</code></a> 是 <a href="https://github.com/microsoft/TypeScript/issues/53601" target="_blank" rel="noreferrer"><code>isolatedModules</code> 的一个超集</a>且也是一个不错的选择——它正是 <a href="https://github.com/vuejs/tsconfig" target="_blank" rel="noreferrer"><code>@vue/tsconfig</code></a> 所使用的。</p></li><li><p>如果你正在使用选项式 API，需要将 <a href="https://www.typescriptlang.org/tsconfig#strict" target="_blank" rel="noreferrer"><code>compilerOptions.strict</code></a> 设置为 <code>true</code> (或者至少开启 <a href="https://www.typescriptlang.org/tsconfig#noImplicitThis" target="_blank" rel="noreferrer"><code>compilerOptions.noImplicitThis</code></a>，它是 <code>strict</code> 模式的一部分)，才可以获得对组件选项中 <code>this</code> 的类型检查。否则 <code>this</code> 会被认为是 <code>any</code>。</p></li><li><p>如果你在构建工具中配置了路径解析别名，例如 <code>@/*</code> 这个别名被默认配置在了 <code>create-vue</code> 项目中，你需要通过 <a href="https://www.typescriptlang.org/tsconfig#paths" target="_blank" rel="noreferrer"><code>compilerOptions.paths</code></a> 选项为 TypeScript 再配置一遍。</p></li><li><p>如果你打算在 Vue 中使用 TSX，请将 <a href="https://www.typescriptlang.org/tsconfig#jsx" target="_blank" rel="noreferrer"><code>compilerOptions.jsx</code></a> 设置为 <code>&quot;preserve&quot;</code>，并将 <a href="https://www.typescriptlang.org/tsconfig#jsxImportSource" target="_blank" rel="noreferrer"><code>compilerOptions.jsxImportSource</code></a> 设置为 <code>&quot;vue&quot;</code>。</p></li></ul><p>参考：</p><ul><li><a href="https://www.typescriptlang.org/docs/handbook/compiler-options.html" target="_blank" rel="noreferrer">官方 TypeScript 编译选项文档</a></li><li><a href="https://esbuild.github.io/content-types/#typescript-caveats" target="_blank" rel="noreferrer">esbuild TypeScript 编译注意事项</a></li></ul><h3 id="note-on-vue-cli-and-ts-loader" tabindex="-1">关于 Vue CLI 和 <code>ts-loader</code> <a class="header-anchor" href="#note-on-vue-cli-and-ts-loader" aria-label="Permalink to &quot;关于 Vue CLI 和 \`ts-loader\` {#note-on-vue-cli-and-ts-loader}&quot;">​</a></h3><p>像 Vue CLI 这样的基于 webpack 搭建的项目，通常是在模块编译的过程中顺道执行类型检查，例如使用 <code>ts-loader</code>。然而这并不是一个理想的解决方案，因为类型系统需要了解整个模块关系才能执行类型检查。loader 中只适合单个模块的编译，并不适合做需要全局信息的工作。这导致了下面的问题：</p><ul><li><p><code>ts-loader</code> 只能对在它之前的 loader 编译转换后的代码执行类型检查，这和我们在 IDE 或 <code>vue-tsc</code> 中看到的基于源代码的错误提示并不一致。</p></li><li><p>类型检查可能会很慢。当它和代码转换在相同的线程/进程中执行时，它会显著影响整个应用的构建速度。</p></li><li><p>我们已经在 IDE 中通过单独的进程运行着类型检查了，却还要在构建流程中执行类型检查导致降低开发体验，这似乎不太划算。</p></li></ul><p>如果你正通过 Vue CLI 使用 Vue 3 和 TypeScript，我们强烈建议你迁移到 Vite。我们也在为 CLI 开发仅执行 TS 语法转译的选项，以允许你切换至 <code>vue-tsc</code> 来执行类型检查。</p><h2 id="general-usage-notes" tabindex="-1">常见使用说明 <a class="header-anchor" href="#general-usage-notes" aria-label="Permalink to &quot;常见使用说明 {#general-usage-notes}&quot;">​</a></h2><h3 id="definecomponent" tabindex="-1"><code>defineComponent()</code> <a class="header-anchor" href="#definecomponent" aria-label="Permalink to &quot;\`defineComponent()\` {#definecomponent}&quot;">​</a></h3><p>为了让 TypeScript 正确地推导出组件选项内的类型，我们需要通过 <a href="/api/general.html#definecomponent"><code>defineComponent()</code></a> 这个全局 API 来定义组件：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { defineComponent } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#B392F0;"> defineComponent</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#6A737D;">  // 启用了类型推导</span></span>
<span class="line"><span style="color:#E1E4E8;">  props: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    name: String,</span></span>
<span class="line"><span style="color:#E1E4E8;">    msg: { type: String, required: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#B392F0;">  data</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">    return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      count: </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#B392F0;">  mounted</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#79B8FF;">    this</span><span style="color:#E1E4E8;">.name </span><span style="color:#6A737D;">// 类型：string | undefined</span></span>
<span class="line"><span style="color:#79B8FF;">    this</span><span style="color:#E1E4E8;">.msg </span><span style="color:#6A737D;">// 类型：string</span></span>
<span class="line"><span style="color:#79B8FF;">    this</span><span style="color:#E1E4E8;">.count </span><span style="color:#6A737D;">// 类型：number</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre></div><p>当没有结合 <code>&lt;script setup&gt;</code> 使用组合式 API 时，<code>defineComponent()</code> 也支持对传递给 <code>setup()</code> 的 prop 的推导：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { defineComponent } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#B392F0;"> defineComponent</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#6A737D;">  // 启用了类型推导</span></span>
<span class="line"><span style="color:#E1E4E8;">  props: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    message: String</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#B392F0;">  setup</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">props</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    props.message </span><span style="color:#6A737D;">// 类型：string | undefined</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre></div><p>参考：</p><ul><li><a href="/api/general.html#note-on-webpack-treeshaking">webpack Treeshaking 的注意事项</a></li><li><a href="https://github.com/vuejs/core/blob/main/packages-private/dts-test/defineComponent.test-d.tsx" target="_blank" rel="noreferrer">对 <code>defineComponent</code> 的类型测试</a></li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>defineComponent()</code> 也支持对纯 JavaScript 编写的组件进行类型推导。</p></div><h3 id="usage-in-single-file-components" tabindex="-1">在单文件组件中的用法 <a class="header-anchor" href="#usage-in-single-file-components" aria-label="Permalink to &quot;在单文件组件中的用法 {#usage-in-single-file-components}&quot;">​</a></h3><p>要在单文件组件中使用 TypeScript，需要在 <code>&lt;script&gt;</code> 标签上加上 <code>lang=&quot;ts&quot;</code> 的 attribute。当 <code>lang=&quot;ts&quot;</code> 存在时，所有的模板内表达式都将享受到更严格的类型检查。</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> lang</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;ts&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { defineComponent } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#B392F0;"> defineComponent</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#B392F0;">  data</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">    return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      count: </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">  &lt;!-- 启用了类型检查和自动补全 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  {{ count.toFixed(2) }}</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p><code>lang=&quot;ts&quot;</code> 也可以用于 <code>&lt;script setup&gt;</code>：</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> setup</span><span style="color:#B392F0;"> lang</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;ts&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">// 启用了 TypeScript</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { ref } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> count</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">  &lt;!-- 启用了类型检查和自动补全 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  {{ count.toFixed(2) }}</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="typescript-in-templates" tabindex="-1">模板中的 TypeScript <a class="header-anchor" href="#typescript-in-templates" aria-label="Permalink to &quot;模板中的 TypeScript {#typescript-in-templates}&quot;">​</a></h3><p>在使用了 <code>&lt;script lang=&quot;ts&quot;&gt;</code> 或 <code>&lt;script setup lang=&quot;ts&quot;&gt;</code> 后，<code>&lt;template&gt;</code> 在绑定表达式中也支持 TypeScript。这对需要在模板表达式中执行类型转换的情况下非常有用。</p><p>这里有一个假想的例子：</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> setup</span><span style="color:#B392F0;"> lang</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;ts&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> x</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span><span style="color:#F97583;"> |</span><span style="color:#79B8FF;"> number</span><span style="color:#F97583;"> =</span><span style="color:#79B8FF;"> 1</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">  &lt;!-- 出错，因为 x 可能是字符串 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  {{ x.toFixed(2) }}</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>可以使用内联类型强制转换解决此问题：</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> setup</span><span style="color:#B392F0;"> lang</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;ts&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> x</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span><span style="color:#F97583;"> |</span><span style="color:#79B8FF;"> number</span><span style="color:#F97583;"> =</span><span style="color:#79B8FF;"> 1</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">  {{ (x as number).toFixed(2) }}</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>如果正在使用 Vue CLI 或基于 webpack 的配置，支持模板内表达式的 TypeScript 需要 <code>vue-loader@^16.8.0</code>。</p></div><h3 id="usage-with-tsx" tabindex="-1">使用 TSX <a class="header-anchor" href="#usage-with-tsx" aria-label="Permalink to &quot;使用 TSX {#usage-with-tsx}&quot;">​</a></h3><p>Vue 也支持使用 JSX / TSX 编写组件。详情请查阅<a href="/guide/extras/render-function.html#jsx-tsx">渲染函数 &amp; JSX</a>。</p><h2 id="generic-components" tabindex="-1">泛型组件 <a class="header-anchor" href="#generic-components" aria-label="Permalink to &quot;泛型组件 {#generic-components}&quot;">​</a></h2><p>泛型组件支持两种使用方式：</p><ul><li>在单文件组件中：<a href="/api/sfc-script-setup.html#generics">在 <code>&lt;script setup&gt;</code> 上使用 <code>generic</code> 属性</a></li><li>渲染函数 / JSX 组件：<a href="/api/general.html#function-signature"><code>defineComponent()</code> 的函数签名</a></li></ul><h2 id="api-specific-recipes" tabindex="-1">特定 API 的使用指南 <a class="header-anchor" href="#api-specific-recipes" aria-label="Permalink to &quot;特定 API 的使用指南 {#api-specific-recipes}&quot;">​</a></h2><ul><li><a href="./composition-api.html">TS 与组合式 API</a></li><li><a href="./options-api.html">TS 与选项式 API</a></li></ul>`,48)]))}const y=e(p,[["render",t]]);export{E as __pageData,y as default};
