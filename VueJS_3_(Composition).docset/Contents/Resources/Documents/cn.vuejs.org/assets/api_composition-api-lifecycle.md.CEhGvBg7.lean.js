import{_ as n,c as a,b as l,o}from"./chunks/framework.B2oIMGqn.js";const d=JSON.parse('{"title":"组合式 API：生命周期钩子","description":"","frontmatter":{},"headers":[{"level":2,"title":"onMounted()","slug":"onmounted","link":"#onmounted","children":[]},{"level":2,"title":"onUpdated()","slug":"onupdated","link":"#onupdated","children":[]},{"level":2,"title":"onUnmounted()","slug":"onunmounted","link":"#onunmounted","children":[]},{"level":2,"title":"onBeforeMount()","slug":"onbeforemount","link":"#onbeforemount","children":[]},{"level":2,"title":"onBeforeUpdate()","slug":"onbeforeupdate","link":"#onbeforeupdate","children":[]},{"level":2,"title":"onBeforeUnmount()","slug":"onbeforeunmount","link":"#onbeforeunmount","children":[]},{"level":2,"title":"onErrorCaptured()","slug":"onerrorcaptured","link":"#onerrorcaptured","children":[]},{"level":2,"title":"onRenderTracked()","slug":"onrendertracked","link":"#onrendertracked","children":[]},{"level":2,"title":"onRenderTriggered()","slug":"onrendertriggered","link":"#onrendertriggered","children":[]},{"level":2,"title":"onActivated()","slug":"onactivated","link":"#onactivated","children":[]},{"level":2,"title":"onDeactivated()","slug":"ondeactivated","link":"#ondeactivated","children":[]},{"level":2,"title":"onServerPrefetch()","slug":"onserverprefetch","link":"#onserverprefetch","children":[]}],"relativePath":"api/composition-api-lifecycle.md","filePath":"api/composition-api-lifecycle.md"}'),p={name:"api/composition-api-lifecycle.md"};function e(t,s,r,c,i,y){return o(),a("div",null,s[0]||(s[0]=[l(`<h1 id="composition-api-lifecycle-hooks" tabindex="-1">组合式 API：生命周期钩子 <a class="header-anchor" href="#composition-api-lifecycle-hooks" aria-label="Permalink to &quot;组合式 API：生命周期钩子 {#composition-api-lifecycle-hooks}&quot;">​</a></h1><div class="info custom-block"><p class="custom-block-title">使用方式注意</p><p>所有罗列在本页的 API 都应该在组件的 <code>setup()</code> 阶段被同步调用。相关细节请看<a href="/guide/essentials/lifecycle.html">指南 - 生命周期钩子</a>。</p></div><h2 id="onmounted" tabindex="-1">onMounted() <a class="header-anchor" href="#onmounted" aria-label="Permalink to &quot;onMounted() {#onmounted}&quot;">​</a></h2><p>注册一个回调函数，在组件挂载完成后执行。</p><ul><li><p><strong>类型</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> onMounted</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">callback</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#79B8FF;"> void</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">target</span><span style="color:#F97583;">?:</span><span style="color:#B392F0;"> ComponentInternalInstance</span><span style="color:#F97583;"> |</span><span style="color:#79B8FF;"> null</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> void</span></span></code></pre></div></li><li><p><strong>详细信息</strong></p><p>组件在以下情况下被视为已挂载：</p><ul><li><p>其所有同步子组件都已经被挂载 (不包含异步组件或 <code>&lt;Suspense&gt;</code> 树内的组件)。</p></li><li><p>其自身的 DOM 树已经创建完成并插入了父容器中。注意仅当根容器在文档中时，才可以保证组件 DOM 树也在文档中。</p></li></ul><p>这个钩子通常用于执行需要访问组件所渲染的 DOM 树相关的副作用，或是在<a href="/guide/scaling-up/ssr.html">服务端渲染应用</a>中用于确保 DOM 相关代码仅在客户端执行。</p><p><strong>这个钩子在服务器端渲染期间不会被调用。</strong></p></li><li><p><strong>示例</strong></p><p>通过模板引用访问一个元素：</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> setup</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { ref, onMounted } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> el</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">onMounted</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  el.value </span><span style="color:#6A737D;">// &lt;div&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">div</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;el&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div></li></ul><h2 id="onupdated" tabindex="-1">onUpdated() <a class="header-anchor" href="#onupdated" aria-label="Permalink to &quot;onUpdated() {#onupdated}&quot;">​</a></h2><p>注册一个回调函数，在组件因为响应式状态变更而更新其 DOM 树之后调用。</p><ul><li><p><strong>类型</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> onUpdated</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">callback</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#79B8FF;"> void</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">target</span><span style="color:#F97583;">?:</span><span style="color:#B392F0;"> ComponentInternalInstance</span><span style="color:#F97583;"> |</span><span style="color:#79B8FF;"> null</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> void</span></span></code></pre></div></li><li><p><strong>详细信息</strong></p><p>父组件的更新钩子将在其子组件的更新钩子之后调用。</p><p>这个钩子会在组件的任意 DOM 更新后被调用，这些更新可能是由不同的状态变更导致的，因为多个状态变更可以在同一个渲染周期中批量执行 (考虑到性能因素)。如果你需要在某个特定的状态更改后访问更新后的 DOM，请使用 <a href="/api/general.html#nexttick">nextTick()</a> 作为替代。</p><p><strong>这个钩子在服务器端渲染期间不会被调用。</strong></p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>不要在 updated 钩子中更改组件的状态，这可能会导致无限的更新循环！</p></div></li><li><p><strong>示例</strong></p><p>访问更新后的 DOM</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> setup</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { ref, onUpdated } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> count</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">onUpdated</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">  // 文本内容应该与当前的 \`count.value\` 一致</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;count&#39;</span><span style="color:#E1E4E8;">).textContent)</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">button</span><span style="color:#B392F0;"> id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;count&quot;</span><span style="color:#B392F0;"> @click</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;count++&quot;</span><span style="color:#E1E4E8;">&gt;{{ count }}&lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div></li></ul><h2 id="onunmounted" tabindex="-1">onUnmounted() <a class="header-anchor" href="#onunmounted" aria-label="Permalink to &quot;onUnmounted() {#onunmounted}&quot;">​</a></h2><p>注册一个回调函数，在组件实例被卸载之后调用。</p><ul><li><p><strong>类型</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> onUnmounted</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">callback</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#79B8FF;"> void</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">target</span><span style="color:#F97583;">?:</span><span style="color:#B392F0;"> ComponentInternalInstance</span><span style="color:#F97583;"> |</span><span style="color:#79B8FF;"> null</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> void</span></span></code></pre></div></li><li><p><strong>详细信息</strong></p><p>一个组件在以下情况下被视为已卸载：</p><ul><li><p>其所有子组件都已经被卸载。</p></li><li><p>所有相关的响应式作用 (渲染作用以及 <code>setup()</code> 时创建的计算属性和侦听器) 都已经停止。</p></li></ul><p>可以在这个钩子中手动清理一些副作用，例如计时器、DOM 事件监听器或者与服务器的连接。</p><p><strong>这个钩子在服务器端渲染期间不会被调用。</strong></p></li><li><p><strong>示例</strong></p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> setup</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { onMounted, onUnmounted } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> intervalId</span></span>
<span class="line"><span style="color:#B392F0;">onMounted</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  intervalId </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> setInterval</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    // ...</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">onUnmounted</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> clearInterval</span><span style="color:#E1E4E8;">(intervalId))</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div></li></ul><h2 id="onbeforemount" tabindex="-1">onBeforeMount() <a class="header-anchor" href="#onbeforemount" aria-label="Permalink to &quot;onBeforeMount() {#onbeforemount}&quot;">​</a></h2><p>注册一个钩子，在组件被挂载之前被调用。</p><ul><li><p><strong>类型</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> onBeforeMount</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">callback</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#79B8FF;"> void</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">target</span><span style="color:#F97583;">?:</span><span style="color:#B392F0;"> ComponentInternalInstance</span><span style="color:#F97583;"> |</span><span style="color:#79B8FF;"> null</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> void</span></span></code></pre></div></li><li><p><strong>详细信息</strong></p><p>当这个钩子被调用时，组件已经完成了其响应式状态的设置，但还没有创建 DOM 节点。它即将首次执行 DOM 渲染过程。</p><p><strong>这个钩子在服务器端渲染期间不会被调用。</strong></p></li></ul><h2 id="onbeforeupdate" tabindex="-1">onBeforeUpdate() <a class="header-anchor" href="#onbeforeupdate" aria-label="Permalink to &quot;onBeforeUpdate() {#onbeforeupdate}&quot;">​</a></h2><p>注册一个钩子，在组件即将因为响应式状态变更而更新其 DOM 树之前调用。</p><ul><li><p><strong>类型</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> onBeforeUpdate</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">callback</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#79B8FF;"> void</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">target</span><span style="color:#F97583;">?:</span><span style="color:#B392F0;"> ComponentInternalInstance</span><span style="color:#F97583;"> |</span><span style="color:#79B8FF;"> null</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> void</span></span></code></pre></div></li><li><p><strong>详细信息</strong></p><p>这个钩子可以用来在 Vue 更新 DOM 之前访问 DOM 状态。在这个钩子中更改状态也是安全的。</p><p><strong>这个钩子在服务器端渲染期间不会被调用。</strong></p></li></ul><h2 id="onbeforeunmount" tabindex="-1">onBeforeUnmount() <a class="header-anchor" href="#onbeforeunmount" aria-label="Permalink to &quot;onBeforeUnmount() {#onbeforeunmount}&quot;">​</a></h2><p>注册一个钩子，在组件实例被卸载之前调用。</p><ul><li><p><strong>类型</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> onBeforeUnmount</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">callback</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#79B8FF;"> void</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">target</span><span style="color:#F97583;">?:</span><span style="color:#B392F0;"> ComponentInternalInstance</span><span style="color:#F97583;"> |</span><span style="color:#79B8FF;"> null</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> void</span></span></code></pre></div></li><li><p><strong>详细信息</strong></p><p>当这个钩子被调用时，组件实例依然还保有全部的功能。</p><p><strong>这个钩子在服务器端渲染期间不会被调用。</strong></p></li></ul><h2 id="onerrorcaptured" tabindex="-1">onErrorCaptured() <a class="header-anchor" href="#onerrorcaptured" aria-label="Permalink to &quot;onErrorCaptured() {#onerrorcaptured}&quot;">​</a></h2><p>注册一个钩子，在捕获了后代组件传递的错误时调用。</p><ul><li><p><strong>类型</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> onErrorCaptured</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">callback</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> ErrorCapturedHook</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> void</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#B392F0;"> ErrorCapturedHook</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#FFAB70;">  err</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> unknown</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#FFAB70;">  instance</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> ComponentPublicInstance</span><span style="color:#F97583;"> |</span><span style="color:#79B8FF;"> null</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#FFAB70;">  info</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span></span>
<span class="line"><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#79B8FF;"> boolean</span><span style="color:#F97583;"> |</span><span style="color:#79B8FF;"> void</span></span></code></pre></div></li><li><p><strong>详细信息</strong></p><p>错误可以从以下几个来源中捕获：</p><ul><li>组件渲染</li><li>事件处理器</li><li>生命周期钩子</li><li><code>setup()</code> 函数</li><li>侦听器</li><li>自定义指令钩子</li><li>过渡钩子</li></ul><p>这个钩子带有三个实参：错误对象、触发该错误的组件实例，以及一个说明错误来源类型的信息字符串。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>在生产环境中，第三个参数 (<code>info</code>) 是一个缩短的代码，而不是含有完整信息的字符串。错误代码和字符串的映射可以参阅<a href="/error-reference/#runtime-errors">生产环境错误代码参考</a>。</p></div><p>你可以在 <code>errorCaptured()</code> 中更改组件状态来为用户显示一个错误状态。注意不要让错误状态再次渲染导致本次错误的内容，否则组件会陷入无限循环。</p><p>这个钩子可以通过返回 <code>false</code> 来阻止错误继续向上传递。请看下方的传递细节介绍。</p><p><strong>错误传递规则</strong></p><ul><li><p>默认情况下，所有的错误都会被发送到应用级的 <a href="/api/application.html#app-config-errorhandler"><code>app.config.errorHandler</code></a> (前提是这个函数已经定义)，这样这些错误都能在一个统一的地方报告给分析服务。</p></li><li><p>如果组件的继承链或组件链上存在多个 <code>errorCaptured</code> 钩子，对于同一个错误，这些钩子会被按从底至上的顺序一一调用。这个过程被称为“向上传递”，类似于原生 DOM 事件的冒泡机制。</p></li><li><p>如果 <code>errorCaptured</code> 钩子本身抛出了一个错误，那么这个错误和原来捕获到的错误都将被发送到 <code>app.config.errorHandler</code>。</p></li><li><p><code>errorCaptured</code> 钩子可以通过返回 <code>false</code> 来阻止错误继续向上传递。即表示“这个错误已经被处理了，应当被忽略”，它将阻止其他的 <code>errorCaptured</code> 钩子或 <code>app.config.errorHandler</code> 因这个错误而被调用。</p></li></ul></li></ul><h2 id="onrendertracked" tabindex="-1">onRenderTracked() <sup class="vt-badge dev-only"></sup> <a class="header-anchor" href="#onrendertracked" aria-label="Permalink to &quot;onRenderTracked() &lt;sup class=&quot;vt-badge dev-only&quot; /&gt; {#onrendertracked}&quot;">​</a></h2><p>注册一个调试钩子，当组件渲染过程中追踪到响应式依赖时调用。</p><p><strong>这个钩子仅在开发模式下可用，且在服务器端渲染期间不会被调用。</strong></p><ul><li><p><strong>类型</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> onRenderTracked</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">callback</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> DebuggerHook</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> void</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#B392F0;"> DebuggerHook</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">e</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> DebuggerEvent</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#79B8FF;"> void</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#B392F0;"> DebuggerEvent</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#FFAB70;">  effect</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> ReactiveEffect</span></span>
<span class="line"><span style="color:#FFAB70;">  target</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> object</span></span>
<span class="line"><span style="color:#FFAB70;">  type</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> TrackOpTypes</span><span style="color:#6A737D;"> /* &#39;get&#39; | &#39;has&#39; | &#39;iterate&#39; */</span></span>
<span class="line"><span style="color:#FFAB70;">  key</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> any</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>参考</strong><a href="/guide/extras/reactivity-in-depth.html">深入响应式系统</a></p></li></ul><h2 id="onrendertriggered" tabindex="-1">onRenderTriggered() <sup class="vt-badge dev-only"></sup> <a class="header-anchor" href="#onrendertriggered" aria-label="Permalink to &quot;onRenderTriggered() &lt;sup class=&quot;vt-badge dev-only&quot; /&gt; {#onrendertriggered}&quot;">​</a></h2><p>注册一个调试钩子，当响应式依赖的变更触发了组件渲染时调用。</p><p><strong>这个钩子仅在开发模式下可用，且在服务器端渲染期间不会被调用。</strong></p><ul><li><p><strong>类型</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> onRenderTriggered</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">callback</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> DebuggerHook</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> void</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#B392F0;"> DebuggerHook</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">e</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> DebuggerEvent</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#79B8FF;"> void</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#B392F0;"> DebuggerEvent</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#FFAB70;">  effect</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> ReactiveEffect</span></span>
<span class="line"><span style="color:#FFAB70;">  target</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> object</span></span>
<span class="line"><span style="color:#FFAB70;">  type</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> TriggerOpTypes</span><span style="color:#6A737D;"> /* &#39;set&#39; | &#39;add&#39; | &#39;delete&#39; | &#39;clear&#39; */</span></span>
<span class="line"><span style="color:#FFAB70;">  key</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> any</span></span>
<span class="line"><span style="color:#FFAB70;">  newValue</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> any</span></span>
<span class="line"><span style="color:#FFAB70;">  oldValue</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> any</span></span>
<span class="line"><span style="color:#FFAB70;">  oldTarget</span><span style="color:#F97583;">?:</span><span style="color:#B392F0;"> Map</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">|</span><span style="color:#B392F0;"> Set</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>参考</strong><a href="/guide/extras/reactivity-in-depth.html">深入响应式系统</a></p></li></ul><h2 id="onactivated" tabindex="-1">onActivated() <a class="header-anchor" href="#onactivated" aria-label="Permalink to &quot;onActivated() {#onactivated}&quot;">​</a></h2><p>注册一个回调函数，若组件实例是 <a href="/api/built-in-components.html#keepalive"><code>&lt;KeepAlive&gt;</code></a> 缓存树的一部分，当组件被插入到 DOM 中时调用。</p><p><strong>这个钩子在服务器端渲染期间不会被调用。</strong></p><ul><li><p><strong>类型</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> onActivated</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">callback</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#79B8FF;"> void</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">target</span><span style="color:#F97583;">?:</span><span style="color:#B392F0;"> ComponentInternalInstance</span><span style="color:#F97583;"> |</span><span style="color:#79B8FF;"> null</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> void</span></span></code></pre></div></li><li><p><strong>参考</strong><a href="/guide/built-ins/keep-alive.html#lifecycle-of-cached-instance">指南 - 缓存实例的生命周期</a></p></li></ul><h2 id="ondeactivated" tabindex="-1">onDeactivated() <a class="header-anchor" href="#ondeactivated" aria-label="Permalink to &quot;onDeactivated() {#ondeactivated}&quot;">​</a></h2><p>注册一个回调函数，若组件实例是 <a href="/api/built-in-components.html#keepalive"><code>&lt;KeepAlive&gt;</code></a> 缓存树的一部分，当组件从 DOM 中被移除时调用。</p><p><strong>这个钩子在服务器端渲染期间不会被调用。</strong></p><ul><li><p><strong>类型</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> onDeactivated</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">callback</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#79B8FF;"> void</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">target</span><span style="color:#F97583;">?:</span><span style="color:#B392F0;"> ComponentInternalInstance</span><span style="color:#F97583;"> |</span><span style="color:#79B8FF;"> null</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> void</span></span></code></pre></div></li><li><p><strong>参考</strong><a href="/guide/built-ins/keep-alive.html#lifecycle-of-cached-instance">指南 - 缓存实例的生命周期</a></p></li></ul><h2 id="onserverprefetch" tabindex="-1">onServerPrefetch() <sup class="vt-badge" data-text="SSR only"></sup> <a class="header-anchor" href="#onserverprefetch" aria-label="Permalink to &quot;onServerPrefetch() &lt;sup class=&quot;vt-badge&quot; data-text=&quot;SSR only&quot; /&gt; {#onserverprefetch}&quot;">​</a></h2><p>注册一个异步函数，在组件实例在服务器上被渲染之前调用。</p><ul><li><p><strong>类型</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> onServerPrefetch</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">callback</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> Promise</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">&gt;)</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> void</span></span></code></pre></div></li><li><p><strong>详细信息</strong></p><p>如果这个钩子返回了一个 Promise，服务端渲染会在渲染该组件前等待该 Promise 完成。</p><p>这个钩子仅会在服务端渲染中执行，可以用于执行一些仅存在于服务端的数据抓取过程。</p></li><li><p><strong>示例</strong></p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> setup</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { ref, onServerPrefetch, onMounted } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> data</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">onServerPrefetch</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">  // 组件作为初始请求的一部分被渲染</span></span>
<span class="line"><span style="color:#6A737D;">  // 在服务器上预抓取数据，因为它比在客户端上更快。</span></span>
<span class="line"><span style="color:#E1E4E8;">  data.value </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> await</span><span style="color:#B392F0;"> fetchOnServer</span><span style="color:#E1E4E8;">(</span><span style="color:#6A737D;">/* ... */</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">onMounted</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">  if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">data.value) {</span></span>
<span class="line"><span style="color:#6A737D;">    // 如果数据在挂载时为空值，这意味着该组件</span></span>
<span class="line"><span style="color:#6A737D;">    // 是在客户端动态渲染的。将转而执行</span></span>
<span class="line"><span style="color:#6A737D;">    // 另一个客户端侧的抓取请求</span></span>
<span class="line"><span style="color:#E1E4E8;">    data.value </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> await</span><span style="color:#B392F0;"> fetchOnClient</span><span style="color:#E1E4E8;">(</span><span style="color:#6A737D;">/* ... */</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p><strong>参考</strong><a href="/guide/scaling-up/ssr.html">服务端渲染</a></p></li></ul>`,42)]))}const F=n(p,[["render",e]]);export{d as __pageData,F as default};
