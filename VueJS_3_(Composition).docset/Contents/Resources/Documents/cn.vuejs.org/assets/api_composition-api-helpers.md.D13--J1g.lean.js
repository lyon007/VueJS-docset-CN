import{_ as a,c as n,b as l,o as p}from"./chunks/framework.B2oIMGqn.js";const d=JSON.parse('{"title":"组合式 API：辅助","description":"","frontmatter":{},"headers":[{"level":2,"title":"useAttrs()","slug":"useattrs","link":"#useattrs","children":[]},{"level":2,"title":"useSlots()","slug":"useslots","link":"#useslots","children":[]},{"level":2,"title":"useModel()","slug":"usemodel","link":"#usemodel","children":[]},{"level":2,"title":"useTemplateRef()","slug":"usetemplateref","link":"#usetemplateref","children":[]},{"level":2,"title":"useId()","slug":"useid","link":"#useid","children":[]}],"relativePath":"api/composition-api-helpers.md","filePath":"api/composition-api-helpers.md"}'),o={name:"api/composition-api-helpers.md"};function e(t,s,c,r,E,i){return p(),n("div",null,s[0]||(s[0]=[l(`<h1 id="composition-api-helpers" tabindex="-1">组合式 API：辅助 <a class="header-anchor" href="#composition-api-helpers" aria-label="Permalink to &quot;组合式 API：辅助 {#composition-api-helpers}&quot;">​</a></h1><h2 id="useattrs" tabindex="-1">useAttrs() <a class="header-anchor" href="#useattrs" aria-label="Permalink to &quot;useAttrs() {#useattrs}&quot;">​</a></h2><p>从 <a href="/api/composition-api-setup.html#setup-context">Setup 上下文</a>中返回 <code>attrs</code> 对象，其中包含当前组件的<a href="/guide/components/attrs.html#fallthrough-attributes">透传 attributes</a>。这是用于 <code>&lt;script setup&gt;</code> 中的，因为在 <code>&lt;script setup&gt;</code> 中无法获取 setup 上下文对象的。</p><ul><li><p><strong>类型</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> useAttrs</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Record</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">unknown</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div></li></ul><h2 id="useslots" tabindex="-1">useSlots() <a class="header-anchor" href="#useslots" aria-label="Permalink to &quot;useSlots() {#useslots}&quot;">​</a></h2><p>从 <a href="/api/composition-api-setup.html#setup-context">Setup 上下文</a>中返回 <code>slots</code> 对象，其中包含父组件传递的插槽。这些插槽为可调用的函数，返回虚拟 DOM 节点。这是用于 <code>&lt;script setup&gt;</code> 中的，因为在 <code>&lt;script setup&gt;</code> 中无法获取 setup 上下文对象的。</p><p>如果使用 TypeScript，建议优先使用 <a href="/api/sfc-script-setup.html#defineslots"><code>defineSlots()</code></a>。</p><ul><li><p><strong>类型</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> useSlots</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Record</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">, (</span><span style="color:#F97583;">...</span><span style="color:#FFAB70;">args</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> any</span><span style="color:#E1E4E8;">[]) </span><span style="color:#F97583;">=&gt;</span><span style="color:#B392F0;"> VNode</span><span style="color:#E1E4E8;">[]&gt;</span></span></code></pre></div></li></ul><h2 id="usemodel" tabindex="-1">useModel() <a class="header-anchor" href="#usemodel" aria-label="Permalink to &quot;useModel() {#usemodel}&quot;">​</a></h2><p>这是驱动 <a href="/api/sfc-script-setup.html#definemodel"><code>defineModel()</code></a> 的底层辅助函数。如果使用 <code>&lt;script setup&gt;</code>，应当优先使用 <code>defineModel()</code>。</p><ul><li><p>仅在 3.4+ 版本中可用</p></li><li><p><strong>类型</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> useModel</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#FFAB70;">  props</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Record</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">&gt;,</span></span>
<span class="line"><span style="color:#FFAB70;">  key</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#FFAB70;">  options</span><span style="color:#F97583;">?:</span><span style="color:#B392F0;"> DefineModelOptions</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> ModelRef</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#B392F0;"> DefineModelOptions</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#F97583;"> =</span><span style="color:#79B8FF;"> any</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  get</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">v</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> T</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#79B8FF;"> any</span></span>
<span class="line"><span style="color:#B392F0;">  set</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">v</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> T</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#79B8FF;"> any</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#B392F0;"> ModelRef</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">M</span><span style="color:#F97583;"> extends</span><span style="color:#B392F0;"> PropertyKey</span><span style="color:#F97583;"> =</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">G</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> T</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">S</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> Ref</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">G</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">S</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#B392F0;">  ModelRef</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">M</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">G</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">S</span><span style="color:#E1E4E8;">&gt;,</span></span>
<span class="line"><span style="color:#B392F0;">  Record</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">M</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">true</span><span style="color:#F97583;"> |</span><span style="color:#79B8FF;"> undefined</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">]</span></span></code></pre></div></li><li><p><strong>示例</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  props: [</span><span style="color:#9ECBFF;">&#39;count&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">  emits: [</span><span style="color:#9ECBFF;">&#39;update:count&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#B392F0;">  setup</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">props</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">    const</span><span style="color:#79B8FF;"> msg</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> useModel</span><span style="color:#E1E4E8;">(props, </span><span style="color:#9ECBFF;">&#39;count&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    msg.value </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> 1</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>详细信息</strong></p><p><code>useModel()</code> 可以用于非单文件组件，例如在使用原始的 <code>setup()</code> 函数时。它预期的第一个参数是 <code>props</code> 对象，第二个参数是 model 名称。可选的第三个参数可以用于为生成的 model ref 声明自定义的 getter 和 setter。请注意，与 <code>defineModel()</code> 不同，你需要自己声明 props 和 emits。</p></li></ul><h2 id="usetemplateref" tabindex="-1">useTemplateRef() <sup class="vt-badge" data-text="3.5+"></sup> <a class="header-anchor" href="#usetemplateref" aria-label="Permalink to &quot;useTemplateRef() &lt;sup class=&quot;vt-badge&quot; data-text=&quot;3.5+&quot; /&gt; {#usetemplateref}&quot;">​</a></h2><p>返回一个浅层 ref，其值将与模板中的具有匹配 ref attribute 的元素或组件同步。</p><ul><li><p><strong>类型</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> useTemplateRef</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#E1E4E8;">&gt;(</span><span style="color:#FFAB70;">key</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Readonly</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">ShallowRef</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#F97583;"> |</span><span style="color:#79B8FF;"> null</span><span style="color:#E1E4E8;">&gt;&gt;</span></span></code></pre></div></li><li><p><strong>示例</strong></p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> setup</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { useTemplateRef, onMounted } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> inputRef</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> useTemplateRef</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;input&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">onMounted</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  inputRef.value.</span><span style="color:#B392F0;">focus</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">input</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;input&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p><strong>参考</strong></p><ul><li><a href="/guide/essentials/template-refs.html">指南 - 模板引用</a></li><li><a href="/guide/typescript/composition-api.html#typing-template-refs">指南 - 为模板引用标注类型</a> <sup class="vt-badge ts"></sup></li><li><a href="/guide/typescript/composition-api.html#typing-component-template-refs">指南 - 为组件模板引用标注类型</a> <sup class="vt-badge ts"></sup></li></ul></li></ul><h2 id="useid" tabindex="-1">useId() <sup class="vt-badge" data-text="3.5+"></sup> <a class="header-anchor" href="#useid" aria-label="Permalink to &quot;useId() &lt;sup class=&quot;vt-badge&quot; data-text=&quot;3.5+&quot; /&gt; {#useid}&quot;">​</a></h2><p>用于为无障碍属性或表单元素生成每个应用内唯一的 ID。</p><ul><li><p><strong>类型</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> useId</span><span style="color:#E1E4E8;">()</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span></span></code></pre></div></li><li><p><strong>示例</strong></p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> setup</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { useId } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> id</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> useId</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">form</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">label</span><span style="color:#B392F0;"> :for</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#E1E4E8;">&gt;Name:&lt;/</span><span style="color:#85E89D;">label</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">input</span><span style="color:#B392F0;"> :id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#B392F0;"> type</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;text&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">form</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p><strong>详细信息</strong></p><p><code>useId()</code> 生成的每个 ID 在每个应用内都是唯一的。它可以用于为表单元素和无障碍属性生成 ID。在同一个组件中多次调用会生成不同的 ID；同一个组件的多个实例调用 <code>useId()</code> 也会生成不同的 ID。</p><p><code>useId()</code> 生成的 ID 在服务器端和客户端渲染之间是稳定的，因此可以安全地在 SSR 应用中使用，不会导致激活不匹配。</p><p>如果同一页面上有多个 Vue 应用实例，可以通过 <a href="/api/application.html#app-config-idprefix"><code>app.config.idPrefix</code></a> 为每个应用提供一个 ID 前缀，以避免 ID 冲突。</p></li></ul>`,17)]))}const u=a(o,[["render",e]]);export{d as __pageData,u as default};
