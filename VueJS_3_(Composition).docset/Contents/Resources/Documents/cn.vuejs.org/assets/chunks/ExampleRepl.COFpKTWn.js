import{u as p,a as m,o as h,r as f,b as v,_ as g,c as b}from"./utils.DHavL_bR.js";import{d as x,x as c,J as y,r as k,B as w,h as j,c as C,o as T,q as D,z as e}from"./framework.CSxrXzdz.js";const o=JSON.parse(`{"attribute-bindings":{"App":{"composition.js":"import { ref } from 'vue'\\n\\nexport default {\\n  setup() {\\n    const message = ref('Hello World!')\\n    const isRed = ref(true)\\n    const color = ref('green')\\n\\n    function toggleRed() {\\n      isRed.value = !isRed.value\\n    }\\n\\n    function toggleColor() {\\n      color.value = color.value === 'green' ? 'blue' : 'green'\\n    }\\n\\n    return {\\n      message,\\n      isRed,\\n      color,\\n      toggleRed,\\n      toggleColor\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  data() {\\n    return {\\n      message: 'Hello World!',\\n      isRed: true,\\n      color: 'green'\\n    }\\n  },\\n  methods: {\\n    toggleRed() {\\n      this.isRed = !this.isRed\\n    },\\n    toggleColor() {\\n      this.color = this.color === 'green' ? 'blue' : 'green'\\n    }\\n  }\\n}\\n","style.css":".red {\\n  color: red;\\n}\\n","template.html":"<p>\\n  <span :title=\\"message\\">\\n    Hover your mouse over me for a few seconds to see my dynamically bound title!\\n  </span>\\n</p>\\n\\n<!--\\n除了普通字符串之外，\\nclass 绑定还特别支持了对象和数组\\n-->\\n<p :class=\\"{ red: isRed }\\" @click=\\"toggleRed\\">\\n  This should be red... but click me to toggle it.\\n</p>\\n\\n<!-- 样式绑定也支持对象和数组 -->\\n<p :style=\\"{ color }\\" @click=\\"toggleColor\\">\\n  This should be green, and should toggle between green and blue on click.\\n</p>\\n"},"description.txt":"现在我们将元素的 attribute / property 响应式地绑定到状态上。\\n这个 :title 语法是 v-bind:title 的简写。"},"cells":{"App":{"composition.js":"import Cell from './Cell.vue'\\nimport { cells } from './store.js'\\n\\nexport default {\\n  components: {\\n    Cell\\n  },\\n  setup() {\\n    const cols = cells.map((_, i) => String.fromCharCode(65 + i))\\n    return {\\n      cols,\\n      cells\\n    }\\n  }\\n}\\n","options.js":"import Cell from './Cell.vue'\\nimport { cells } from './store.js'\\n\\nexport default {\\n  components: {\\n    Cell\\n  },\\n  data() {\\n    return {\\n      cols: cells.map((_, i) => String.fromCharCode(65 + i)),\\n      cells\\n    }\\n  }\\n}\\n","style.css":"body {\\n  margin: 0;\\n}\\n\\ntable {\\n  border-collapse: collapse;\\n  table-layout: fixed;\\n  width: 100%;\\n}\\n\\nth {\\n  background-color: #eee;\\n}\\n\\ntr:first-of-type th {\\n  width: 100px;\\n}\\n\\ntr:first-of-type th:first-of-type {\\n  width: 25px;\\n}\\n\\ntd {\\n  border: 1px solid #ccc;\\n  height: 1.5em;\\n  overflow: hidden;\\n}\\n","template.html":"<table>\\n  <thead>\\n    <tr>\\n      <th></th>\\n      <th v-for=\\"c in cols\\">{{ c }}</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr v-for=\\"i in cells[0].length\\">\\n      <th>{{ i - 1 }}</th>\\n      <td v-for=\\"(c, j) in cols\\">\\n        <Cell :r=\\"i - 1\\" :c=\\"j\\"></Cell>\\n      </td>\\n    </tr>\\n  </tbody>\\n</table>\\n"},"Cell":{"composition.js":"import { ref } from 'vue'\\nimport { cells, evalCell } from './store.js'\\n\\nexport default {\\n  props: {\\n    c: Number,\\n    r: Number\\n  },\\n  setup(props) {\\n    const editing = ref(false)\\n\\n    function update(e) {\\n      editing.value = false\\n      cells[props.c][props.r] = e.target.value.trim()\\n    }\\n\\n    return {\\n      cells,\\n      editing,\\n      evalCell,\\n      update\\n    }\\n  }\\n}\\n","options.js":"import { cells, evalCell } from './store.js'\\n\\nexport default {\\n  props: {\\n    c: Number,\\n    r: Number\\n  },\\n  data() {\\n    return {\\n      editing: false,\\n      cells\\n    }\\n  },\\n  methods: {\\n    evalCell,\\n    update(e) {\\n      this.editing = false\\n      cells[this.c][this.r] = e.target.value.trim()\\n    }\\n  }\\n}\\n","style.css":".cell, .cell input {\\n  height: 1.5em;\\n  line-height: 1.5;\\n  font-size: 15px;\\n}\\n\\n.cell span {\\n  padding: 0 6px;\\n}\\n\\n.cell input {\\n  width: 100%;\\n  box-sizing: border-box;\\n}\\n","template.html":"<div class=\\"cell\\" :title=\\"cells[c][r]\\" @click=\\"editing = true\\">\\n  <input\\n    v-if=\\"editing\\"\\n    :value=\\"cells[c][r]\\"\\n    @change=\\"update\\"\\n    @blur=\\"update\\"\\n    @vue:mounted=\\"({ el }) => el.focus()\\"\\n  >\\n  <span v-else>{{ evalCell(cells[c][r]) }}</span>\\n</div>\\n"},"description.txt":"https://eugenkiss.github.io/7guis/tasks/#cells","store.js":"import { reactive } from 'vue'\\n\\nconst COLS = 5\\nconst ROWS = 20\\n\\nexport const cells = reactive(\\n  Array.from(Array(COLS).keys()).map((i) =>\\n    Array.from(Array(ROWS).keys()).map((i) => '')\\n  )\\n)\\n\\n// 原版 https://codesandbox.io/s/jotai-7guis-task7-cells-mzoit?file=/src/atoms.ts\\n// 作者 @dai-shi\\nexport function evalCell(exp) {\\n  if (!exp.startsWith('=')) {\\n    return exp\\n  }\\n\\n  // = A1 + B2 ---> get(0,1) + get(1,2)\\n  exp = exp\\n    .slice(1)\\n    .replace(\\n      /\\\\b([A-Z])(\\\\d{1,2})\\\\b/g,\\n      (_, c, r) => \`get(\${c.charCodeAt(0) - 65},\${r})\`\\n    )\\n\\n  try {\\n    return new Function('get', \`return \${exp}\`)(getCellValue)\\n  } catch (e) {\\n    return \`#ERROR \${e}\`\\n  }\\n}\\n\\nfunction getCellValue(c, r) {\\n  const val = evalCell(cells[c][r])\\n  const num = Number(val)\\n  return Number.isFinite(num) ? num : val\\n}\\n"},"circle-drawer":{"App":{"composition.js":"import { ref, shallowReactive, toRaw } from 'vue'\\n\\nexport default {\\n  setup() {\\n    const history = shallowReactive([[]])\\n    const index = ref(0)\\n    const circles = ref([])\\n    const selected = ref()\\n    const adjusting = ref(false)\\n\\n    function onClick({ clientX: x, clientY: y }) {\\n      if (adjusting.value) {\\n        adjusting.value = false\\n        selected.value = null\\n        push()\\n        return\\n      }\\n\\n      selected.value = [...circles.value].reverse().find(({ cx, cy, r }) => {\\n        const dx = cx - x\\n        const dy = cy - y\\n        return Math.sqrt(dx * dx + dy * dy) <= r\\n      })\\n\\n      if (!selected.value) {\\n        circles.value.push({\\n          cx: x,\\n          cy: y,\\n          r: 50\\n        })\\n        push()\\n      }\\n    }\\n\\n    function adjust(circle) {\\n      selected.value = circle\\n      adjusting.value = true\\n    }\\n\\n    function push() {\\n      history.length = ++index.value\\n      history.push(clone(circles.value))\\n      console.log(toRaw(history))\\n    }\\n\\n    function undo() {\\n      circles.value = clone(history[--index.value])\\n    }\\n\\n    function redo() {\\n      circles.value = clone(history[++index.value])\\n    }\\n\\n    function clone(circles) {\\n      return circles.map((c) => ({ ...c }))\\n    }\\n\\n    return {\\n      history,\\n      index,\\n      circles,\\n      selected,\\n      adjusting,\\n      onClick,\\n      adjust,\\n      undo,\\n      redo\\n    }\\n  }\\n}\\n","options.js":"function clone(circles) {\\n  return circles.map((c) => ({ ...c }))\\n}\\n\\nexport default {\\n  data() {\\n    return {\\n      history: [[]],\\n      index: 0,\\n      circles: [],\\n      selected: null,\\n      adjusting: false\\n    }\\n  },\\n  methods: {\\n    onClick({ clientX: x, clientY: y }) {\\n      if (this.adjusting) {\\n        this.adjusting = false\\n        this.selected = null\\n        this.push()\\n        return\\n      }\\n\\n      this.selected = [...this.circles].reverse().find(({ cx, cy, r }) => {\\n        const dx = cx - x\\n        const dy = cy - y\\n        return Math.sqrt(dx * dx + dy * dy) <= r\\n      })\\n\\n      if (!this.selected) {\\n        this.circles.push({\\n          cx: x,\\n          cy: y,\\n          r: 50\\n        })\\n        this.push()\\n      }\\n    },\\n\\n    adjust(circle) {\\n      this.selected = circle\\n      this.adjusting = true\\n    },\\n\\n    push() {\\n      this.history.length = ++this.index\\n      this.history.push(clone(this.circles))\\n    },\\n\\n    undo() {\\n      this.circles = clone(this.history[--this.index])\\n    },\\n\\n    redo() {\\n      this.circles = clone(this.history[++this.index])\\n    }\\n  }\\n}\\n","style.css":"body {\\n  margin: 0;\\n  overflow: hidden;\\n}\\n\\nsvg {\\n  width: 100vw;\\n  height: 100vh;\\n  background-color: #eee;\\n}\\n\\ncircle {\\n  stroke: #000;\\n}\\n\\n.controls {\\n  position: fixed;\\n  top: 10px;\\n  left: 0;\\n  right: 0;\\n  text-align: center;\\n}\\n\\n.controls button + button {\\n  margin-left: 6px;\\n}\\n\\n.dialog {\\n  position: fixed;\\n  top: calc(50% - 50px);\\n  left: calc(50% - 175px);\\n  background: #fff;\\n  width: 350px;\\n  height: 100px;\\n  padding: 5px 20px;\\n  box-sizing: border-box;\\n  border-radius: 4px;\\n  text-align: center;\\n  box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.25);\\n}\\n\\n.dialog input {\\n  display: block;\\n  width: 200px;\\n  margin: 0px auto;\\n}\\n\\n.tip {\\n  text-align: center;\\n  padding: 0 50px;\\n  color: #bbb;\\n}\\n","template.html":"<svg @click=\\"onClick\\">\\n  <foreignObject x=\\"0\\" y=\\"40%\\" width=\\"100%\\" height=\\"200\\">\\n    <p class=\\"tip\\">\\n      Click on the canvas to draw a circle. Click on a circle to select it.\\n      Right-click on the canvas to adjust the radius of the selected circle.\\n    </p>\\n  </foreignObject>\\n  <circle\\n    v-for=\\"circle in circles\\"\\n    :cx=\\"circle.cx\\"\\n    :cy=\\"circle.cy\\"\\n    :r=\\"circle.r\\"\\n    :fill=\\"circle === selected ? '#ccc' : '#fff'\\"\\n    @click=\\"selected = circle\\"\\n    @contextmenu.prevent=\\"adjust(circle)\\"\\n  ></circle>\\n</svg>\\n\\n<div class=\\"controls\\">\\n  <button @click=\\"undo\\" :disabled=\\"index <= 0\\">Undo</button>\\n  <button @click=\\"redo\\" :disabled=\\"index >= history.length - 1\\">Redo</button>\\n</div>\\n\\n<div class=\\"dialog\\" v-if=\\"adjusting\\" @click.stop>\\n  <p>Adjust radius of circle at ({{ selected.cx }}, {{ selected.cy }})</p>\\n  <input type=\\"range\\" v-model=\\"selected.r\\" min=\\"1\\" max=\\"300\\">\\n</div>\\n"},"description.txt":"https://eugenkiss.github.io/7guis/tasks/#circle"},"conditionals-and-loops":{"App":{"composition.js":"import { ref } from 'vue'\\n\\nexport default {\\n  setup() {\\n    const show = ref(true)\\n    const list = ref([1, 2, 3])\\n\\n    return {\\n      show,\\n      list\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  data() {\\n    return {\\n      show: true,\\n      list: [1, 2, 3]\\n    }\\n  }\\n}\\n","template.html":"<button @click=\\"show = !show\\">Toggle List</button>\\n<button @click=\\"list.push(list.length + 1)\\">Push Number</button>\\n<button @click=\\"list.pop()\\">Pop Number</button>\\n<button @click=\\"list.reverse()\\">Reverse List</button>\\n\\n<ul v-if=\\"show && list.length\\">\\n  <li v-for=\\"item of list\\">{{ item }}</li>\\n</ul>\\n<p v-else-if=\\"list.length\\">List is not empty, but hidden.</p>\\n<p v-else>List is empty.</p>\\n"},"description.txt":"我们可以通过 v-if 和 v-for 指令条件性地或循环地渲染内容。"},"counter":{"App":{"composition.js":"import { ref } from 'vue'\\n\\nexport default {\\n  setup() {\\n    const count = ref(0)\\n\\n    return {\\n      count\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  data() {\\n    return {\\n      count: 0\\n    }\\n  }\\n}\\n","template.html":"{{ count }}\\n<button @click=\\"count++\\">Count</button>\\n"},"description.txt":"https://eugenkiss.github.io/7guis/tasks/#counter"},"crud":{"App":{"composition.js":"import { ref, reactive, computed, watch } from 'vue'\\n\\nexport default {\\n  setup() {\\n    const names = reactive(['Emil, Hans', 'Mustermann, Max', 'Tisch, Roman'])\\n    const selected = ref('')\\n    const prefix = ref('')\\n    const first = ref('')\\n    const last = ref('')\\n\\n    const filteredNames = computed(() =>\\n      names.filter((n) =>\\n        n.toLowerCase().startsWith(prefix.value.toLowerCase())\\n      )\\n    )\\n\\n    watch(selected, (name) => {\\n      [last.value, first.value] = name.split(', ')\\n    })\\n\\n    function create() {\\n      if (hasValidInput()) {\\n        const fullName = \`\${last.value}, \${first.value}\`\\n        if (!names.includes(fullName)) {\\n          names.push(fullName)\\n          first.value = last.value = ''\\n        }\\n      }\\n    }\\n\\n    function update() {\\n      if (hasValidInput() && selected.value) {\\n        const i = names.indexOf(selected.value)\\n        names[i] = selected.value = \`\${last.value}, \${first.value}\`\\n      }\\n    }\\n\\n    function del() {\\n      if (selected.value) {\\n        const i = names.indexOf(selected.value)\\n        names.splice(i, 1)\\n        selected.value = first.value = last.value = ''\\n      }\\n    }\\n\\n    function hasValidInput() {\\n      return first.value.trim() && last.value.trim()\\n    }\\n\\n    return {\\n      filteredNames,\\n      selected,\\n      prefix,\\n      first,\\n      last,\\n      create,\\n      update,\\n      del\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  data() {\\n    return {\\n      names: ['Emil, Hans', 'Mustermann, Max', 'Tisch, Roman'],\\n      selected: '',\\n      prefix: '',\\n      first: '',\\n      last: ''\\n    }\\n  },\\n  computed: {\\n    filteredNames() {\\n      return this.names.filter((n) =>\\n        n.toLowerCase().startsWith(this.prefix.toLowerCase())\\n      )\\n    }\\n  },\\n  watch: {\\n    selected(name) {\\n      ;[this.last, this.first] = name.split(', ')\\n    }\\n  },\\n  methods: {\\n    create() {\\n      if (this.hasValidInput()) {\\n        const fullName = \`\${this.last}, \${this.first}\`\\n        if (!this.names.includes(fullName)) {\\n          this.names.push(fullName)\\n          this.first = this.last = ''\\n        }\\n      }\\n    },\\n    update() {\\n      if (this.hasValidInput() && this.selected) {\\n        const i = this.names.indexOf(this.selected)\\n        this.names[i] = this.selected = \`\${this.last}, \${this.first}\`\\n      }\\n    },\\n    del() {\\n      if (this.selected) {\\n        const i = this.names.indexOf(this.selected)\\n        this.names.splice(i, 1)\\n        this.selected = this.first = this.last = ''\\n      }\\n    },\\n    hasValidInput() {\\n      return this.first.trim() && this.last.trim()\\n    }\\n  }\\n}\\n","style.css":"* {\\n  font-size: inherit;\\n}\\n\\ninput {\\n  display: block;\\n  margin-bottom: 10px;\\n}\\n\\nselect {\\n  float: left;\\n  margin: 0 1em 1em 0;\\n  width: 14em;\\n}\\n\\n.buttons {\\n  clear: both;\\n}\\n\\nbutton + button {\\n  margin-left: 5px;\\n}\\n","template.html":"<div><input v-model=\\"prefix\\" placeholder=\\"Filter prefix\\"></div>\\n\\n<select size=\\"5\\" v-model=\\"selected\\">\\n  <option v-for=\\"name in filteredNames\\" :key=\\"name\\">{{ name }}</option>\\n</select>\\n\\n<label>Name: <input v-model=\\"first\\"></label>\\n<label>Surname: <input v-model=\\"last\\"></label>\\n\\n<div class=\\"buttons\\">\\n  <button @click=\\"create\\">Create</button>\\n  <button @click=\\"update\\">Update</button>\\n  <button @click=\\"del\\">Delete</button>\\n</div>\\n"},"description.txt":"https://eugenkiss.github.io/7guis/tasks/#crud"},"fetching-data":{"App":{"composition.js":"import { ref, watchEffect } from 'vue'\\n\\nconst API_URL = \`https://api.github.com/repos/vuejs/core/commits?per_page=3&sha=\`\\nconst branches = ['main', 'minor']\\n\\nexport default {\\n  setup() {\\n    const currentBranch = ref(branches[0])\\n    const commits = ref([])\\n\\n    watchEffect(async () => {\\n      // 该 effect 会立即运行，\\n      // 并且在 currentBranch.value 改变时重新运行\\n      const url = \`\${API_URL}\${currentBranch.value}\`\\n      commits.value = await (await fetch(url)).json()\\n    })\\n\\n    function truncate(v) {\\n      const newline = v.indexOf('\\\\n')\\n      return newline > 0 ? v.slice(0, newline) : v\\n    }\\n\\n    function formatDate(v) {\\n      return v.replace(/T|Z/g, ' ')\\n    }\\n\\n    return {\\n      branches,\\n      currentBranch,\\n      commits,\\n      truncate,\\n      formatDate\\n    }\\n  }\\n}\\n","options.js":"const API_URL = \`https://api.github.com/repos/vuejs/core/commits?per_page=3&sha=\`\\n\\nexport default {\\n  data: () => ({\\n    branches: ['main', 'minor'],\\n    currentBranch: 'main',\\n    commits: []\\n  }),\\n\\n  created() {\\n    // 在初始化的时候进行获取\\n    this.fetchData()\\n  },\\n\\n  watch: {\\n    // 当 currentBranch 改变时重新获取\\n    currentBranch: 'fetchData'\\n  },\\n\\n  methods: {\\n    async fetchData() {\\n      const url = \`\${API_URL}\${this.currentBranch}\`\\n      this.commits = await (await fetch(url)).json()\\n    },\\n    truncate(v) {\\n      const newline = v.indexOf('\\\\n')\\n      return newline > 0 ? v.slice(0, newline) : v\\n    },\\n    formatDate(v) {\\n      return v.replace(/T|Z/g, ' ')\\n    }\\n  }\\n}\\n","style.css":"a {\\n  text-decoration: none;\\n  color: #42b883;\\n}\\nli {\\n  line-height: 1.5em;\\n  margin-bottom: 20px;\\n}\\n.author,\\n.date {\\n  font-weight: bold;\\n}\\n","template.html":"<h1>Latest Vue Core Commits</h1>\\n<template v-for=\\"branch in branches\\">\\n  <input type=\\"radio\\"\\n    :id=\\"branch\\"\\n    :value=\\"branch\\"\\n    name=\\"branch\\"\\n    v-model=\\"currentBranch\\">\\n  <label :for=\\"branch\\">{{ branch }}</label>\\n</template>\\n<p>vuejs/core@{{ currentBranch }}</p>\\n<ul v-if=\\"commits.length > 0\\">\\n  <li v-for=\\"{ html_url, sha, author, commit } in commits\\" :key=\\"sha\\">\\n    <a :href=\\"html_url\\" target=\\"_blank\\" class=\\"commit\\">{{ sha.slice(0, 7) }}</a>\\n    - <span class=\\"message\\">{{ truncate(commit.message) }}</span><br>\\n    by <span class=\\"author\\">\\n      <a :href=\\"author.html_url\\" target=\\"_blank\\">{{ commit.author.name }}</a>\\n    </span>\\n    at <span class=\\"date\\">{{ formatDate(commit.author.date) }}</span>\\n  </li>\\n</ul>\\n"},"description.txt":"这个示例会通过 GitHub 的 API 获取最新的 Vue Core 提交信息并将其展示为列表。\\n你可以在两个分支之间切换。\\n"},"flight-booker":{"App":{"composition.js":"import { ref, computed } from 'vue'\\n\\nexport default {\\n  setup() {\\n    const flightType = ref('one-way flight')\\n    const departureDate = ref(dateToString(new Date()))\\n    const returnDate = ref(departureDate.value)\\n\\n    const isReturn = computed(() => flightType.value === 'return flight')\\n\\n    const canBook = computed(\\n      () =>\\n        !isReturn.value ||\\n        stringToDate(returnDate.value) > stringToDate(departureDate.value)\\n    )\\n\\n    function book() {\\n      alert(\\n        isReturn.value\\n          ? \`You have booked a return flight leaving on \${departureDate.value} and returning on \${returnDate.value}.\`\\n          : \`You have booked a one-way flight leaving on \${departureDate.value}.\`\\n      )\\n    }\\n\\n    function stringToDate(str) {\\n      const [y, m, d] = str.split('-')\\n      return new Date(+y, m - 1, +d)\\n    }\\n\\n    function dateToString(date) {\\n      return (\\n        date.getFullYear() +\\n        '-' +\\n        pad(date.getMonth() + 1) +\\n        '-' +\\n        pad(date.getDate())\\n      )\\n    }\\n\\n    function pad(n, s = String(n)) {\\n      return s.length < 2 ? \`0\${s}\` : s\\n    }\\n\\n    return {\\n      flightType,\\n      departureDate,\\n      returnDate,\\n      isReturn,\\n      canBook,\\n      book\\n    }\\n  }\\n}\\n","options.js":"function stringToDate(str) {\\n  const [y, m, d] = str.split('-')\\n  return new Date(+y, m - 1, +d)\\n}\\n\\nfunction dateToString(date) {\\n  return (\\n    date.getFullYear() +\\n    '-' +\\n    pad(date.getMonth() + 1) +\\n    '-' +\\n    pad(date.getDate())\\n  )\\n}\\n\\nfunction pad(n, s = String(n)) {\\n  return s.length < 2 ? \`0\${s}\` : s\\n}\\n\\nexport default {\\n  data() {\\n    return {\\n      flightType: 'one-way flight',\\n      departureDate: dateToString(new Date()),\\n      returnDate: dateToString(new Date())\\n    }\\n  },\\n  computed: {\\n    isReturn() {\\n      return this.flightType === 'return flight'\\n    },\\n    canBook() {\\n      return (\\n        !this.isReturn ||\\n        stringToDate(this.returnDate) > stringToDate(this.departureDate)\\n      )\\n    }\\n  },\\n  methods: {\\n    book() {\\n      alert(\\n        this.isReturn\\n          ? \`You have booked a return flight leaving on \${this.departureDate} and returning on \${this.returnDate}.\`\\n        \\t: \`You have booked a one-way flight leaving on \${this.departureDate}.\`\\n      )\\n    }\\n  }\\n}\\n","style.css":"select,\\ninput,\\nbutton {\\n  display: block;\\n  margin: 0.5em 0;\\n  font-size: 15px;\\n}\\n\\ninput[disabled] {\\n  color: #999;\\n}\\n\\np {\\n  color: red;\\n}\\n","template.html":"<select v-model=\\"flightType\\">\\n  <option value=\\"one-way flight\\">One-way Flight</option>\\n  <option value=\\"return flight\\">Return Flight</option>\\n</select>\\n\\n<input type=\\"date\\" v-model=\\"departureDate\\">\\n<input type=\\"date\\" v-model=\\"returnDate\\" :disabled=\\"!isReturn\\">\\n\\n<button :disabled=\\"!canBook\\" @click=\\"book\\">Book</button>\\n\\n<p>{{ canBook ? '' : 'Return date must be after departure date.' }}</p>\\n"},"description.txt":"https://eugenkiss.github.io/7guis/tasks/#flight"},"form-bindings":{"App":{"composition.js":"import { ref } from 'vue'\\n\\nexport default {\\n  setup() {\\n    const text = ref('Edit me')\\n    const checked = ref(true)\\n    const checkedNames = ref(['Jack'])\\n    const picked = ref('One')\\n    const selected = ref('A')\\n    const multiSelected = ref(['A'])\\n\\n    return {\\n      text,\\n      checked,\\n      checkedNames,\\n      picked,\\n      selected,\\n      multiSelected\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  data() {\\n    return {\\n      text: 'Edit me',\\n      checked: true,\\n      checkedNames: ['Jack'],\\n      picked: 'One',\\n      selected: 'A',\\n      multiSelected: ['A']\\n    }\\n  }\\n}\\n","template.html":"<h2>Text Input</h2>\\n<input v-model=\\"text\\">\\n<p>{{ text }}</p>\\n\\n<h2>Checkbox</h2>\\n<input type=\\"checkbox\\" id=\\"checkbox\\" v-model=\\"checked\\">\\n<label for=\\"checkbox\\">Checked: {{ checked }}</label>\\n\\n<!--\\n  多个复选框可以绑定到\\n  相同的 v-model 数组\\n-->\\n<h2>Multi Checkbox</h2>\\n<input type=\\"checkbox\\" id=\\"jack\\" value=\\"Jack\\" v-model=\\"checkedNames\\">\\n<label for=\\"jack\\">Jack</label>\\n<input type=\\"checkbox\\" id=\\"john\\" value=\\"John\\" v-model=\\"checkedNames\\">\\n<label for=\\"john\\">John</label>\\n<input type=\\"checkbox\\" id=\\"mike\\" value=\\"Mike\\" v-model=\\"checkedNames\\">\\n<label for=\\"mike\\">Mike</label>\\n<p>Checked names: {{ checkedNames }}</p>\\n\\n<h2>Radio</h2>\\n<input type=\\"radio\\" id=\\"one\\" value=\\"One\\" v-model=\\"picked\\">\\n<label for=\\"one\\">One</label>\\n<br>\\n<input type=\\"radio\\" id=\\"two\\" value=\\"Two\\" v-model=\\"picked\\">\\n<label for=\\"two\\">Two</label>\\n<p>Picked: {{ picked }}</p>\\n\\n<h2>Select</h2>\\n<select v-model=\\"selected\\">\\n  <option disabled value=\\"\\">Please select one</option>\\n  <option>A</option>\\n  <option>B</option>\\n  <option>C</option>\\n</select>\\n<p>Selected: {{ selected }}</p>\\n\\n<h2>Multi Select</h2>\\n<select v-model=\\"multiSelected\\" multiple style=\\"width:100px\\">\\n  <option>A</option>\\n  <option>B</option>\\n  <option>C</option>\\n</select>\\n<p>Selected: {{ multiSelected }}</p>\\n"},"description.txt":"我们可以使用 v-model 指令在状态和表单输入之间创建双向绑定。"},"grid":{"App":{"composition.js":"import DemoGrid from './Grid.vue'\\nimport { ref } from 'vue'\\n\\nexport default {\\n  components: {\\n    DemoGrid\\n  },\\n  setup() {\\n    const searchQuery = ref('')\\n    const gridColumns = ['name', 'power']\\n    const gridData = [\\n      { name: 'Chuck Norris', power: Infinity },\\n      { name: 'Bruce Lee', power: 9000 },\\n      { name: 'Jackie Chan', power: 7000 },\\n      { name: 'Jet Li', power: 8000 }\\n    ]\\n\\n    return {\\n      searchQuery,\\n      gridColumns,\\n      gridData\\n    }\\n  }\\n}\\n","options.js":"import DemoGrid from './Grid.vue'\\n\\nexport default {\\n  components: {\\n    DemoGrid\\n  },\\n  data: () => ({\\n    searchQuery: '',\\n    gridColumns: ['name', 'power'],\\n    gridData: [\\n      { name: 'Chuck Norris', power: Infinity },\\n      { name: 'Bruce Lee', power: 9000 },\\n      { name: 'Jackie Chan', power: 7000 },\\n      { name: 'Jet Li', power: 8000 }\\n    ]\\n  })\\n}\\n","template.html":"<form id=\\"search\\">\\n  Search <input name=\\"query\\" v-model=\\"searchQuery\\">\\n</form>\\n<DemoGrid\\n  :data=\\"gridData\\"\\n  :columns=\\"gridColumns\\"\\n  :filter-key=\\"searchQuery\\">\\n</DemoGrid>\\n"},"Grid":{"composition.js":"import { ref, computed } from 'vue'\\n\\nexport default {\\n  props: {\\n    data: Array,\\n    columns: Array,\\n    filterKey: String\\n  },\\n  setup(props) {\\n    const sortKey = ref('')\\n    const sortOrders = ref(\\n      props.columns.reduce((o, key) => ((o[key] = 1), o), {})\\n    )\\n\\n    const filteredData = computed(() => {\\n      let { data, filterKey } = props\\n      if (filterKey) {\\n        filterKey = filterKey.toLowerCase()\\n        data = data.filter((row) => {\\n          return Object.keys(row).some((key) => {\\n            return String(row[key]).toLowerCase().indexOf(filterKey) > -1\\n          })\\n        })\\n      }\\n      const key = sortKey.value\\n      if (key) {\\n        const order = sortOrders.value[key]\\n        data = data.slice().sort((a, b) => {\\n          a = a[key]\\n          b = b[key]\\n          return (a === b ? 0 : a > b ? 1 : -1) * order\\n        })\\n      }\\n      return data\\n    })\\n\\n    function sortBy(key) {\\n      sortKey.value = key\\n      sortOrders.value[key] *= -1\\n    }\\n\\n    function capitalize(str) {\\n      return str.charAt(0).toUpperCase() + str.slice(1)\\n    }\\n\\n    return {\\n      sortKey,\\n      sortOrders,\\n      filteredData,\\n      sortBy,\\n      capitalize\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  props: {\\n    data: Array,\\n    columns: Array,\\n    filterKey: String\\n  },\\n  data() {\\n    return {\\n      sortKey: '',\\n      sortOrders: this.columns.reduce((o, key) => ((o[key] = 1), o), {})\\n    }\\n  },\\n  computed: {\\n    filteredData() {\\n      const sortKey = this.sortKey\\n      const filterKey = this.filterKey && this.filterKey.toLowerCase()\\n      const order = this.sortOrders[sortKey] || 1\\n      let data = this.data\\n      if (filterKey) {\\n        data = data.filter((row) => {\\n          return Object.keys(row).some((key) => {\\n            return String(row[key]).toLowerCase().indexOf(filterKey) > -1\\n          })\\n        })\\n      }\\n      if (sortKey) {\\n        data = data.slice().sort((a, b) => {\\n          a = a[sortKey]\\n          b = b[sortKey]\\n          return (a === b ? 0 : a > b ? 1 : -1) * order\\n        })\\n      }\\n      return data\\n    }\\n  },\\n  methods: {\\n    sortBy(key) {\\n      this.sortKey = key\\n      this.sortOrders[key] = this.sortOrders[key] * -1\\n    },\\n    capitalize(str) {\\n      return str.charAt(0).toUpperCase() + str.slice(1)\\n    }\\n  }\\n}\\n","style.css":"table {\\n  border: 2px solid #42b983;\\n  border-radius: 3px;\\n  background-color: #fff;\\n}\\n\\nth {\\n  background-color: #42b983;\\n  color: rgba(255, 255, 255, 0.66);\\n  cursor: pointer;\\n  user-select: none;\\n}\\n\\ntd {\\n  background-color: #f9f9f9;\\n}\\n\\nth,\\ntd {\\n  min-width: 120px;\\n  padding: 10px 20px;\\n}\\n\\nth.active {\\n  color: #fff;\\n}\\n\\nth.active .arrow {\\n  opacity: 1;\\n}\\n\\n.arrow {\\n  display: inline-block;\\n  vertical-align: middle;\\n  width: 0;\\n  height: 0;\\n  margin-left: 5px;\\n  opacity: 0.66;\\n}\\n\\n.arrow.asc {\\n  border-left: 4px solid transparent;\\n  border-right: 4px solid transparent;\\n  border-bottom: 4px solid #fff;\\n}\\n\\n.arrow.dsc {\\n  border-left: 4px solid transparent;\\n  border-right: 4px solid transparent;\\n  border-top: 4px solid #fff;\\n}\\n","template.html":"<table v-if=\\"filteredData.length\\">\\n  <thead>\\n    <tr>\\n      <th v-for=\\"key in columns\\"\\n        @click=\\"sortBy(key)\\"\\n        :class=\\"{ active: sortKey == key }\\">\\n        {{ capitalize(key) }}\\n        <span class=\\"arrow\\" :class=\\"sortOrders[key] > 0 ? 'asc' : 'dsc'\\">\\n        </span>\\n      </th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr v-for=\\"entry in filteredData\\">\\n      <td v-for=\\"key in columns\\">\\n        {{entry[key]}}\\n      </td>\\n    </tr>\\n  </tbody>\\n</table>\\n<p v-else>No matches found.</p>\\n"},"description.txt":"该示例创建了一个可复用网格组件，并结合外部数据使用它。"},"handling-input":{"App":{"composition.js":"import { ref } from 'vue'\\n\\nexport default {\\n  setup() {\\n    const message = ref('Hello World!')\\n\\n    function reverseMessage() {\\n      // 通过其 .value 属性\\n      // 访问/修改一个 ref 的值。\\n      message.value = message.value.split('').reverse().join('')\\n    }\\n\\n    function notify() {\\n      alert('navigation was prevented.')\\n    }\\n\\n    return {\\n      message,\\n      reverseMessage,\\n      notify\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  data() {\\n    return {\\n      message: 'Hello World!'\\n    }\\n  },\\n  methods: {\\n    reverseMessage() {\\n      this.message = this.message.split('').reverse().join('')\\n    },\\n    notify() {\\n      alert('navigation was prevented.')\\n    }\\n  }\\n}\\n","style.css":"button, a {\\n  display: block;\\n  margin-bottom: 1em;\\n}\\n","template.html":"<!--\\n  注意我们不需要在模板中写 .value，\\n  因为在模板中 ref 会自动“解包”。\\n-->\\n<h1>{{ message }}</h1>\\n\\n<!--\\n  绑定到一个方法/函数。\\n  这个 @click 语法是 v-on:click 的简写。\\n-->\\n<button @click=\\"reverseMessage\\">Reverse Message</button>\\n\\n<!-- 也可以写成一个内联表达式语句 -->\\n<button @click=\\"message += '!'\\">Append \\"!\\"</button>\\n\\n<!--\\n  Vue 也为一些像 e.preventDefault() 和 e.stopPropagation()\\n  这样的常见任务提供了修饰符。\\n-->\\n<a href=\\"https://vuejs.org\\" @click.prevent=\\"notify\\">\\n  A link with e.preventDefault()\\n</a>\\n"},"description.txt":"这个示例展示了如何通过 v-on 指令处理用户输入。"},"hello-world":{"App":{"composition.js":"import { ref } from 'vue'\\n\\nexport default {\\n  setup() {\\n    // “ref”是用来存储值的响应式数据源。\\n    // 理论上我们在展示该字符串的时候不需要将其包装在 ref() 中，\\n    // 但是在下一个示例中更改这个值的时候，我们就需要它了。\\n    const message = ref('Hello World!')\\n\\n    return {\\n      message\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  data() {\\n    return {\\n      message: 'Hello World!'\\n    }\\n  }\\n}\\n","template.html":"<h1>{{ message }}</h1>\\n"},"description.txt":"跟 Vue 说 Hello World！"},"list-transition":{"App":{"composition.js":"import { shuffle as _shuffle } from 'lodash-es'\\nimport { ref } from 'vue'\\n\\nexport default {\\n  setup() {\\n    const getInitialItems = () => [1, 2, 3, 4, 5]\\n    const items = ref(getInitialItems())\\n    let id = items.value.length + 1\\n\\n    function insert() {\\n      const i = Math.round(Math.random() * items.value.length)\\n      items.value.splice(i, 0, id++)\\n    }\\n\\n    function reset() {\\n      items.value = getInitialItems()\\n      id = items.value.length + 1\\n    }\\n\\n    function shuffle() {\\n      items.value = _shuffle(items.value)\\n    }\\n\\n    function remove(item) {\\n      const i = items.value.indexOf(item)\\n      if (i > -1) {\\n        items.value.splice(i, 1)\\n      }\\n    }\\n\\n    return {\\n      items,\\n      insert,\\n      reset,\\n      shuffle,\\n      remove\\n    }\\n  }\\n}\\n","options.js":"import { shuffle } from 'lodash-es'\\n\\nconst getInitialItems = () => [1, 2, 3, 4, 5]\\nlet id = getInitialItems().length + 1\\n\\nexport default {\\n  data() {\\n    return {\\n      items: getInitialItems()\\n    }\\n  },\\n  methods: {\\n    insert() {\\n      const i = Math.round(Math.random() * this.items.length)\\n      this.items.splice(i, 0, id++)\\n    },\\n    reset() {\\n      this.items = getInitialItems()\\n      id = getInitialItems().length + 1\\n    },\\n    shuffle() {\\n      this.items = shuffle(this.items)\\n    },\\n    remove(item) {\\n      const i = this.items.indexOf(item)\\n      if (i > -1) {\\n        this.items.splice(i, 1)\\n      }\\n    }\\n  }\\n}\\n","style.css":".container {\\n  position: relative;\\n  padding: 0;\\n  list-style-type: none;\\n}\\n\\n.item {\\n  width: 100%;\\n  height: 30px;\\n  background-color: #f3f3f3;\\n  border: 1px solid #666;\\n  box-sizing: border-box;\\n}\\n\\n/* 1. 声明过渡效果 */\\n.fade-move,\\n.fade-enter-active,\\n.fade-leave-active {\\n  transition: all 0.5s cubic-bezier(0.55, 0, 0.1, 1);\\n}\\n\\n/* 2. 声明进入和离开的状态 */\\n.fade-enter-from,\\n.fade-leave-to {\\n  opacity: 0;\\n  transform: scaleY(0.01) translate(30px, 0);\\n}\\n\\n/* 3. 确保离开的项目被移除出了布局流\\n      以便正确地计算移动时的动画效果。 */\\n.fade-leave-active {\\n  position: absolute;\\n}\\n","template.html":"<button @click=\\"insert\\">Insert at random index</button>\\n<button @click=\\"reset\\">Reset</button>\\n<button @click=\\"shuffle\\">Shuffle</button>\\n\\n<TransitionGroup tag=\\"ul\\" name=\\"fade\\" class=\\"container\\">\\n  <li v-for=\\"item in items\\" class=\\"item\\" :key=\\"item\\">\\n    {{ item }}\\n    <button @click=\\"remove(item)\\">x</button>\\n  </li>\\n</TransitionGroup>\\n"},"description.txt":"通过内建的 <TransitionGroup> 实现“FLIP”列表过渡效果。\\nhttps://aerotwist.com/blog/flip-your-animations/","import-map.json":"{\\n  \\"imports\\": {\\n    \\"lodash-es\\": \\"https://cdn.jsdelivr.net/npm/lodash-es/+esm\\"\\n  }\\n}\\n"},"markdown":{"App":{"composition.js":"import { marked } from 'marked'\\nimport { debounce } from 'lodash-es'\\nimport { ref, computed } from 'vue'\\n\\nexport default {\\n  setup() {\\n    const input = ref('# hello')\\n\\n    const output = computed(() => marked(input.value))\\n\\n    const update = debounce((e) => {\\n      input.value = e.target.value\\n    }, 100)\\n\\n    return {\\n      input,\\n      output,\\n      update\\n    }\\n  }\\n}\\n","options.js":"import { marked } from 'marked'\\nimport { debounce } from 'lodash-es'\\n\\nexport default {\\n  data: () => ({\\n    input: '# hello'\\n  }),\\n  computed: {\\n    output() {\\n      return marked(this.input)\\n    }\\n  },\\n  methods: {\\n    update: debounce(function (e) {\\n      this.input = e.target.value\\n    }, 100)\\n  }\\n}\\n","style.css":"body {\\n  margin: 0;\\n}\\n\\n.editor {\\n  height: 100vh;\\n  display: flex;\\n}\\n\\n.input,\\n.output {\\n  overflow: auto;\\n  width: 50%;\\n  height: 100%;\\n  box-sizing: border-box;\\n  padding: 0 20px;\\n}\\n\\n.input {\\n  border: none;\\n  border-right: 1px solid #ccc;\\n  resize: none;\\n  outline: none;\\n  background-color: #f6f6f6;\\n  font-size: 14px;\\n  font-family: 'Monaco', courier, monospace;\\n  padding: 20px;\\n}\\n\\ncode {\\n  color: #f66;\\n}\\n","template.html":"<div class=\\"editor\\">\\n  <textarea class=\\"input\\" :value=\\"input\\" @input=\\"update\\"></textarea>\\n  <div class=\\"output\\" v-html=\\"output\\"></div>\\n</div>\\n"},"description.txt":"一个简单的 markdown 编辑器。","import-map.json":"{\\n  \\"imports\\": {\\n    \\"marked\\": \\"https://cdn.jsdelivr.net/npm/marked/+esm\\",\\n    \\"lodash-es\\": \\"https://cdn.jsdelivr.net/npm/lodash-es/+esm\\"\\n  }\\n}\\n"},"modal":{"App":{"composition.js":"import Modal from './Modal.vue'\\nimport { ref } from 'vue'\\n\\nexport default {\\n  components: {\\n    Modal\\n  },\\n  setup() {\\n    const showModal = ref(false)\\n\\n    return {\\n      showModal\\n    }\\n  }\\n}\\n","options.js":"import Modal from './Modal.vue'\\n\\nexport default {\\n  components: {\\n    Modal\\n  },\\n  data() {\\n    return {\\n      showModal: false\\n    }\\n  }\\n}\\n","template.html":"<button id=\\"show-modal\\" @click=\\"showModal = true\\">Show Modal</button>\\n\\n<Teleport to=\\"body\\">\\n  <!-- 使用这个 modal 组件，传入 prop -->\\n  <modal :show=\\"showModal\\" @close=\\"showModal = false\\">\\n    <template #header>\\n      <h3>Custom Header</h3>\\n    </template>\\n  </modal>\\n</Teleport>\\n"},"Modal":{"composition.js":"export default {\\n  props: {\\n    show: Boolean\\n  }\\n}\\n","options.js":"export default {\\n  props: {\\n    show: Boolean\\n  }\\n}\\n","style.css":".modal-mask {\\n  position: fixed;\\n  z-index: 9998;\\n  top: 0;\\n  left: 0;\\n  width: 100%;\\n  height: 100%;\\n  background-color: rgba(0, 0, 0, 0.5);\\n  display: flex;\\n  transition: opacity 0.3s ease;\\n}\\n\\n.modal-container {\\n  width: 300px;\\n  margin: auto;\\n  padding: 20px 30px;\\n  background-color: #fff;\\n  border-radius: 2px;\\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.33);\\n  transition: all 0.3s ease;\\n}\\n\\n.modal-header h3 {\\n  margin-top: 0;\\n  color: #42b983;\\n}\\n\\n.modal-body {\\n  margin: 20px 0;\\n}\\n\\n.modal-default-button {\\n  float: right;\\n}\\n\\n/*\\n * 对于 transition=\\"modal\\" 的元素来说\\n * 当通过 Vue.js 切换它们的可见性时\\n * 以下样式会被自动应用。\\n *\\n * 你可以简单地通过编辑这些样式\\n * 来体验该模态框的过渡效果。\\n */\\n\\n.modal-enter-from {\\n  opacity: 0;\\n}\\n\\n.modal-leave-to {\\n  opacity: 0;\\n}\\n\\n.modal-enter-from .modal-container,\\n.modal-leave-to .modal-container {\\n  -webkit-transform: scale(1.1);\\n  transform: scale(1.1);\\n}\\n","template.html":"<Transition name=\\"modal\\">\\n  <div v-if=\\"show\\" class=\\"modal-mask\\">\\n    <div class=\\"modal-container\\">\\n      <div class=\\"modal-header\\">\\n        <slot name=\\"header\\">default header</slot>\\n      </div>\\n\\n      <div class=\\"modal-body\\">\\n        <slot name=\\"body\\">default body</slot>\\n      </div>\\n\\n      <div class=\\"modal-footer\\">\\n        <slot name=\\"footer\\">\\n          default footer\\n          <button\\n            class=\\"modal-default-button\\"\\n            @click=\\"$emit('close')\\"\\n          >OK</button>\\n        </slot>\\n      </div>\\n    </div>\\n  </div>\\n</Transition>\\n"},"description.txt":"可定制插槽和 CSS 过渡效果的模态框组件。"},"simple-component":{"App":{"composition.js":"import { ref } from 'vue'\\nimport TodoItem from './TodoItem.vue'\\n\\nexport default {\\n  components: {\\n    TodoItem\\n  },\\n  setup() {\\n    const groceryList = ref([\\n      { id: 0, text: 'Vegetables' },\\n      { id: 1, text: 'Cheese' },\\n      { id: 2, text: 'Whatever else humans are supposed to eat' }\\n    ])\\n\\n    return {\\n      groceryList\\n    }\\n  }\\n}\\n","options.js":"import TodoItem from './TodoItem.vue'\\n\\nexport default {\\n  components: {\\n    TodoItem\\n  },\\n  data() {\\n    return {\\n      groceryList: [\\n        { id: 0, text: 'Vegetables' },\\n        { id: 1, text: 'Cheese' },\\n        { id: 2, text: 'Whatever else humans are supposed to eat' }\\n      ]\\n    }\\n  }\\n}\\n","template.html":"<ol>\\n  <!--\\n    我们给每个 todo 项提供它所表示的 todo 对象，\\n    以便能够动态展示内容。\\n    同时还需要给每个组件提供一个“key”，\\n    这在指南的 v-for 部分有详细解释。\\n  -->\\n  <TodoItem\\n    v-for=\\"item in groceryList\\"\\n    :todo=\\"item\\"\\n    :key=\\"item.id\\"\\n  ></TodoItem>\\n</ol>\\n"},"TodoItem":{"composition.js":"export default {\\n  props: {\\n    todo: Object\\n  }\\n}\\n","options.js":"export default {\\n  props: {\\n    todo: Object\\n  }\\n}\\n","template.html":"<li>{{ todo.text }}</li>\\n"},"description.txt":"这里展示了最简单的组件，它接收一个 prop 并渲染出来。\\n在指南页面了解更多关于组件的内容！"},"svg":{"App":{"composition.js":"import PolyGraph from './PolyGraph.vue'\\nimport { ref, reactive } from 'vue'\\n\\nexport default {\\n  components: {\\n    PolyGraph\\n  },\\n  setup() {\\n    const newLabel = ref('')\\n    const stats = reactive([\\n      { label: 'A', value: 100 },\\n      { label: 'B', value: 100 },\\n      { label: 'C', value: 100 },\\n      { label: 'D', value: 100 },\\n      { label: 'E', value: 100 },\\n      { label: 'F', value: 100 }\\n    ])\\n\\n    function add(e) {\\n      e.preventDefault()\\n      if (!newLabel.value) return\\n      stats.push({\\n        label: newLabel.value,\\n        value: 100\\n      })\\n      newLabel.value = ''\\n    }\\n\\n    function remove(stat) {\\n      if (stats.length > 3) {\\n        stats.splice(stats.indexOf(stat), 1)\\n      } else {\\n        alert(\\"Can't delete more!\\")\\n      }\\n    }\\n\\n    return {\\n      newLabel,\\n      stats,\\n      add,\\n      remove\\n    }\\n  }\\n}\\n","options.js":"import PolyGraph from './PolyGraph.vue'\\n\\nexport default {\\n  components: {\\n    PolyGraph\\n  },\\n  data: () => ({\\n    newLabel: '',\\n    stats: [\\n      { label: 'A', value: 100 },\\n      { label: 'B', value: 100 },\\n      { label: 'C', value: 100 },\\n      { label: 'D', value: 100 },\\n      { label: 'E', value: 100 },\\n      { label: 'F', value: 100 }\\n    ]\\n  }),\\n  methods: {\\n    add(e) {\\n      e.preventDefault()\\n      if (!this.newLabel) return\\n      this.stats.push({\\n        label: this.newLabel,\\n        value: 100\\n      })\\n      this.newLabel = ''\\n    },\\n    remove(stat) {\\n      if (this.stats.length > 3) {\\n        this.stats.splice(this.stats.indexOf(stat), 1)\\n      } else {\\n        alert(\\"Can't delete more!\\")\\n      }\\n    }\\n  }\\n}\\n","style.css":"polygon {\\n  fill: #42b983;\\n  opacity: 0.75;\\n}\\n\\ncircle {\\n  fill: transparent;\\n  stroke: #999;\\n}\\n\\ntext {\\n  font-size: 10px;\\n  fill: #666;\\n}\\n\\nlabel {\\n  display: inline-block;\\n  margin-left: 10px;\\n  width: 20px;\\n}\\n\\n#raw {\\n  position: absolute;\\n  top: 0;\\n  left: 300px;\\n}\\n","template.html":"<svg width=\\"200\\" height=\\"200\\">\\n  <PolyGraph :stats=\\"stats\\"></PolyGraph>\\n</svg>\\n\\n<!-- 控件 -->\\n<div v-for=\\"stat in stats\\">\\n  <label>{{stat.label}}</label>\\n  <input type=\\"range\\" v-model=\\"stat.value\\" min=\\"0\\" max=\\"100\\">\\n  <span>{{stat.value}}</span>\\n  <button @click=\\"remove(stat)\\" class=\\"remove\\">X</button>\\n</div>\\n\\n<form id=\\"add\\">\\n  <input name=\\"newlabel\\" v-model=\\"newLabel\\">\\n  <button @click=\\"add\\">Add a Stat</button>\\n</form>\\n\\n<pre id=\\"raw\\">{{ stats }}</pre>\\n"},"AxisLabel":{"composition.js":"import { computed } from 'vue'\\nimport { valueToPoint } from './util.js'\\n\\nexport default {\\n  props: {\\n    stat: Object,\\n    index: Number,\\n    total: Number\\n  },\\n  setup(props) {\\n    const point = computed(() =>\\n      valueToPoint(+props.stat.value + 10, props.index, props.total)\\n    )\\n\\n    return {\\n      point\\n    }\\n  }\\n}\\n","options.js":"import { valueToPoint } from './util.js'\\n\\nexport default {\\n  props: {\\n    stat: Object,\\n    index: Number,\\n    total: Number\\n  },\\n  computed: {\\n    point: function () {\\n      return valueToPoint(+this.stat.value + 10, this.index, this.total)\\n    }\\n  }\\n}\\n","template.html":"<text :x=\\"point.x\\" :y=\\"point.y\\">{{stat.label}}</text>\\n"},"PolyGraph":{"composition.js":"import AxisLabel from './AxisLabel.vue'\\nimport { computed } from 'vue'\\nimport { valueToPoint } from './util.js'\\n\\nexport default {\\n  components: {\\n    AxisLabel\\n  },\\n  props: {\\n    stats: Array\\n  },\\n  setup(props) {\\n    const points = computed(() => {\\n      const total = props.stats.length\\n      return props.stats\\n        .map((stat, i) => {\\n          const { x, y } = valueToPoint(stat.value, i, total)\\n          return \`\${x},\${y}\`\\n        })\\n        .join(' ')\\n    })\\n\\n    return {\\n      points\\n    }\\n  }\\n}\\n","options.js":"import AxisLabel from './AxisLabel.vue'\\nimport { valueToPoint } from './util.js'\\n\\nexport default {\\n  components: {\\n    AxisLabel\\n  },\\n  props: {\\n    stats: Array\\n  },\\n  computed: {\\n    // 一个用于多边形顶点的计算属性\\n    points() {\\n      const total = this.stats.length\\n      return this.stats\\n        .map((stat, i) => {\\n          const { x, y } = valueToPoint(stat.value, i, total)\\n          return \`\${x},\${y}\`\\n        })\\n        .join(' ')\\n    }\\n  }\\n}\\n","template.html":"<g>\\n  <polygon :points=\\"points\\"></polygon>\\n  <circle cx=\\"100\\" cy=\\"100\\" r=\\"80\\"></circle>\\n  <axis-label\\n    v-for=\\"(stat, index) in stats\\"\\n    :stat=\\"stat\\"\\n    :index=\\"index\\"\\n    :total=\\"stats.length\\"\\n  >\\n  </axis-label>\\n</g>\\n"},"description.txt":"一个 SVG 图像\\n","util.js":"export function valueToPoint(value, index, total) {\\n  const x = 0\\n  const y = -value * 0.8\\n  const angle = ((Math.PI * 2) / total) * index\\n  const cos = Math.cos(angle)\\n  const sin = Math.sin(angle)\\n  const tx = x * cos - y * sin + 100\\n  const ty = x * sin + y * cos + 100\\n  return {\\n    x: tx,\\n    y: ty\\n  }\\n}\\n"},"temperature-converter":{"App":{"composition.js":"import { ref } from 'vue'\\n\\nexport default {\\n  setup() {\\n    const c = ref(0)\\n    const f = ref(32)\\n\\n    function setC(e, v = +e.target.value) {\\n      c.value = v\\n      f.value = v * (9 / 5) + 32\\n    }\\n\\n    function setF(e, v = +e.target.value) {\\n      f.value = v\\n      c.value = (v - 32) * (5 / 9)\\n    }\\n\\n    return {\\n      c,\\n      f,\\n      setC,\\n      setF\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  data() {\\n    return {\\n      c: 0,\\n      f: 32\\n    }\\n  },\\n  methods: {\\n    setC(e, c = +e.target.value) {\\n      this.c = c\\n      this.f = c * (9 / 5) + 32\\n    },\\n    setF(e, f = +e.target.value) {\\n      this.f = f\\n      this.c = (f - 32) * (5 / 9)\\n    }\\n  }\\n}\\n","template.html":"<input type=\\"number\\" :value=\\"c\\" @change=\\"setC\\"> Celsius =\\n<input type=\\"number\\" :value=\\"f\\" @change=\\"setF\\"> Fahrenheit\\n"},"description.txt":"https://eugenkiss.github.io/7guis/tasks/#temp"},"timer":{"App":{"composition.js":"import { ref, onUnmounted, computed } from 'vue'\\nexport default {\\n  setup() {\\n    const duration = ref(15 * 1000)\\n    const elapsed = ref(0)\\n\\n    let lastTime\\n    let handle\\n\\n    const update = () => {\\n      elapsed.value = performance.now() - lastTime\\n      if (elapsed.value >= duration.value) {\\n        cancelAnimationFrame(handle)\\n      } else {\\n        handle = requestAnimationFrame(update)\\n      }\\n    }\\n\\n    const reset = () => {\\n      elapsed.value = 0\\n      lastTime = performance.now()\\n      update()\\n    }\\n\\n    const progressRate = computed(() =>\\n      Math.min(elapsed.value / duration.value, 1)\\n    )\\n\\n    reset()\\n\\n    onUnmounted(() => {\\n      cancelAnimationFrame(handle)\\n    })\\n    return {\\n      duration,\\n      elapsed,\\n      progressRate,\\n      reset\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  data() {\\n    return {\\n      duration: 15 * 1000,\\n      elapsed: 0\\n    }\\n  },\\n  created() {\\n    this.reset()\\n  },\\n  unmounted() {\\n    cancelAnimationFrame(this.handle)\\n  },\\n  computed: {\\n    progressRate() {\\n      return Math.min(this.elapsed / this.duration, 1)\\n    }\\n  },\\n  methods: {\\n    update() {\\n      this.elapsed = performance.now() - this.lastTime\\n      if (this.elapsed >= this.duration) {\\n        cancelAnimationFrame(this.handle)\\n      } else {\\n        this.handle = requestAnimationFrame(this.update)\\n      }\\n    },\\n    reset() {\\n      this.elapsed = 0\\n      this.lastTime = performance.now()\\n      this.update()\\n    }\\n  }\\n}\\n","style.css":".elapsed-container {\\n  width: 300px;\\n}\\n\\n.elapsed-bar {\\n  background-color: red;\\n  height: 10px;\\n}\\n","template.html":"<label\\n  >Elapsed Time: <progress :value=\\"progressRate\\"></progress\\n></label>\\n\\n<div>{{ (elapsed / 1000).toFixed(1) }}s</div>\\n\\n<div>\\n  Duration: <input type=\\"range\\" v-model=\\"duration\\" min=\\"1\\" max=\\"30000\\">\\n  {{ (duration / 1000).toFixed(1) }}s\\n</div>\\n\\n<button @click=\\"reset\\">Reset</button>\\n"},"description.txt":"https://eugenkiss.github.io/7guis/tasks/#timer"},"tree":{"App":{"composition.js":"import { ref } from 'vue'\\nimport TreeItem from './TreeItem.vue'\\n\\nexport default {\\n  components: {\\n    TreeItem\\n  },\\n  setup() {\\n    const treeData = ref({\\n      name: 'My Tree',\\n      children: [\\n        { name: 'hello' },\\n        { name: 'world' },\\n        {\\n          name: 'child folder',\\n          children: [\\n            {\\n              name: 'child folder',\\n              children: [{ name: 'hello' }, { name: 'world' }]\\n            },\\n            { name: 'hello' },\\n            { name: 'world' },\\n            {\\n              name: 'child folder',\\n              children: [{ name: 'hello' }, { name: 'world' }]\\n            }\\n          ]\\n        }\\n      ]\\n    })\\n\\n    return {\\n      treeData\\n    }\\n  }\\n}\\n","options.js":"import TreeItem from './TreeItem.vue'\\n\\nconst treeData = {\\n  name: 'My Tree',\\n  children: [\\n    { name: 'hello' },\\n    { name: 'wat' },\\n    {\\n      name: 'child folder',\\n      children: [\\n        {\\n          name: 'child folder',\\n          children: [{ name: 'hello' }, { name: 'wat' }]\\n        },\\n        { name: 'hello' },\\n        { name: 'wat' },\\n        {\\n          name: 'child folder',\\n          children: [{ name: 'hello' }, { name: 'wat' }]\\n        }\\n      ]\\n    }\\n  ]\\n}\\n\\nexport default {\\n  components: {\\n    TreeItem\\n  },\\n  data() {\\n    return {\\n      treeData\\n    }\\n  }\\n}\\n","style.css":".item {\\n  cursor: pointer;\\n  line-height: 1.5;\\n}\\n.bold {\\n  font-weight: bold;\\n}\\n","template.html":"<ul>\\n  <TreeItem class=\\"item\\" :model=\\"treeData\\"></TreeItem>\\n</ul>\\n"},"TreeItem":{"composition.js":"import { ref, computed } from 'vue'\\n\\nexport default {\\n  name: 'TreeItem', // 在引用自身的时候是必须的\\n  props: {\\n    model: Object\\n  },\\n  setup(props) {\\n    const isOpen = ref(false)\\n    const isFolder = computed(() => {\\n      return props.model.children && props.model.children.length\\n    })\\n\\n    function toggle() {\\n      isOpen.value = !isOpen.value\\n    }\\n\\n    function changeType() {\\n      if (!isFolder.value) {\\n        props.model.children = []\\n        addChild()\\n        isOpen.value = true\\n      }\\n    }\\n\\n    function addChild() {\\n      props.model.children.push({ name: 'new stuff' })\\n    }\\n\\n    return {\\n      isOpen,\\n      isFolder,\\n      toggle,\\n      changeType,\\n      addChild\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  name: 'TreeItem', // 在引用自身的时候是必须的\\n  props: {\\n    model: Object\\n  },\\n  data() {\\n    return {\\n      isOpen: false\\n    }\\n  },\\n  computed: {\\n    isFolder() {\\n      return this.model.children && this.model.children.length\\n    }\\n  },\\n  methods: {\\n    toggle() {\\n      if (this.isFolder) {\\n        this.isOpen = !this.isOpen\\n      }\\n    },\\n    changeType() {\\n      if (!this.isFolder) {\\n        this.model.children = []\\n        this.addChild()\\n        this.isOpen = true\\n      }\\n    },\\n    addChild() {\\n      this.model.children.push({\\n        name: 'new stuff'\\n      })\\n    }\\n  }\\n}\\n","template.html":"<li>\\n  <div\\n    :class=\\"{ bold: isFolder }\\"\\n    @click=\\"toggle\\"\\n    @dblclick=\\"changeType\\">\\n    {{ model.name }}\\n    <span v-if=\\"isFolder\\">[{{ isOpen ? '-' : '+' }}]</span>\\n  </div>\\n  <ul v-show=\\"isOpen\\" v-if=\\"isFolder\\">\\n    <!--\\n      一个可以通过其“name”选项递归渲染自己的组件，\\n      (如果使用单文件组件，则从文件名推断)\\n    -->\\n    <TreeItem\\n      class=\\"item\\"\\n      v-for=\\"model in model.children\\"\\n      :model=\\"model\\">\\n    </TreeItem>\\n    <li class=\\"add\\" @click=\\"addChild\\">+</li>\\n  </ul>\\n</li>\\n"},"description.txt":"一个可以递归渲染自己的嵌套树组件。\\n你可以双击一个项目将其转变为一个文件夹。"}}`),R=x({__name:"ExampleRepl",setup(A){const{vueVersion:s,defaultVersion:d,importMap:u}=p({runtimeDev:()=>`https://unpkg.com/vue@${s.value||d}/dist/vue.esm-browser.js`}),r=m({vueVersion:s,builtinImportMap:u}),i=c("prefer-composition"),t=c("prefer-sfc");y(a,{onTrigger(n){console.log(n);debugger}}),h(a);function a(){let n=location.hash.slice(1);o.hasOwnProperty(n)||(n="hello-world",location.hash=`#${n}`),r.setFiles(t.value?f(o[n],i.value):v(o[n],i.value),t.value?"App.vue":"index.html")}const l=k();return w(()=>{const n=()=>{l.value.style.setProperty("--vh",window.innerHeight+"px")};n(),window.addEventListener("resize",n),j(()=>{window.removeEventListener("resize",n)})}),(n,I)=>(T(),C("div",{ref_key:"heightProvider",ref:l},[D(e(b),{editor:e(g),store:e(r),showImportMap:!e(t),showCompileOutput:!1,clearConsole:!1},null,8,["editor","store","showImportMap"])],512))}});export{R as default};
