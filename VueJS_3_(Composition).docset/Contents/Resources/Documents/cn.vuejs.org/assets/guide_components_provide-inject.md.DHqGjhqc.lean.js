import{_ as n,c as a,b as p,o as l}from"./chunks/framework.B2oIMGqn.js";const o="/assets/prop-drilling.XJXa8UE-.png",e="/assets/provide-inject.C0gAIfVn.png",g=JSON.parse('{"title":"依赖注入","description":"","frontmatter":{},"headers":[{"level":2,"title":"Prop 逐级透传问题","slug":"prop-drilling","link":"#prop-drilling","children":[]},{"level":2,"title":"Provide (提供)","slug":"provide","link":"#provide","children":[]},{"level":2,"title":"应用层 Provide","slug":"app-level-provide","link":"#app-level-provide","children":[]},{"level":2,"title":"Inject (注入)","slug":"inject","link":"#inject","children":[{"level":3,"title":"注入别名","slug":"injection-aliasing","link":"#injection-aliasing","children":[],"optionsOnly":true},{"level":3,"title":"注入默认值","slug":"injection-default-values","link":"#injection-default-values","children":[]}]},{"level":2,"title":"和响应式数据配合使用","slug":"working-with-reactivity","link":"#working-with-reactivity","children":[]},{"level":2,"title":"使用 Symbol 作注入名","slug":"working-with-symbol-keys","link":"#working-with-symbol-keys","children":[]}],"relativePath":"guide/components/provide-inject.md","filePath":"guide/components/provide-inject.md"}'),t={name:"guide/components/provide-inject.md"};function c(r,s,i,E,y,d){return l(),a("div",null,s[0]||(s[0]=[p('<h1 id="provide-inject" tabindex="-1">依赖注入 <a class="header-anchor" href="#provide-inject" aria-label="Permalink to &quot;依赖注入 {#provide-inject}&quot;">​</a></h1><blockquote><p>此章节假设你已经看过了<a href="/guide/essentials/component-basics.html">组件基础</a>。若你还不了解组件是什么，请先阅读该章节。</p></blockquote><h2 id="prop-drilling" tabindex="-1">Prop 逐级透传问题 <a class="header-anchor" href="#prop-drilling" aria-label="Permalink to &quot;Prop 逐级透传问题 {#prop-drilling}&quot;">​</a></h2><p>通常情况下，当我们需要从父组件向子组件传递数据时，会使用 <a href="/guide/components/props.html">props</a>。想象一下这样的结构：有一些多层级嵌套的组件，形成了一棵巨大的组件树，而某个深层的子组件需要一个较远的祖先组件中的部分数据。在这种情况下，如果仅使用 props 则必须将其沿着组件链逐级传递下去，这会非常麻烦：</p><p><img src="'+o+'" alt="Prop 逐级透传的过程图示"></p><p>注意，虽然这里的 <code>&lt;Footer&gt;</code> 组件可能根本不关心这些 props，但为了使 <code>&lt;DeepChild&gt;</code> 能访问到它们，仍然需要定义并向下传递。如果组件链路非常长，可能会影响到更多这条路上的组件。这一问题被称为“prop 逐级透传”，显然是我们希望尽量避免的情况。</p><p><code>provide</code> 和 <code>inject</code> 可以帮助我们解决这一问题 <sup><a href="#footnote-1">[1]</a></sup>。一个父组件相对于其所有的后代组件，会作为<strong>依赖提供者</strong>。任何后代的组件树，无论层级有多深，都可以<strong>注入</strong>由父组件提供给整条链路的依赖。</p><p><img src="'+e+`" alt="Provide/inject 模式"></p><h2 id="provide" tabindex="-1">Provide (提供) <a class="header-anchor" href="#provide" aria-label="Permalink to &quot;Provide (提供) {#provide}&quot;">​</a></h2><div class="composition-api"><p>要为组件后代提供数据，需要使用到 <a href="/api/composition-api-dependency-injection.html#provide"><code>provide()</code></a> 函数：</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> setup</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { provide } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">provide</span><span style="color:#E1E4E8;">(</span><span style="color:#6A737D;">/* 注入名 */</span><span style="color:#9ECBFF;"> &#39;message&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">/* 值 */</span><span style="color:#9ECBFF;"> &#39;hello!&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>如果不使用 <code>&lt;script setup&gt;</code>，请确保 <code>provide()</code> 是在 <code>setup()</code> 同步调用的：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { provide } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  setup</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#B392F0;">    provide</span><span style="color:#E1E4E8;">(</span><span style="color:#6A737D;">/* 注入名 */</span><span style="color:#9ECBFF;"> &#39;message&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">/* 值 */</span><span style="color:#9ECBFF;"> &#39;hello!&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p><code>provide()</code> 函数接收两个参数。第一个参数被称为<strong>注入名</strong>，可以是一个字符串或是一个 <code>Symbol</code>。后代组件会用注入名来查找期望注入的值。一个组件可以多次调用 <code>provide()</code>，使用不同的注入名，注入不同的依赖值。</p><p>第二个参数是提供的值，值可以是任意类型，包括响应式的状态，比如一个 ref：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { ref, provide } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> count</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#B392F0;">provide</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;key&#39;</span><span style="color:#E1E4E8;">, count)</span></span></code></pre></div><p>提供的响应式状态使后代组件可以由此和提供者建立响应式的联系。</p></div><div class="options-api"><p>要为组件后代提供数据，需要使用到 <a href="/api/options-composition.html#provide"><code>provide</code></a> 选项：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  provide: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    message: </span><span style="color:#9ECBFF;">&#39;hello!&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>对于 <code>provide</code> 对象上的每一个属性，后代组件会用其 key 为注入名查找期望注入的值，属性的值就是要提供的数据。</p><p>如果我们需要提供依赖当前组件实例的状态 (比如那些由 <code>data()</code> 定义的数据属性)，那么可以以函数形式使用 <code>provide</code>：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  data</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">    return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      message: </span><span style="color:#9ECBFF;">&#39;hello!&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line highlighted"><span style="color:#B392F0;">  provide</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line highlighted"><span style="color:#6A737D;">    // 使用函数的形式，可以访问到 \`this\`</span></span>
<span class="line highlighted"><span style="color:#F97583;">    return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">      message: </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.message</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">    }</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>然而，请注意这<strong>不会</strong>使注入保持响应性。我们会在后续小节中讨论如何<a href="#working-with-reactivity">让注入转变为响应式</a>。</p></div><h2 id="app-level-provide" tabindex="-1">应用层 Provide <a class="header-anchor" href="#app-level-provide" aria-label="Permalink to &quot;应用层 Provide {#app-level-provide}&quot;">​</a></h2><p>除了在一个组件中提供依赖，我们还可以在整个应用层面提供依赖：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { createApp } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> app</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> createApp</span><span style="color:#E1E4E8;">({})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">provide</span><span style="color:#E1E4E8;">(</span><span style="color:#6A737D;">/* 注入名 */</span><span style="color:#9ECBFF;"> &#39;message&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">/* 值 */</span><span style="color:#9ECBFF;"> &#39;hello!&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre></div><p>在应用级别提供的数据在该应用内的所有组件中都可以注入。这在你编写<a href="/guide/reusability/plugins.html">插件</a>时会特别有用，因为插件一般都不会使用组件形式来提供值。</p><h2 id="inject" tabindex="-1">Inject (注入) <a class="header-anchor" href="#inject" aria-label="Permalink to &quot;Inject (注入) {#inject}&quot;">​</a></h2><div class="composition-api"><p>要注入上层组件提供的数据，需使用 <a href="/api/composition-api-dependency-injection.html#inject"><code>inject()</code></a> 函数：</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> setup</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { inject } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> message</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> inject</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;message&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>如果有多个父组件提供了相同键的数据，注入将解析为组件链上最近的父组件所注入的值。</p><p>如果提供的值是一个 ref，注入进来的会是该 ref 对象，而<strong>不会</strong>自动解包为其内部的值。这使得注入方组件能够通过 ref 对象保持了和供给方的响应性链接。</p><p><a href="https://play.vuejs.org/#eNqFUUFugzAQ/MrKF1IpxfeIVKp66Kk/8MWFDXYFtmUbpArx967BhURRU9/WOzO7MzuxV+fKcUB2YlWovXYRAsbBvQije2d9hAk8Xo7gvB11gzDDxdseCuIUG+ZN6a7JjZIvVRIlgDCcw+d3pmvTglz1okJ499I0C3qB1dJQT9YRooVaSdNiACWdQ5OICj2WwtTWhAg9hiBbhHNSOxQKu84WT8LkNQ9FBhTHXyg1K75aJHNUROxdJyNSBVBp44YI43NvG+zOgmWWYGt7dcipqPhGZEe2ef07wN3lltD+lWN6tNkV/37+rdKjK2rzhRTt7f3u41xhe37/xJZGAL2PLECXa9NKdD/a6QTTtGnP88LgiXJtYv4BaLHhvg==" target="_blank" rel="noreferrer">带有响应性的 provide + inject 完整示例</a></p><p>同样的，如果没有使用 <code>&lt;script setup&gt;</code>，<code>inject()</code> 需要在 <code>setup()</code> 内同步调用：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { inject } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  setup</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">    const</span><span style="color:#79B8FF;"> message</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> inject</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;message&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">    return</span><span style="color:#E1E4E8;"> { message }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></div><div class="options-api"><p>要注入上层组件提供的数据，需使用 <a href="/api/options-composition.html#inject"><code>inject</code></a> 选项来声明：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  inject: [</span><span style="color:#9ECBFF;">&#39;message&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#B392F0;">  created</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.message) </span><span style="color:#6A737D;">// injected value</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>注入会在组件自身的状态<strong>之前</strong>被解析，因此你可以在 <code>data()</code> 中访问到注入的属性：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  inject: [</span><span style="color:#9ECBFF;">&#39;message&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#B392F0;">  data</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">    return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">      // 基于注入值的初始数据</span></span>
<span class="line"><span style="color:#E1E4E8;">      fullMessage: </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.message</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>如果有多个父组件提供了相同键的数据，注入将解析为组件链上最近的父组件所注入的值。</p><p><a href="https://play.vuejs.org/#eNqNkcFqwzAQRH9l0EUthOhuRKH00FO/oO7B2JtERZaEvA4F43+vZCdOTAIJCImRdpi32kG8h7A99iQKobs6msBvpTNt8JHxcTC2wS76FnKrJpVLZelKR39TSUO7qreMoXRA7ZPPkeOuwHByj5v8EqI/moZeXudCIBL30Z0V0FLXVXsqIA9krU8R+XbMR9rS0mqhS4KpDbZiSgrQc5JKQqvlRWzEQnyvuc9YuWbd4eXq+TZn0IvzOeKr8FvsNcaK/R6Ocb9Uc4FvefpE+fMwP0wH8DU7wB77nIo6x6a2hvNEME5D0CpbrjnHf+8excI=" target="_blank" rel="noreferrer">完整的 provide + inject 示例</a></p><h3 id="injection-aliasing" tabindex="-1">注入别名 <a class="header-anchor" href="#injection-aliasing" aria-label="Permalink to &quot;注入别名 \\* {#injection-aliasing}&quot;">​</a></h3><p>当以数组形式使用 <code>inject</code>，注入的属性会以同名的 key 暴露到组件实例上。在上面的例子中，提供的属性名为 <code>&quot;message&quot;</code>，注入后以 <code>this.message</code> 的形式暴露。访问的本地属性名和注入名是相同的。</p><p>如果我们想要用一个不同的本地属性名注入该属性，我们需要在 <code>inject</code> 选项的属性上使用对象的形式：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  inject: {</span></span>
<span class="line"><span style="color:#6A737D;">    /* 本地属性名 */</span><span style="color:#E1E4E8;"> localMessage: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      from: </span><span style="color:#6A737D;">/* 注入来源名 */</span><span style="color:#9ECBFF;"> &#39;message&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>这里，组件本地化了原注入名 <code>&quot;message&quot;</code> 所提供的属性，并将其暴露为 <code>this.localMessage</code>。</p></div><h3 id="injection-default-values" tabindex="-1">注入默认值 <a class="header-anchor" href="#injection-default-values" aria-label="Permalink to &quot;注入默认值 {#injection-default-values}&quot;">​</a></h3><p>默认情况下，<code>inject</code> 假设传入的注入名会被某个祖先链上的组件提供。如果该注入名的确没有任何组件提供，则会抛出一个运行时警告。</p><p>如果在注入一个值时不要求必须有提供者，那么我们应该声明一个默认值，和 props 类似：</p><div class="composition-api"><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 如果没有祖先组件提供 &quot;message&quot;</span></span>
<span class="line"><span style="color:#6A737D;">// \`value\` 会是 &quot;这是默认值&quot;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> value</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> inject</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;message&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;这是默认值&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre></div><p>在一些场景中，默认值可能需要通过调用一个函数或初始化一个类来取得。为了避免在用不到默认值的情况下进行不必要的计算或产生副作用，我们可以使用工厂函数来创建默认值：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> value</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> inject</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;key&#39;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> ExpensiveClass</span><span style="color:#E1E4E8;">(), </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">)</span></span></code></pre></div><p>第三个参数表示默认值应该被当作一个工厂函数。</p></div><div class="options-api"><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">  // 当声明注入的默认值时</span></span>
<span class="line"><span style="color:#6A737D;">  // 必须使用对象形式</span></span>
<span class="line"><span style="color:#E1E4E8;">  inject: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    message: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      from: </span><span style="color:#9ECBFF;">&#39;message&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 当与原注入名同名时，这个属性是可选的</span></span>
<span class="line"><span style="color:#E1E4E8;">      default: </span><span style="color:#9ECBFF;">&#39;default value&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    user: {</span></span>
<span class="line"><span style="color:#6A737D;">      // 对于非基础类型数据，如果创建开销比较大，或是需要确保每个组件实例</span></span>
<span class="line"><span style="color:#6A737D;">      // 需要独立数据的，请使用工厂函数</span></span>
<span class="line"><span style="color:#B392F0;">      default</span><span style="color:#E1E4E8;">: () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> ({ name: </span><span style="color:#9ECBFF;">&#39;John&#39;</span><span style="color:#E1E4E8;"> })</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></div><h2 id="working-with-reactivity" tabindex="-1">和响应式数据配合使用 <a class="header-anchor" href="#working-with-reactivity" aria-label="Permalink to &quot;和响应式数据配合使用 {#working-with-reactivity}&quot;">​</a></h2><div class="composition-api"><p>当提供 / 注入响应式的数据时，<strong>建议尽可能将任何对响应式状态的变更都保持在供给方组件中</strong>。这样可以确保所提供状态的声明和变更操作都内聚在同一个组件内，使其更容易维护。</p><p>有的时候，我们可能需要在注入方组件中更改数据。在这种情况下，我们推荐在供给方组件内声明并提供一个更改数据的方法函数：</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">&lt;!-- 在供给方组件内 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> setup</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { provide, ref } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> location</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;North Pole&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> updateLocation</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">  location.value </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &#39;South Pole&#39;</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">provide</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;location&#39;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">  location,</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">  updateLocation</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">&lt;!-- 在注入方组件 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> setup</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { inject } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">location</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">updateLocation</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> inject</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;location&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">button</span><span style="color:#B392F0;"> @click</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;updateLocation&quot;</span><span style="color:#E1E4E8;">&gt;{{ location }}&lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>最后，如果你想确保提供的数据不能被注入方的组件更改，你可以使用 <a href="/api/reactivity-core.html#readonly"><code>readonly()</code></a> 来包装提供的值。</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> setup</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { ref, provide, readonly } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> count</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#B392F0;">provide</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;read-only-count&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">readonly</span><span style="color:#E1E4E8;">(count))</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div></div><div class="options-api"><p>为保证注入方和供给方之间的响应性链接，我们需要使用 <a href="/api/reactivity-core.html#computed">computed()</a> 函数提供一个计算属性：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { computed } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  data</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">    return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      message: </span><span style="color:#9ECBFF;">&#39;hello!&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#B392F0;">  provide</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line highlighted"><span style="color:#F97583;">    return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">      // 显式提供一个计算属性</span></span>
<span class="line"><span style="color:#E1E4E8;">      message: </span><span style="color:#B392F0;">computed</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#79B8FF;"> this</span><span style="color:#E1E4E8;">.message)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://play.vuejs.org/#eNqNUctqwzAQ/JVFFyeQxnfjBEoPPfULqh6EtYlV9EKWTcH43ytZtmPTQA0CsdqZ2dlRT16tPXctkoKUTeWE9VeqhbLGeXirheRwc0ZBds7HKkKzBdBDZZRtPXIYJlzqU40/I4LjjbUyIKmGEWw0at8UgZrUh1PscObZ4ZhQAA596/RcAShsGnbHArIapTRBP74O8Up060wnOO5QmP0eAvZyBV+L5jw1j2tZqsMp8yWRUHhUVjKPoQIohQ460L0ow1FeKJlEKEnttFweijJfiORElhCf5f3umObb0B9PU/I7kk17PJj7FloN/2t7a2Pj/Zkdob+x8gV8ZlMs2de/8+14AXwkBngD9zgVqjg2rNXPvwjD+EdlHilrn8MvtvD1+Q==" target="_blank" rel="noreferrer">带有响应性的 provide + inject 完整示例</a></p><p><code>computed()</code> 函数常用于组合式 API 风格的组件中，但它同样还可以用于补充选项式 API 风格的某些用例。你可以通过阅读<a href="/guide/essentials/reactivity-fundamentals.html">响应式系统基础</a>和<a href="/guide/essentials/computed.html">计算属性</a>两个章节了解更多组合式的 API 风格。</p></div><h2 id="working-with-symbol-keys" tabindex="-1">使用 Symbol 作注入名 <a class="header-anchor" href="#working-with-symbol-keys" aria-label="Permalink to &quot;使用 Symbol 作注入名 {#working-with-symbol-keys}&quot;">​</a></h2><p>至此，我们已经了解了如何使用字符串作为注入名。但如果你正在构建大型的应用，包含非常多的依赖提供，或者你正在编写提供给其他开发者使用的组件库，建议最好使用 Symbol 来作为注入名以避免潜在的冲突。</p><p>我们通常推荐在一个单独的文件中导出这些注入名 Symbol：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// keys.js</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> const</span><span style="color:#79B8FF;"> myInjectionKey</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> Symbol</span><span style="color:#E1E4E8;">()</span></span></code></pre></div><div class="composition-api"><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 在供给方组件中</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { provide } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { myInjectionKey } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;./keys.js&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">provide</span><span style="color:#E1E4E8;">(myInjectionKey, { </span></span>
<span class="line"><span style="color:#6A737D;">  /* 要提供的数据 */</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 注入方组件</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { inject } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { myInjectionKey } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;./keys.js&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> injected</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> inject</span><span style="color:#E1E4E8;">(myInjectionKey)</span></span></code></pre></div><p>TypeScript 用户请参考：<a href="/guide/typescript/composition-api.html#typing-provide-inject">为 Provide / Inject 标注类型</a> <sup class="vt-badge ts"></sup></p></div><div class="options-api"><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 在供给方组件中</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { myInjectionKey } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;./keys.js&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  provide</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">    return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      [myInjectionKey]: {</span></span>
<span class="line"><span style="color:#6A737D;">        /* 要提供的数据 */</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 注入方组件</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { myInjectionKey } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;./keys.js&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  inject: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    injected: { from: myInjectionKey }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></div><small><p><strong>译者注</strong></p><p><a id="footnote-1"></a>[1] 在本章及后续章节中，“<strong>提供</strong>”将成为对应 Provide 的一个专有概念</p></small>`,33)]))}const u=n(t,[["render",c]]);export{g as __pageData,u as default};
