import{_ as a,c as n,b as l,o as p}from"./chunks/framework.B2oIMGqn.js";const u=JSON.parse('{"title":"单文件组件","description":"","frontmatter":{},"headers":[{"level":2,"title":"介绍","slug":"introduction","link":"#introduction","children":[]},{"level":2,"title":"为什么要使用单文件组件","slug":"why-sfc","link":"#why-sfc","children":[]},{"level":2,"title":"单文件组件是如何工作的","slug":"how-it-works","link":"#how-it-works","children":[]},{"level":2,"title":"如何看待关注点分离？","slug":"what-about-separation-of-concerns","link":"#what-about-separation-of-concerns","children":[]}],"relativePath":"guide/scaling-up/sfc.md","filePath":"guide/scaling-up/sfc.md"}'),e={name:"guide/scaling-up/sfc.md"};function o(t,s,c,r,i,E){return p(),n("div",null,s[0]||(s[0]=[l(`<h1 id="single-file-components" tabindex="-1">单文件组件 <a class="header-anchor" href="#single-file-components" aria-label="Permalink to &quot;单文件组件 {#single-file-components}&quot;">​</a></h1><h2 id="introduction" tabindex="-1">介绍 <a class="header-anchor" href="#introduction" aria-label="Permalink to &quot;介绍 {#introduction}&quot;">​</a></h2><p>Vue 的单文件组件 (即 <code>*.vue</code> 文件，英文 Single-File Component，简称 <strong>SFC</strong>) 是一种特殊的文件格式，使我们能够将一个 Vue 组件的模板、逻辑与样式封装在单个文件中。下面是一个单文件组件的示例：</p><div class="options-api"><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  data</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">    return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      greeting: </span><span style="color:#9ECBFF;">&#39;Hello World!&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">p</span><span style="color:#B392F0;"> class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;greeting&quot;</span><span style="color:#E1E4E8;">&gt;{{ greeting }}&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">style</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">.greeting</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#79B8FF;">  color</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">red</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#79B8FF;">  font-weight</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">bold</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">style</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div></div><div class="composition-api"><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> setup</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { ref } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> greeting</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Hello World!&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">p</span><span style="color:#B392F0;"> class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;greeting&quot;</span><span style="color:#E1E4E8;">&gt;{{ greeting }}&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">style</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#B392F0;">.greeting</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#79B8FF;">  color</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">red</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#79B8FF;">  font-weight</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">bold</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">style</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div></div><p>如你所见，Vue 的单文件组件是网页开发中 HTML、CSS 和 JavaScript 三种语言经典组合的自然延伸。<code>&lt;template&gt;</code>、<code>&lt;script&gt;</code> 和 <code>&lt;style&gt;</code> 三个块在同一个文件中封装、组合了组件的视图、逻辑和样式。完整的语法定义可以查阅<a href="/api/sfc-spec.html">单文件组件语法说明</a>。</p><h2 id="why-sfc" tabindex="-1">为什么要使用单文件组件 <a class="header-anchor" href="#why-sfc" aria-label="Permalink to &quot;为什么要使用单文件组件 {#why-sfc}&quot;">​</a></h2><p>使用单文件组件必须使用构建工具，但作为回报带来了以下优点：</p><ul><li>使用熟悉的 HTML、CSS 和 JavaScript 语法编写模块化的组件</li><li><a href="#what-about-separation-of-concerns">让本来就强相关的关注点自然内聚</a></li><li>预编译模板，避免运行时的编译开销</li><li><a href="/api/sfc-css-features.html">组件作用域的 CSS</a></li><li><a href="/api/sfc-script-setup.html">在使用组合式 API 时语法更简单</a></li><li>通过交叉分析模板和逻辑代码能进行更多编译时优化</li><li><a href="/guide/scaling-up/tooling.html#ide-support">更好的 IDE 支持</a>，提供自动补全和对模板中表达式的类型检查</li><li>开箱即用的模块热更新 (HMR) 支持</li></ul><p>单文件组件是 Vue 框架提供的一个功能，并且在下列场景中都是官方推荐的项目组织方式：</p><ul><li>单页面应用 (SPA)</li><li>静态站点生成 (SSG)</li><li>任何值得引入构建步骤以获得更好的开发体验 (DX) 的项目</li></ul><p>当然，在一些轻量级场景下使用单文件组件会显得有些杀鸡用牛刀。因此 Vue 同样也可以在无构建步骤的情况下以纯 JavaScript 方式使用。如果你的用例只需要给静态 HTML 添加一些简单的交互，你可以看看 <a href="https://github.com/vuejs/petite-vue" target="_blank" rel="noreferrer">petite-vue</a>，它是一个 6 kB 左右、预优化过的 Vue 子集，更适合渐进式增强的需求。</p><h2 id="how-it-works" tabindex="-1">单文件组件是如何工作的 <a class="header-anchor" href="#how-it-works" aria-label="Permalink to &quot;单文件组件是如何工作的 {#how-it-works}&quot;">​</a></h2><p>Vue 单文件组件是一个框架指定的文件格式，因此必须交由 <a href="https://github.com/vuejs/core/tree/main/packages/compiler-sfc" target="_blank" rel="noreferrer">@vue/compiler-sfc</a> 编译为标准的 JavaScript 和 CSS，一个编译后的单文件组件是一个标准的 JavaScript(ES) 模块，这也意味着在构建配置正确的前提下，你可以像导入其他 ES 模块一样导入单文件组件：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> MyComponent </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;./MyComponent.vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  components: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    MyComponent</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>单文件组件中的 <code>&lt;style&gt;</code> 标签一般会在开发时注入成原生的 <code>&lt;style&gt;</code> 标签以支持热更新，而生产环境下它们会被抽取、合并成单独的 CSS 文件。</p><p>你可以在 <a href="https://play.vuejs.org/" target="_blank" rel="noreferrer">Vue 单文件组件演练场</a>中实际使用一下单文件组件，同时可以看到它们最终被编译后的样子。</p><p>在实际项目中，我们一般会使用集成了单文件组件编译器的构建工具，比如 <a href="https://cn.vitejs.dev/" target="_blank" rel="noreferrer">Vite</a> 或者 <a href="https://cli.vuejs.org/zh/" target="_blank" rel="noreferrer">Vue CLI</a> (基于 <a href="https://webpack.js.org/" target="_blank" rel="noreferrer">webpack</a>)，Vue 官方也提供了脚手架工具来帮助你尽可能快速地上手开发单文件组件。更多细节请查看<a href="/guide/scaling-up/tooling.html">单文件组件工具链</a>章节。</p><h2 id="what-about-separation-of-concerns" tabindex="-1">如何看待关注点分离？ <a class="header-anchor" href="#what-about-separation-of-concerns" aria-label="Permalink to &quot;如何看待关注点分离？ {#what-about-separation-of-concerns}&quot;">​</a></h2><p>一些有着传统 Web 开发背景的用户可能会因为单文件组件将不同的关注点集合在一处而有所顾虑，觉得 HTML/CSS/JS 应当是分离开的！</p><p>要回答这个问题，我们必须对这一点达成共识：<strong>前端开发的关注点不是完全基于文件类型分离的</strong>。前端工程化的最终目的都是为了能够更好地维护代码。关注点分离不应该是教条式地将其视为文件类型的区别和分离，仅仅这样并不够帮我们在日益复杂的前端应用的背景下提高开发效率。</p><p>在现代的 UI 开发中，我们发现与其将代码库划分为三个巨大的层，相互交织在一起，不如将它们划分为松散耦合的组件，再按需组合起来。在一个组件中，其模板、逻辑和样式本就是有内在联系的、是耦合的，将它们放在一起，实际上使组件更有内聚性和可维护性。</p><p>即使你不喜欢单文件组件这样的形式而仍然选择拆分单独的 JavaScript 和 CSS 文件，也没关系，你还是可以通过<a href="/api/sfc-spec.html#src-imports">资源导入</a>功能获得热更新和预编译等功能的支持。</p>`,23)]))}const d=a(e,[["render",o]]);export{u as __pageData,d as default};
