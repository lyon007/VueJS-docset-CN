import{_ as a,c as n,b as l,o as p}from"./chunks/framework.B2oIMGqn.js";const d=JSON.parse('{"title":"响应性语法糖","description":"","frontmatter":{},"headers":[{"level":2,"title":"ref vs. 响应式变量","slug":"refs-vs-reactive-variables","link":"#refs-vs-reactive-variables","children":[]},{"level":2,"title":"通过 $() 解构","slug":"destructuring-with","link":"#destructuring-with","children":[]},{"level":2,"title":"用 $() 将现存的 ref 转换为响应式对象","slug":"convert-existing-refs-to-reactive-variables-with","link":"#convert-existing-refs-to-reactive-variables-with","children":[]},{"level":2,"title":"响应式 props 解构","slug":"reactive-props-destructure","link":"#reactive-props-destructure","children":[]},{"level":2,"title":"保持在函数间传递时的响应性","slug":"retaining-reactivity-across-function-boundaries","link":"#retaining-reactivity-across-function-boundaries","children":[{"level":3,"title":"以参数形式传入函数","slug":"passing-into-function-as-argument","link":"#passing-into-function-as-argument","children":[]},{"level":3,"title":"作为函数返回值","slug":"returning-inside-function-scope","link":"#returning-inside-function-scope","children":[]},{"level":3,"title":"在已解构的 props 上使用 $$()","slug":"using-on-destructured-props","link":"#using-on-destructured-props","children":[]}]},{"level":2,"title":"TypeScript 集成","slug":"typescript-integration","link":"#typescript-integration","children":[]},{"level":2,"title":"显式启用","slug":"explicit-opt-in","link":"#explicit-opt-in","children":[{"level":3,"title":"Vite","slug":"vite","link":"#vite","children":[]},{"level":3,"title":"vue-cli","slug":"vue-cli","link":"#vue-cli","children":[]},{"level":3,"title":"仅用 webpack + vue-loader","slug":"plain-webpack-vue-loader","link":"#plain-webpack-vue-loader","children":[]}]}],"relativePath":"guide/extras/reactivity-transform.md","filePath":"guide/extras/reactivity-transform.md"}'),e={name:"guide/extras/reactivity-transform.md"};function o(t,s,c,r,i,E){return p(),n("div",null,s[0]||(s[0]=[l(`<h1 id="reactivity-transform" tabindex="-1">响应性语法糖 <a class="header-anchor" href="#reactivity-transform" aria-label="Permalink to &quot;响应性语法糖 {#reactivity-transform}&quot;">​</a></h1><div class="danger custom-block"><p class="custom-block-title">已移除的实验性功能</p><p>响应性语法糖曾经是一个实验性功能，且已在最新的 3.4 版本中被移除，请阅读<a href="https://github.com/vuejs/rfcs/discussions/369#discussioncomment-5059028" target="_blank" rel="noreferrer">废弃原因</a>。</p><p>如果仍然打算使用它，你现在可以使用 <a href="https://vue-macros.sxzz.moe/features/reactivity-transform.html" target="_blank" rel="noreferrer">Vue Macros</a> 插件。</p></div><div class="tip custom-block"><p class="custom-block-title">组合式 API 特有</p><p>响应性语法糖是组合式 API 特有的功能，且必须通过构建步骤使用。</p></div><h2 id="refs-vs-reactive-variables" tabindex="-1">ref vs. 响应式变量 <a class="header-anchor" href="#refs-vs-reactive-variables" aria-label="Permalink to &quot;ref vs. 响应式变量 {#refs-vs-reactive-variables}&quot;">​</a></h2><p>自从引入组合式 API 的概念以来，一个主要的未解决的问题就是 ref 和响应式对象到底用哪个。响应式对象存在解构丢失响应性的问题，而 ref 需要到处使用 <code>.value</code> 则感觉很繁琐，并且在没有类型系统的帮助时很容易漏掉 <code>.value</code>。</p><p><a href="https://github.com/vuejs/core/tree/main/packages/reactivity-transform" target="_blank" rel="noreferrer">Vue 的响应性语法糖</a>是一个编译时的转换步骤，让我们可以像这样书写代码：</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> setup</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> count </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> $ref</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(count)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> increment</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  count</span><span style="color:#F97583;">++</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">button</span><span style="color:#B392F0;"> @click</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;increment&quot;</span><span style="color:#E1E4E8;">&gt;{{ count }}&lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>这里的这个 <code>$ref()</code> 方法是一个<strong>编译时的宏命令</strong>：它不是一个真实的、在运行时会调用的方法。而是用作 Vue 编译器的标记，表明最终的 <code>count</code> 变量需要是一个<strong>响应式变量</strong>。</p><p>响应式的变量可以像普通变量那样被访问和重新赋值，但这些操作在编译后都会变为带 <code>.value</code> 的 ref。比如上面例子中 <code>&lt;script&gt;</code> 部分的代码就被编译成了下面这样：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { ref } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> count </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(count.value)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> increment</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">  count.value</span><span style="color:#F97583;">++</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>每一个会返回 ref 的响应式 API 都有一个相对应的、以 <code>$</code> 为前缀的宏函数。包括以下这些 API：</p><ul><li><a href="/api/reactivity-core.html#ref"><code>ref</code></a> -&gt; <code>$ref</code></li><li><a href="/api/reactivity-core.html#computed"><code>computed</code></a> -&gt; <code>$computed</code></li><li><a href="/api/reactivity-advanced.html#shallowref"><code>shallowRef</code></a> -&gt; <code>$shallowRef</code></li><li><a href="/api/reactivity-advanced.html#customref"><code>customRef</code></a> -&gt; <code>$customRef</code></li><li><a href="/api/reactivity-utilities.html#toref"><code>toRef</code></a> -&gt; <code>$toRef</code></li></ul><p>当启用响应性语法糖时，这些宏函数都是全局可用的、无需手动导入。但如果你想让它更明显，你也可以选择从 <code>vue/macros</code> 中引入它们：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { $ref } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue/macros&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> count </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> $ref</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span></code></pre></div><h2 id="destructuring-with" tabindex="-1">通过 <code>$()</code> 解构 <a class="header-anchor" href="#destructuring-with" aria-label="Permalink to &quot;通过 \`$()\` 解构 {#destructuring-with}&quot;">​</a></h2><p>我们常常会让一个组合函数返回一个含数个 ref 的对象，然后解构得到这些 ref。对于这种场景，响应性语法糖提供了一个 <strong><code>$()</code></strong> 宏：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { useMouse } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;@vueuse/core&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">x</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">y</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> $</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">useMouse</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(x, y)</span></span></code></pre></div><p>编译输出为：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { toRef } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { useMouse } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;@vueuse/core&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> __temp</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> useMouse</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#79B8FF;">  x</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> toRef</span><span style="color:#E1E4E8;">(__temp, </span><span style="color:#9ECBFF;">&#39;x&#39;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#79B8FF;">  y</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> toRef</span><span style="color:#E1E4E8;">(__temp, </span><span style="color:#9ECBFF;">&#39;y&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(x.value, y.value)</span></span></code></pre></div><p>请注意如果 <code>x</code> 已经是一个 ref，<code>toRef(__temp, &#39;x&#39;)</code> 则会简单地返回它本身，而不会再创建新的 ref。如果一个被解构的值不是 ref (例如是一个函数)，也仍然可以使用，这个值会被包装进一个 ref，因此其他代码都会正常工作。</p><p>对 <code>$()</code> 的解构在响应式对象<strong>和</strong>包含数个 ref 的对象都可用。</p><h2 id="convert-existing-refs-to-reactive-variables-with" tabindex="-1">用 <code>$()</code> 将现存的 ref 转换为响应式对象 <a class="header-anchor" href="#convert-existing-refs-to-reactive-variables-with" aria-label="Permalink to &quot;用 \`$()\` 将现存的 ref 转换为响应式对象 {#convert-existing-refs-to-reactive-variables-with}&quot;">​</a></h2><p>在某些场景中我们可能已经有了会返回 ref 的函数。然而，Vue 编译器并不能够提前知道该函数会返回一个 ref。那么此时可以使用 <code>$()</code> 宏来将现存的 ref 转换为响应式变量。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> myCreateRef</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">  return</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> count </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> $</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">myCreateRef</span><span style="color:#E1E4E8;">())</span></span></code></pre></div><h2 id="reactive-props-destructure" tabindex="-1">响应式 props 解构 <a class="header-anchor" href="#reactive-props-destructure" aria-label="Permalink to &quot;响应式 props 解构 {#reactive-props-destructure}&quot;">​</a></h2><p>现在的 <code>&lt;script setup&gt;</code> 中对 <code>defineProps</code> 宏的使用有两个痛点：</p><ol><li><p>和 <code>.value</code> 类似，为了保持响应性，你始终需要以 <code>props.x</code> 的方式访问这些 prop。这意味着你不能够解构 <code>defineProps</code> 的返回值，因为得到的变量将不是响应式的、也不会更新。</p></li><li><p>当使用<a href="https://v3.vuejs.org/api/sfc-script-setup#type-only-props-emit-declarations" target="_blank" rel="noreferrer">基于类型的 props 的声明</a>时，无法很方便地声明这些 prop 的默认值。为此我们提供了 <code>withDefaults()</code> 这个 API，但使用起来仍然很笨拙。</p></li></ol><p>当 <code>defineProps</code> 与解构一起使用时，我们可以通过应用编译时转换来解决这些问题，类似于我们之前看到的 <code>$()</code>：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> setup</span><span style="color:#B392F0;"> lang</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;ts&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">  interface</span><span style="color:#B392F0;"> Props</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#FFAB70;">    msg</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span></span>
<span class="line"><span style="color:#FFAB70;">    count</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> number</span></span>
<span class="line"><span style="color:#FFAB70;">    foo</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> string</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#79B8FF;">    msg</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#6A737D;">    // 默认值正常可用</span></span>
<span class="line"><span style="color:#79B8FF;">    count</span><span style="color:#F97583;"> =</span><span style="color:#79B8FF;"> 1</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#6A737D;">    // 解构时命别名也可用</span></span>
<span class="line"><span style="color:#6A737D;">    // 这里我们就将 \`props.foo\` 命别名为 \`bar\`</span></span>
<span class="line"><span style="color:#FFAB70;">    foo</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">bar</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> defineProps</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">Props</span><span style="color:#E1E4E8;">&gt;()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">  watchEffect</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    // 会在 props 变化时打印</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(msg, count, bar)</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>上面的代码将被编译成下面这样的运行时声明：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  props: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    msg: { type: String, required: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">    count: { type: Number, default: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">    foo: String</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#B392F0;">  setup</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">props</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#B392F0;">    watchEffect</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(props.msg, props.count, props.foo)</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><h2 id="retaining-reactivity-across-function-boundaries" tabindex="-1">保持在函数间传递时的响应性 <a class="header-anchor" href="#retaining-reactivity-across-function-boundaries" aria-label="Permalink to &quot;保持在函数间传递时的响应性 {#retaining-reactivity-across-function-boundaries}&quot;">​</a></h2><p>虽然响应式变量使我们可以不再受 <code>.value</code> 的困扰，但它也使得我们在函数间传递响应式变量时可能造成“响应性丢失”的问题。这可能在以下两种场景中出现：</p><h3 id="passing-into-function-as-argument" tabindex="-1">以参数形式传入函数 <a class="header-anchor" href="#passing-into-function-as-argument" aria-label="Permalink to &quot;以参数形式传入函数 {#passing-into-function-as-argument}&quot;">​</a></h3><p>假设有一个期望接收一个 ref 对象为参数的函数：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> trackChange</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">x</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Ref</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">&gt;) {</span></span>
<span class="line"><span style="color:#B392F0;">  watch</span><span style="color:#E1E4E8;">(x, (</span><span style="color:#FFAB70;">x</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;x 改变了！&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> count </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> $ref</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#B392F0;">trackChange</span><span style="color:#E1E4E8;">(count) </span><span style="color:#6A737D;">// 无效！</span></span></code></pre></div><p>上面的例子不会正常工作，因为代码被编译成了这样：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> count </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#B392F0;">trackChange</span><span style="color:#E1E4E8;">(count.value)</span></span></code></pre></div><p>这里的 <code>count.value</code> 是以一个 number 类型值的形式传入，然而 <code>trackChange</code> 期望接收的是一个真正的 ref。要解决这个问题，可以在将 <code>count</code> 作为参数传入之前，用 <code>$$()</code> 包装：</p><div class="language-diff"><button title="Copy Code" class="copy"></button><span class="lang">diff</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">let count = $ref(0)</span></span>
<span class="line"><span style="color:#FDAEB7;">- trackChange(count)</span></span>
<span class="line"><span style="color:#85E89D;">+ trackChange($$(count))</span></span></code></pre></div><p>上面的代码将被编译成：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { ref } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> count </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#B392F0;">trackChange</span><span style="color:#E1E4E8;">(count)</span></span></code></pre></div><p>我们可以看到，<code>$$()</code> 的效果就像是一个<strong>转义标识</strong>：<code>$$()</code> 中的响应式变量不会追加上 <code>.value</code>。</p><h3 id="returning-inside-function-scope" tabindex="-1">作为函数返回值 <a class="header-anchor" href="#returning-inside-function-scope" aria-label="Permalink to &quot;作为函数返回值 {#returning-inside-function-scope}&quot;">​</a></h3><p>如果将响应式变量直接放在返回值表达式中会丢失掉响应性：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> useMouse</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">  let</span><span style="color:#E1E4E8;"> x </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> $ref</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">  let</span><span style="color:#E1E4E8;"> y </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> $ref</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  // 监听 mousemove 事件</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  // 不起效！</span></span>
<span class="line"><span style="color:#F97583;">  return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    x,</span></span>
<span class="line"><span style="color:#E1E4E8;">    y</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>上面的语句将被翻译为：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  x: x.value,</span></span>
<span class="line"><span style="color:#E1E4E8;">  y: y.value</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>为了保持响应性，我们需要返回的是真正的 ref，而不是返回时 ref 内的值。</p><p>我们还是可以使用 <code>$$()</code> 来解决这个问题。在这个例子中，<code>$$()</code> 可以直接用在要返回的对象上，<code>$$()</code> 调用时任何对响应式变量的引用都会保留为对相应 ref 的引用：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> useMouse</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">  let</span><span style="color:#E1E4E8;"> x </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> $ref</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">  let</span><span style="color:#E1E4E8;"> y </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> $ref</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  // 监听 mousemove 事件</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  // 修改后起效</span></span>
<span class="line"><span style="color:#F97583;">  return</span><span style="color:#B392F0;"> $$</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    x,</span></span>
<span class="line"><span style="color:#E1E4E8;">    y</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><h3 id="using-on-destructured-props" tabindex="-1">在已解构的 props 上使用 <code>$$()</code> <a class="header-anchor" href="#using-on-destructured-props" aria-label="Permalink to &quot;在已解构的 props 上使用 \`$$()\` {#using-on-destructured-props}&quot;">​</a></h3><p><code>$$()</code> 也适用于已解构的 props，因为它们也是响应式的变量。编译器会高效地通过 <code>toRef</code> 来做转换：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">count</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> defineProps</span><span style="color:#E1E4E8;">&lt;{ </span><span style="color:#FFAB70;">count</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> number</span><span style="color:#E1E4E8;"> }&gt;()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">passAsRef</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">$$</span><span style="color:#E1E4E8;">(count))</span></span></code></pre></div><p>编译结果为：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">setup</span><span style="color:#E1E4E8;">(props) {</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> __props_count</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> toRef</span><span style="color:#E1E4E8;">(props, </span><span style="color:#9ECBFF;">&#39;count&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#B392F0;">  passAsRef</span><span style="color:#E1E4E8;">(__props_count)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><h2 id="typescript-integration" tabindex="-1">TypeScript 集成 <sup class="vt-badge ts"></sup> <a class="header-anchor" href="#typescript-integration" aria-label="Permalink to &quot;TypeScript 集成 &lt;sup class=&quot;vt-badge ts&quot; /&gt; {#typescript-integration}&quot;">​</a></h2><p>Vue 为这些宏函数都提供了类型声明 (全局可用)，因此类型推导都会符合预期。它与标准的 TypeScript 语义没有不兼容之处，因此它的语法可以与所有现有的工具兼容。</p><p>这也意味着这些宏函数在任何 JS / TS 文件中都是合法的，不是仅能在 Vue 单文件组件中使用。</p><p>因为这些宏函数都是全局可用的，它们的类型需要被显式地引用 (例如，在 <code>env.d.ts</code> 文件中)：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">/// &lt;</span><span style="color:#85E89D;">reference</span><span style="color:#B392F0;"> types</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;vue/macros-global&quot;</span><span style="color:#6A737D;"> /&gt;</span></span></code></pre></div><p>若你是从 <code>vue/macros</code> 中显式引入宏函数时，则不需要像这样全局声明。</p><h2 id="explicit-opt-in" tabindex="-1">显式启用 <a class="header-anchor" href="#explicit-opt-in" aria-label="Permalink to &quot;显式启用 {#explicit-opt-in}&quot;">​</a></h2><div class="danger custom-block"><p class="custom-block-title">Core 不再支持</p><p>以下内容仅适用于 Vue 3.3 及以下版本。Vue core 3.4 及以上版本和 <code>@vitejs/plugin-vue</code> 5.0 及以上版本已经将其移除。如需继续使用，请迁移至 <a href="https://vue-macros.sxzz.moe/features/reactivity-transform.html" target="_blank" rel="noreferrer">Vue Macros</a>。</p></div><h3 id="vite" tabindex="-1">Vite <a class="header-anchor" href="#vite" aria-label="Permalink to &quot;Vite {#vite}&quot;">​</a></h3><ul><li>需要 <code>@vitejs/plugin-vue@&gt;=2.0.0</code></li><li>应用于单文件组件和 js(x)/ts(x) 文件。在执行转换之前，会对文件进行快速的使用检查，因此不使用宏的文件不会有性能损失。</li><li>注意 <code>reactivityTransform</code> 现在是一个插件的顶层选项，而不再是位于 <code>script.refSugar</code> 之中了，因为它不仅仅只对单文件组件起效。</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// vite.config.js</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  plugins: [</span></span>
<span class="line"><span style="color:#B392F0;">    vue</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">      reactivityTransform: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">  ]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><h3 id="vue-cli" tabindex="-1"><code>vue-cli</code> <a class="header-anchor" href="#vue-cli" aria-label="Permalink to &quot;\`vue-cli\` {#vue-cli}&quot;">​</a></h3><ul><li>目前仅对单文件组件起效</li><li>需要 <code>vue-loader@&gt;=17.0.0</code></li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// vue.config.js</span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  chainWebpack</span><span style="color:#E1E4E8;">: (</span><span style="color:#FFAB70;">config</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    config.module</span></span>
<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">rule</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;vue&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;vue-loader&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">tap</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">options</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">        return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">          ...</span><span style="color:#E1E4E8;">options,</span></span>
<span class="line"><span style="color:#E1E4E8;">          reactivityTransform: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      })</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><h3 id="plain-webpack-vue-loader" tabindex="-1">仅用 <code>webpack</code> + <code>vue-loader</code> <a class="header-anchor" href="#plain-webpack-vue-loader" aria-label="Permalink to &quot;仅用 \`webpack\` + \`vue-loader\` {#plain-webpack-vue-loader}&quot;">​</a></h3><ul><li>目前仅对单文件组件起效</li><li>需要 <code>vue-loader@&gt;=17.0.0</code></li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// webpack.config.js</span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  module: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    rules: [</span></span>
<span class="line"><span style="color:#E1E4E8;">      {</span></span>
<span class="line"><span style="color:#E1E4E8;">        test:</span><span style="color:#9ECBFF;"> /</span><span style="color:#85E89D;font-weight:bold;">\\.</span><span style="color:#DBEDFF;">vue</span><span style="color:#F97583;">$</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        loader: </span><span style="color:#9ECBFF;">&#39;vue-loader&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        options: {</span></span>
<span class="line"><span style="color:#E1E4E8;">          reactivityTransform: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    ]</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div>`,73)]))}const u=a(e,[["render",o]]);export{d as __pageData,u as default};
