import{_ as a,c as n,b as e,o as l}from"./chunks/framework.B2oIMGqn.js";const E=JSON.parse('{"title":"服务端渲染 API","description":"","frontmatter":{},"headers":[{"level":2,"title":"renderToString()","slug":"rendertostring","link":"#rendertostring","children":[]},{"level":2,"title":"renderToNodeStream()","slug":"rendertonodestream","link":"#rendertonodestream","children":[]},{"level":2,"title":"pipeToNodeWritable()","slug":"pipetonodewritable","link":"#pipetonodewritable","children":[]},{"level":2,"title":"renderToWebStream()","slug":"rendertowebstream","link":"#rendertowebstream","children":[]},{"level":2,"title":"pipeToWebWritable()","slug":"pipetowebwritable","link":"#pipetowebwritable","children":[]},{"level":2,"title":"renderToSimpleStream()","slug":"rendertosimplestream","link":"#rendertosimplestream","children":[]},{"level":2,"title":"useSSRContext()","slug":"usessrcontext","link":"#usessrcontext","children":[]},{"level":2,"title":"data-allow-mismatch","slug":"data-allow-mismatch","link":"#data-allow-mismatch","children":[]}],"relativePath":"api/ssr.md","filePath":"api/ssr.md"}'),p={name:"api/ssr.md"};function o(t,s,r,c,i,d){return l(),n("div",null,s[0]||(s[0]=[e(`<h1 id="server-side-rendering-api" tabindex="-1">服务端渲染 API <a class="header-anchor" href="#server-side-rendering-api" aria-label="Permalink to &quot;服务端渲染 API {#server-side-rendering-api}&quot;">​</a></h1><h2 id="rendertostring" tabindex="-1">renderToString() <a class="header-anchor" href="#rendertostring" aria-label="Permalink to &quot;renderToString() {#rendertostring}&quot;">​</a></h2><ul><li><p><strong>导出自 <code>vue/server-renderer</code></strong></p></li><li><p><strong>类型</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> renderToString</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#FFAB70;">  input</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> App</span><span style="color:#F97583;"> |</span><span style="color:#B392F0;"> VNode</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#FFAB70;">  context</span><span style="color:#F97583;">?:</span><span style="color:#B392F0;"> SSRContext</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Promise</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p><strong>示例</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { createSSRApp } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { renderToString } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue/server-renderer&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> app</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> createSSRApp</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#B392F0;">  data</span><span style="color:#E1E4E8;">: () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> ({ msg: </span><span style="color:#9ECBFF;">&#39;hello&#39;</span><span style="color:#E1E4E8;"> }),</span></span>
<span class="line"><span style="color:#E1E4E8;">  template: </span><span style="color:#9ECBFF;">\`&lt;div&gt;{{ msg }}&lt;/div&gt;\`</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">;(</span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> html</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> await</span><span style="color:#B392F0;"> renderToString</span><span style="color:#E1E4E8;">(app)</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(html)</span></span>
<span class="line"><span style="color:#E1E4E8;">})()</span></span></code></pre></div><h3 id="ssr-context" tabindex="-1">SSR 上下文 <a class="header-anchor" href="#ssr-context" aria-label="Permalink to &quot;SSR 上下文 {#ssr-context}&quot;">​</a></h3><p>你可以传入一个可选的上下文对象用来在渲染过程中记录额外的数据，例如<a href="/guide/scaling-up/ssr.html#teleports">访问 Teleport 的内容</a>：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> ctx</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {}</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> html</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> await</span><span style="color:#B392F0;"> renderToString</span><span style="color:#E1E4E8;">(app, ctx)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(ctx.teleports) </span><span style="color:#6A737D;">// { &#39;#teleported&#39;: &#39;teleported content&#39; }</span></span></code></pre></div><p>这个页面中的其他大多数 SSR API 也可以接受一个上下文对象。该上下文对象可以在组件代码里通过 <a href="#usessrcontext">useSSRContext</a> 辅助函数进行访问。</p></li><li><p><strong>参考</strong><a href="/guide/scaling-up/ssr.html">指南 - 服务端渲染 (SSR)</a></p></li></ul><h2 id="rendertonodestream" tabindex="-1">renderToNodeStream() <a class="header-anchor" href="#rendertonodestream" aria-label="Permalink to &quot;renderToNodeStream() {#rendertonodestream}&quot;">​</a></h2><p>将输入渲染为一个 <a href="https://nodejs.org/api/stream.html#stream_class_stream_readable" target="_blank" rel="noreferrer">Node.js Readable stream</a> 实例。</p><ul><li><p><strong>导出自 <code>vue/server-renderer</code></strong></p></li><li><p><strong>类型</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> renderToNodeStream</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#FFAB70;">  input</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> App</span><span style="color:#F97583;"> |</span><span style="color:#B392F0;"> VNode</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#FFAB70;">  context</span><span style="color:#F97583;">?:</span><span style="color:#B392F0;"> SSRContext</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Readable</span></span></code></pre></div></li><li><p><strong>示例</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 在一个 Node.js http 处理函数内</span></span>
<span class="line"><span style="color:#B392F0;">renderToNodeStream</span><span style="color:#E1E4E8;">(app).</span><span style="color:#B392F0;">pipe</span><span style="color:#E1E4E8;">(res)</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">备注</p><p><code>vue/server-renderer</code> 的 ESM 构建不支持此方法，因为它是与 Node.js 环境分离的。请换为使用 <a href="#pipetonodewritable"><code>pipeToNodeWritable</code></a>。</p></div></li></ul><h2 id="pipetonodewritable" tabindex="-1">pipeToNodeWritable() <a class="header-anchor" href="#pipetonodewritable" aria-label="Permalink to &quot;pipeToNodeWritable() {#pipetonodewritable}&quot;">​</a></h2><p>将输入渲染并 pipe 到一个 <a href="https://nodejs.org/api/stream.html#stream_writable_streams" target="_blank" rel="noreferrer">Node.js Writable stream</a> 实例。</p><ul><li><p><strong>导出自 <code>vue/server-renderer</code></strong></p></li><li><p><strong>类型</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> pipeToNodeWritable</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#FFAB70;">  input</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> App</span><span style="color:#F97583;"> |</span><span style="color:#B392F0;"> VNode</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#FFAB70;">  context</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> SSRContext</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {},</span></span>
<span class="line"><span style="color:#FFAB70;">  writable</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> Writable</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> void</span></span></code></pre></div></li><li><p><strong>示例</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 在一个 Node.js http 处理函数内</span></span>
<span class="line"><span style="color:#B392F0;">pipeToNodeWritable</span><span style="color:#E1E4E8;">(app, {}, res)</span></span></code></pre></div></li></ul><h2 id="rendertowebstream" tabindex="-1">renderToWebStream() <a class="header-anchor" href="#rendertowebstream" aria-label="Permalink to &quot;renderToWebStream() {#rendertowebstream}&quot;">​</a></h2><p>将输入渲染为一个 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Streams_API" target="_blank" rel="noreferrer">Web ReadableStream</a> 实例。</p><ul><li><p><strong>导出自 <code>vue/server-renderer</code></strong></p></li><li><p><strong>类型</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> renderToWebStream</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#FFAB70;">  input</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> App</span><span style="color:#F97583;"> |</span><span style="color:#B392F0;"> VNode</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#FFAB70;">  context</span><span style="color:#F97583;">?:</span><span style="color:#B392F0;"> SSRContext</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> ReadableStream</span></span></code></pre></div></li><li><p><strong>示例</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 在一个支持 ReadableStream 的环境下</span></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> Response</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">renderToWebStream</span><span style="color:#E1E4E8;">(app))</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">备注</p><p>在不能全局暴露 <code>ReadableStream</code> 构造函数的环境下，请换为使用 <a href="#pipetowebwritable"><code>pipeToWebWritable()</code></a>。</p></div></li></ul><h2 id="pipetowebwritable" tabindex="-1">pipeToWebWritable() <a class="header-anchor" href="#pipetowebwritable" aria-label="Permalink to &quot;pipeToWebWritable() {#pipetowebwritable}&quot;">​</a></h2><p>将输入渲染并 pipe 到一个 <a href="https://developer.mozilla.org/en-US/docs/Web/API/WritableStream" target="_blank" rel="noreferrer">Web WritableStream</a> 实例。</p><ul><li><p><strong>导出自 <code>vue/server-renderer</code></strong></p></li><li><p><strong>类型</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> pipeToWebWritable</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#FFAB70;">  input</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> App</span><span style="color:#F97583;"> |</span><span style="color:#B392F0;"> VNode</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#FFAB70;">  context</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> SSRContext</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {},</span></span>
<span class="line"><span style="color:#FFAB70;">  writable</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> WritableStream</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> void</span></span></code></pre></div></li><li><p><strong>示例</strong></p><p>通常与 <a href="https://developer.mozilla.org/en-US/docs/Web/API/TransformStream" target="_blank" rel="noreferrer"><code>TransformStream</code></a> 结合使用：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 诸如 CloudFlare worker 这样的环境中，TransformStream 是可用的。</span></span>
<span class="line"><span style="color:#6A737D;">// 在 Node.js 中，TransformStream 需要从 &#39;stream/web&#39; 显示导入。</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">readable</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">writable</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> TransformStream</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#B392F0;">pipeToWebWritable</span><span style="color:#E1E4E8;">(app, {}, writable)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">return</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> Response</span><span style="color:#E1E4E8;">(readable)</span></span></code></pre></div></li></ul><h2 id="rendertosimplestream" tabindex="-1">renderToSimpleStream() <a class="header-anchor" href="#rendertosimplestream" aria-label="Permalink to &quot;renderToSimpleStream() {#rendertosimplestream}&quot;">​</a></h2><p>通过一个简单的接口，将输入以 stream 模式进行渲染。</p><ul><li><p><strong>导出自 <code>vue/server-renderer</code></strong></p></li><li><p><strong>类型</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> renderToSimpleStream</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#FFAB70;">  input</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> App</span><span style="color:#F97583;"> |</span><span style="color:#B392F0;"> VNode</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#FFAB70;">  context</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> SSRContext</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#FFAB70;">  options</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> SimpleReadable</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> SimpleReadable</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">interface</span><span style="color:#B392F0;"> SimpleReadable</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  push</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">content</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span><span style="color:#F97583;"> |</span><span style="color:#79B8FF;"> null</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> void</span></span>
<span class="line"><span style="color:#B392F0;">  destroy</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">err</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> any</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> void</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>示例</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> res </span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;"> &#39;&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">renderToSimpleStream</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  app,</span></span>
<span class="line"><span style="color:#E1E4E8;">  {},</span></span>
<span class="line"><span style="color:#E1E4E8;">  {</span></span>
<span class="line"><span style="color:#B392F0;">    push</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">chunk</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">      if</span><span style="color:#E1E4E8;"> (chunk </span><span style="color:#F97583;">===</span><span style="color:#79B8FF;"> null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6A737D;">        // done</span></span>
<span class="line"><span style="color:#B392F0;">        console</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`render complete: \${</span><span style="color:#E1E4E8;">res</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        res </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> chunk</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#B392F0;">    destroy</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6A737D;">      // error encountered</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre></div></li></ul><h2 id="usessrcontext" tabindex="-1">useSSRContext() <a class="header-anchor" href="#usessrcontext" aria-label="Permalink to &quot;useSSRContext() {#usessrcontext}&quot;">​</a></h2><p>一个运行时 API，用于获取已传递给 <code>renderToString()</code> 或其他服务端渲染 API 的上下文对象。</p><ul><li><p><strong>类型</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> useSSRContext</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">T</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> Record</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">&gt;&gt;()</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> T</span><span style="color:#F97583;"> |</span><span style="color:#79B8FF;"> undefined</span></span></code></pre></div></li><li><p><strong>示例</strong></p><p>得到的上下文能够作为附加信息用于渲染最终的 HTML (例如 head 中的元数据)。</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> setup</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { useSSRContext } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 确保只在服务端渲染时调用</span></span>
<span class="line"><span style="color:#6A737D;">// https://cn.vitejs.dev/guide/ssr.html#conditional-logic</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">meta</span><span style="color:#E1E4E8;">.env.</span><span style="color:#79B8FF;">SSR</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> ctx</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> useSSRContext</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#6A737D;">  // ...给上下文对象添加属性</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div></li></ul><h2 id="data-allow-mismatch" tabindex="-1">data-allow-mismatch <sup class="vt-badge" data-text="3.5+"></sup> <a class="header-anchor" href="#data-allow-mismatch" aria-label="Permalink to &quot;data-allow-mismatch &lt;sup class=&quot;vt-badge&quot; data-text=&quot;3.5+&quot; /&gt; {#data-allow-mismatch}&quot;">​</a></h2><p>可以消除<a href="/guide/scaling-up/ssr.html#hydration-mismatch">激活不匹配</a>警告的特殊 attribute。</p><ul><li><p><strong>示例</strong></p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#B392F0;"> data-allow-mismatch</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;text&quot;</span><span style="color:#E1E4E8;">&gt;{{ data.toLocaleString() }}&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>值可以限制不匹配为特定类型。允许的值有：</p><ul><li><code>text</code></li><li><code>children</code> (仅允许直接子组件不匹配)</li><li><code>class</code></li><li><code>style</code></li><li><code>attribute</code></li></ul><p>如果没有提供值，则会允许所有类型的不匹配。</p></li></ul>`,24)]))}const F=a(p,[["render",o]]);export{E as __pageData,F as default};
