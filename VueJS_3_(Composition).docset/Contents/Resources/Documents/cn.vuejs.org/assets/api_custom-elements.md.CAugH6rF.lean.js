import{_ as e,c as n,b as a,o}from"./chunks/framework.B2oIMGqn.js";const E=JSON.parse('{"title":"自定义元素 API","description":"","frontmatter":{},"headers":[{"level":2,"title":"defineCustomElement()","slug":"definecustomelement","link":"#definecustomelement","children":[]},{"level":2,"title":"useHost()","slug":"usehost","link":"#usehost","children":[]},{"level":2,"title":"useShadowRoot()","slug":"useshadowroot","link":"#useshadowroot","children":[]},{"level":2,"title":"this.$host","slug":"this-host","link":"#this-host","children":[]}],"relativePath":"api/custom-elements.md","filePath":"api/custom-elements.md"}'),l={name:"api/custom-elements.md"};function t(p,s,c,r,i,d){return o(),n("div",null,s[0]||(s[0]=[a(`<h1 id="custom-elements-api" tabindex="-1">自定义元素 API <a class="header-anchor" href="#custom-elements-api" aria-label="Permalink to &quot;自定义元素 API {#custom-elements-api}&quot;">​</a></h1><h2 id="definecustomelement" tabindex="-1">defineCustomElement() <a class="header-anchor" href="#definecustomelement" aria-label="Permalink to &quot;defineCustomElement() {#definecustomelement}&quot;">​</a></h2><p>此方法接受的参数与 <a href="#definecomponent"><code>defineComponent</code></a> 相同，但返回一个原生<a href="https://developer.mozilla.org/zh-CN/docs/Web/Web_Components/Using_custom_elements" target="_blank" rel="noreferrer">自定义元素</a>类构造函数。</p><ul><li><p><strong>类型</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> defineCustomElement</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#FFAB70;">  component</span><span style="color:#F97583;">:</span></span>
<span class="line"><span style="color:#F97583;">    |</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">ComponentOptions</span><span style="color:#F97583;"> &amp;</span><span style="color:#B392F0;"> CustomElementsOptions</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">    |</span><span style="color:#B392F0;"> ComponentOptions</span><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">&#39;setup&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#FFAB70;">  options</span><span style="color:#F97583;">?:</span><span style="color:#B392F0;"> CustomElementsOptions</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">  new</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">props</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> object</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> HTMLElement</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">interface</span><span style="color:#B392F0;"> CustomElementsOptions</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#FFAB70;">  styles</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">[]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  // 以下选项在 3.5+ 版本中支持</span></span>
<span class="line"><span style="color:#B392F0;">  configureApp</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">app</span><span style="color:#F97583;">:</span><span style="color:#B392F0;"> App</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#79B8FF;"> void</span></span>
<span class="line"><span style="color:#FFAB70;">  shadowRoot</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> boolean</span></span>
<span class="line"><span style="color:#FFAB70;">  nonce</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> string</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><blockquote><p>类型为简化版，便于阅读。</p></blockquote></li><li><p><strong>详情</strong></p><p>除了常规的组件选项，<code>defineCustomElement()</code> 还支持一系列特定于自定义元素的选项：</p><ul><li><p><strong><code>styles</code></strong>：一个内联 CSS 字符串数组，用于提供应注入元素 shadow root 的 CSS。</p></li><li><p><strong><code>configureApp</code></strong> <sup class="vt-badge" data-text="3.5+"></sup>：一个函数，可用于配置自定义元素的 Vue 应用实例。</p></li><li><p><strong><code>shadowRoot</code></strong> <sup class="vt-badge" data-text="3.5+"></sup>：<code>boolean</code>，默认为 <code>true</code>。设置为 <code>false</code> 以在不带 shadow root 的情况下渲染自定义元素。这意味着自定义元素单文件组件中的 <code>&lt;style&gt;</code> 将不再被封装隔离。</p></li><li><p><strong><code>nonce</code></strong> <sup class="vt-badge" data-text="3.5+"></sup>：<code>string</code>，如果提供，将在注入到 shadow root 样式标签上设置 <code>nonce</code> attribute。</p></li></ul><p>注意，这些选项也可以不作为组件本身的一部分传递，而是通过第二个参数传递：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Element </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;./MyElement.ce.vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">defineCustomElement</span><span style="color:#E1E4E8;">(Element, {</span></span>
<span class="line"><span style="color:#B392F0;">  configureApp</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">app</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6A737D;">    // ...</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre></div><p>返回值是一个自定义元素构造函数，可以使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CustomElementRegistry/define" target="_blank" rel="noreferrer"><code>customElements.define()</code></a> 注册。</p></li><li><p><strong>示例</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { defineCustomElement } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> MyVueElement</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> defineCustomElement</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#6A737D;">  /* 组件选项 */</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 注册自定义元素</span></span>
<span class="line"><span style="color:#E1E4E8;">customElements.</span><span style="color:#B392F0;">define</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;my-vue-element&#39;</span><span style="color:#E1E4E8;">, MyVueElement)</span></span></code></pre></div></li><li><p><strong>参考</strong></p><ul><li><p><a href="/guide/extras/web-components.html#building-custom-elements-with-vue">指南 - 使用 Vue 构建自定义元素</a></p></li><li><p>请注意，使用单文件组件时，<code>defineCustomElement()</code> 需要进行<a href="/guide/extras/web-components.html#sfc-as-custom-element">特殊配置</a>。</p></li></ul></li></ul><h2 id="usehost" tabindex="-1">useHost() <sup class="vt-badge" data-text="3.5+"></sup> <a class="header-anchor" href="#usehost" aria-label="Permalink to &quot;useHost() &lt;sup class=&quot;vt-badge&quot; data-text=&quot;3.5+&quot;/&gt; {#usehost}&quot;">​</a></h2><p>一个组合式 API 辅助函数，返回当前 Vue 自定义元素的宿主元素。</p><h2 id="useshadowroot" tabindex="-1">useShadowRoot() <sup class="vt-badge" data-text="3.5+"></sup> <a class="header-anchor" href="#useshadowroot" aria-label="Permalink to &quot;useShadowRoot() &lt;sup class=&quot;vt-badge&quot; data-text=&quot;3.5+&quot;/&gt; {#useshadowroot}&quot;">​</a></h2><p>一个组合式 API 辅助函数，返回当前 Vue 自定义元素的 shadow root。</p><h2 id="this-host" tabindex="-1">this.$host <sup class="vt-badge" data-text="3.5+"></sup> <a class="header-anchor" href="#this-host" aria-label="Permalink to &quot;this.$host &lt;sup class=&quot;vt-badge&quot; data-text=&quot;3.5+&quot;/&gt; {#this-host}&quot;">​</a></h2><p>一个选项式 API 的 property，暴露当前 Vue 自定义元素的宿主元素。</p>`,10)]))}const y=e(l,[["render",t]]);export{E as __pageData,y as default};
