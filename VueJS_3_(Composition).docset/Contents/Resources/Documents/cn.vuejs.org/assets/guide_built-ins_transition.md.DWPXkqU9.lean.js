import{r as y,o as l,c as p,a as t,x as e,w as d,f as u,T as F,i as g,X as B,s as m,e as C,j as f,B as h,b as i}from"./chunks/framework.B2oIMGqn.js";import{g as v}from"./chunks/index.DjKJqAo0.js";const k="/assets/transition-classes.DYG5-69l.png",q={class:"demo"},A={key:0,style:{"margin-top":"20px"}},D={__name:"Basic",setup(E){const s=y(!0);return(a,n)=>(l(),p("div",q,[t("button",{onClick:n[0]||(n[0]=r=>s.value=!s.value)},"Toggle"),e(F,{name:"fade"},{default:d(()=>[s.value?(l(),p("p",A,"hello")):u("",!0)]),_:1})]))}},S={class:"demo"},T={key:0,style:{"margin-top":"20px"}},x={__name:"SlideFade",setup(E){const s=y(!0);return(a,n)=>(l(),p("div",S,[t("button",{onClick:n[0]||(n[0]=r=>s.value=!s.value)},"Toggle Slide + Fade"),e(F,{name:"slide-fade"},{default:d(()=>[s.value?(l(),p("p",T,"hello")):u("",!0)]),_:1})]))}},w={class:"demo"},j={key:0,style:{"margin-top":"20px","text-align":"center"}},N={__name:"CssAnimation",setup(E){const s=y(!0);return(a,n)=>(l(),p("div",w,[t("button",{onClick:n[0]||(n[0]=r=>s.value=!s.value)},"Toggle"),e(F,{name:"bounce"},{default:d(()=>[s.value?(l(),p("p",j," Hello here is some bouncy text! ")):u("",!0)]),_:1})]))}},M={class:"demo"},J={key:0,class:"transition-demo-outer"},P={__name:"NestedTransitions",setup(E){const s=y(!0);return(a,n)=>(l(),p("div",M,[t("button",{onClick:n[0]||(n[0]=r=>s.value=!s.value),style:{"margin-bottom":"20px"}},"Toggle"),e(F,{duration:"550",name:"nested"},{default:d(()=>[s.value?(l(),p("div",J,n[1]||(n[1]=[t("div",{class:"transition-demo-inner"},"Hello",-1)]))):u("",!0)]),_:1})]))}},U={class:"demo"},z={key:0,class:"gsap-box"},K={__name:"JsHooks",setup(E){const s=y(!0);function a(o){v.set(o,{scaleX:.25,scaleY:.25,opacity:1})}function n(o,c){v.to(o,{duration:1,scaleX:1,scaleY:1,ease:"elastic.inOut(2.5, 1)",onComplete:c})}function r(o,c){v.to(o,{duration:.7,scaleX:1,scaleY:1,x:300,ease:"elastic.inOut(2.5, 1)"}),v.to(o,{duration:.2,delay:.5,opacity:0,onComplete:c})}return(o,c)=>(l(),p("div",U,[t("button",{onClick:c[0]||(c[0]=H=>s.value=!s.value)},"Toggle"),e(F,{onBeforeEnter:a,onEnter:n,onLeave:r,css:!1},{default:d(()=>[s.value?(l(),p("div",z)):u("",!0)]),_:1})]))}},V={class:"demo transition-demo"},G={class:"btn-container"},b={__name:"BetweenElements",props:["mode"],setup(E){const s=y("saved");return(a,n)=>(l(),p("div",V,[n[3]||(n[3]=t("span",{style:{"margin-right":"20px"}},"Click to cycle through states: ",-1)),t("div",G,[e(F,{name:"slide-up",mode:E.mode},{default:d(()=>[s.value==="saved"?(l(),p("button",{key:0,onClick:n[0]||(n[0]=r=>s.value="edited")}," Edit ")):s.value==="edited"?(l(),p("button",{key:1,onClick:n[1]||(n[1]=r=>s.value="editing")}," Save ")):s.value==="editing"?(l(),p("button",{key:2,onClick:n[2]||(n[2]=r=>s.value="saved")}," Cancel ")):u("",!0)]),_:1},8,["mode"])])]))}},Q={class:"demo"},L={__name:"BetweenComponents",setup(E){const s=()=>h("div","Component A"),a=()=>h("div","Component B"),n=y(s);return(r,o)=>(l(),p("div",Q,[t("label",null,[g(t("input",{type:"radio","onUpdate:modelValue":o[0]||(o[0]=c=>n.value=c),value:s},null,512),[[B,n.value]]),o[2]||(o[2]=m(" A "))]),t("label",null,[g(t("input",{type:"radio","onUpdate:modelValue":o[1]||(o[1]=c=>n.value=c),value:a},null,512),[[B,n.value]]),o[3]||(o[3]=m(" B "))]),e(F,{name:"fade",mode:"out-in"},{default:d(()=>[(l(),C(f(n.value)))]),_:1})]))}},X=JSON.parse('{"title":"Transition","description":"","frontmatter":{},"headers":[{"level":2,"title":"<Transition> 组件","slug":"the-transition-component","link":"#the-transition-component","children":[]},{"level":2,"title":"基于 CSS 的过渡效果","slug":"css-based-transitions","link":"#css-based-transitions","children":[{"level":3,"title":"CSS 过渡 class","slug":"transition-classes","link":"#transition-classes","children":[]},{"level":3,"title":"为过渡效果命名","slug":"named-transitions","link":"#named-transitions","children":[]},{"level":3,"title":"CSS 的 transition","slug":"css-transitions","link":"#css-transitions","children":[]},{"level":3,"title":"CSS 的 animation","slug":"css-animations","link":"#css-animations","children":[]},{"level":3,"title":"自定义过渡 class","slug":"custom-transition-classes","link":"#custom-transition-classes","children":[]},{"level":3,"title":"同时使用 transition 和 animation","slug":"using-transitions-and-animations-together","link":"#using-transitions-and-animations-together","children":[]},{"level":3,"title":"深层级过渡与显式过渡时长","slug":"nested-transitions-and-explicit-transition-durations","link":"#nested-transitions-and-explicit-transition-durations","children":[]},{"level":3,"title":"性能考量","slug":"performance-considerations","link":"#performance-considerations","children":[]}]},{"level":2,"title":"JavaScript 钩子","slug":"javascript-hooks","link":"#javascript-hooks","children":[]},{"level":2,"title":"可复用过渡效果","slug":"reusable-transitions","link":"#reusable-transitions","children":[]},{"level":2,"title":"出现时过渡","slug":"transition-on-appear","link":"#transition-on-appear","children":[]},{"level":2,"title":"元素间过渡","slug":"transition-between-elements","link":"#transition-between-elements","children":[]},{"level":2,"title":"过渡模式","slug":"transition-modes","link":"#transition-modes","children":[]},{"level":2,"title":"组件间过渡","slug":"transition-between-components","link":"#transition-between-components","children":[]},{"level":2,"title":"动态过渡","slug":"dynamic-transitions","link":"#dynamic-transitions","children":[]},{"level":2,"title":"使用 Key Attribute 过渡","slug":"transitions-with-the-key-attribute","link":"#transitions-with-the-key-attribute","children":[]}],"relativePath":"guide/built-ins/transition.md","filePath":"guide/built-ins/transition.md"}'),O={name:"guide/built-ins/transition.md"},R=Object.assign(O,{setup(E){return(s,a)=>(l(),p("div",null,[a[0]||(a[0]=i(`<h1 id="transition" tabindex="-1">Transition <a class="header-anchor" href="#transition" aria-label="Permalink to &quot;Transition {#transition}&quot;">​</a></h1><p>Vue 提供了两个内置组件，可以帮助你制作基于状态变化的过渡和动画：</p><ul><li><p><code>&lt;Transition&gt;</code> 会在一个元素或组件进入和离开 DOM 时应用动画。本章节会介绍如何使用它。</p></li><li><p><code>&lt;TransitionGroup&gt;</code> 会在一个 <code>v-for</code> 列表中的元素或组件被插入，移动，或移除时应用动画。我们将在<a href="/guide/built-ins/transition-group.html">下一章节</a>中介绍。</p></li></ul><p>除了这两个组件，我们也可以通过其他技术手段来应用动画，比如切换 CSS class 或用状态绑定样式来驱动动画。这些其他的方法会在<a href="/guide/extras/animation.html">动画技巧</a>章节中展开。</p><h2 id="the-transition-component" tabindex="-1"><code>&lt;Transition&gt;</code> 组件 <a class="header-anchor" href="#the-transition-component" aria-label="Permalink to &quot;\`&lt;Transition&gt;\` 组件 {#the-transition-component}&quot;">​</a></h2><p><code>&lt;Transition&gt;</code> 是一个内置组件，这意味着它在任意别的组件中都可以被使用，无需注册。它可以将进入和离开动画应用到通过默认插槽传递给它的元素或组件上。进入或离开可以由以下的条件之一触发：</p><ul><li>由 <code>v-if</code> 所触发的切换</li><li>由 <code>v-show</code> 所触发的切换</li><li>由特殊元素 <code>&lt;component&gt;</code> 切换的动态组件</li><li>改变特殊的 <code>key</code> 属性</li></ul><p>以下是最基本用法的示例：</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;"> @</span><span style="color:#B392F0;">click</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">show </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> !</span><span style="color:#E1E4E8;">show</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;Toggle&lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">Transition</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">p</span><span style="color:#B392F0;"> v-if</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">show</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;hello&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#79B8FF;">Transition</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">/* 下面我们会解释这些 class 是做什么的 */</span></span>
<span class="line"><span style="color:#B392F0;">.v-enter-active</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#B392F0;">.v-leave-active</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#79B8FF;">  transition</span><span style="color:#E1E4E8;">: opacity </span><span style="color:#79B8FF;">0.5</span><span style="color:#F97583;">s</span><span style="color:#79B8FF;"> ease</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">.v-enter-from</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#B392F0;">.v-leave-to</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#79B8FF;">  opacity</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div>`,10)),e(D),a[1]||(a[1]=i('<div class="composition-api"><p><a href="https://play.vuejs.org/#eNpVkEFuwyAQRa8yZZNWqu1sunFJ1N4hSzYUjRNUDAjGVJHluxcCipIV/OG/pxEr+/a+TwuykfGogvYEEWnxR2H17F0gWCHgBBtMwc2wy9WdsMIqZ2OuXtwfHErhlcKCb8LyoVoynwPh7I0kzAmA/yxEzsKXMlr9HgRr9Es5BTue3PlskA+1VpFTkDZq0i3niYfU6anRmbqgMY4PZeH8OjwBfHhYIMdIV1OuferQEoZOKtIJ328TgzJhm8BabHR3jeC8VJqusO8/IqCM+CnsVqR3V/mfRxO5amnkCPuK5B+6rcG2fydshks=" target="_blank" rel="noreferrer">在演练场中尝试一下</a></p></div><div class="options-api"><p><a href="https://play.vuejs.org/#eNpVkMFuAiEQhl9lyqlNuouXXrZo2nfwuBeKs0qKQGBAjfHdZZfVrAmB+f/M/2WGK/v1vs0JWcdEVEF72vQWz94Fgh0OMhmCa28BdpLk+0etAQJSCvahAOLBnTqgkLA6t/EpVzmCP7lFEB69kYRFAYi/ROQs/Cij1f+6ZyMG1vA2vj3bbN1+b1Dw2lYj2yBt1KRnXRwPudHDnC6pAxrjBPe1n78EBF8MUGSkixnLNjdoCUMjFemMn5NjUGacnboqPVkdOC+Vpgus2q8IKCN+T+suWENwxyWJXKXMyQ5WNVJ+aBqD3e6VSYoi" target="_blank" rel="noreferrer">在演练场中尝试一下</a></p></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>&lt;Transition&gt;</code> 仅支持单个元素或组件作为其插槽内容。如果内容是一个组件，这个组件必须仅有一个根元素。</p></div><p>当一个 <code>&lt;Transition&gt;</code> 组件中的元素被插入或移除时，会发生下面这些事情：</p><ol><li><p>Vue 会自动检测目标元素是否应用了 CSS 过渡或动画。如果是，则一些 <a href="#transition-classes">CSS 过渡 class</a> 会在适当的时机被添加和移除。</p></li><li><p>如果有作为监听器的 <a href="#javascript-hooks">JavaScript 钩子</a>，这些钩子函数会在适当时机被调用。</p></li><li><p>如果没有探测到 CSS 过渡或动画、也没有提供 JavaScript 钩子，那么 DOM 的插入、删除操作将在浏览器的下一个动画帧后执行。</p></li></ol><h2 id="css-based-transitions" tabindex="-1">基于 CSS 的过渡效果 <a class="header-anchor" href="#css-based-transitions" aria-label="Permalink to &quot;基于 CSS 的过渡效果 {#css-based-transitions}&quot;">​</a></h2><h3 id="transition-classes" tabindex="-1">CSS 过渡 class <a class="header-anchor" href="#transition-classes" aria-label="Permalink to &quot;CSS 过渡 class {#transition-classes}&quot;">​</a></h3><p>一共有 6 个应用于进入与离开过渡效果的 CSS class。</p><p><img src="'+k+`" alt="过渡图示"></p><ol><li><p><code>v-enter-from</code>：进入动画的起始状态。在元素插入之前添加，在元素插入完成后的下一帧移除。</p></li><li><p><code>v-enter-active</code>：进入动画的生效状态。应用于整个进入动画阶段。在元素被插入之前添加，在过渡或动画完成之后移除。这个 class 可以被用来定义进入动画的持续时间、延迟与速度曲线类型。</p></li><li><p><code>v-enter-to</code>：进入动画的结束状态。在元素插入完成后的下一帧被添加 (也就是 <code>v-enter-from</code> 被移除的同时)，在过渡或动画完成之后移除。</p></li><li><p><code>v-leave-from</code>：离开动画的起始状态。在离开过渡效果被触发时立即添加，在一帧后被移除。</p></li><li><p><code>v-leave-active</code>：离开动画的生效状态。应用于整个离开动画阶段。在离开过渡效果被触发时立即添加，在过渡或动画完成之后移除。这个 class 可以被用来定义离开动画的持续时间、延迟与速度曲线类型。</p></li><li><p><code>v-leave-to</code>：离开动画的结束状态。在一个离开动画被触发后的下一帧被添加 (也就是 <code>v-leave-from</code> 被移除的同时)，在过渡或动画完成之后移除。</p></li></ol><p><code>v-enter-active</code> 和 <code>v-leave-active</code> 给我们提供了为进入和离开动画指定不同速度曲线的能力，我们将在下面的小节中看到一个示例。</p><h3 id="named-transitions" tabindex="-1">为过渡效果命名 <a class="header-anchor" href="#named-transitions" aria-label="Permalink to &quot;为过渡效果命名 {#named-transitions}&quot;">​</a></h3><p>我们可以给 <code>&lt;Transition&gt;</code> 组件传一个 <code>name</code> prop 来声明一个过渡效果名：</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">Transition</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;fade&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  ...</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#79B8FF;">Transition</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>对于一个有名字的过渡效果，对它起作用的过渡 class 会以其名字而不是 <code>v</code> 作为前缀。比如，上方例子中被应用的 class 将会是 <code>fade-enter-active</code> 而不是 <code>v-enter-active</code>。这个“fade”过渡的 class 应该是这样：</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">.fade-enter-active</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#B392F0;">.fade-leave-active</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#79B8FF;">  transition</span><span style="color:#E1E4E8;">: opacity </span><span style="color:#79B8FF;">0.5</span><span style="color:#F97583;">s</span><span style="color:#79B8FF;"> ease</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">.fade-enter-from</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#B392F0;">.fade-leave-to</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#79B8FF;">  opacity</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><h3 id="css-transitions" tabindex="-1">CSS 的 transition <a class="header-anchor" href="#css-transitions" aria-label="Permalink to &quot;CSS 的 transition {#css-transitions}&quot;">​</a></h3><p><code>&lt;Transition&gt;</code> 一般都会搭配<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Transitions/Using_CSS_transitions" target="_blank" rel="noreferrer">原生 CSS 过渡</a>一起使用，正如你在上面的例子中所看到的那样。这个 <code>transition</code> CSS 属性是一个简写形式，使我们可以一次定义一个过渡的各个方面，包括需要执行动画的属性、持续时间和<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/easing-function" target="_blank" rel="noreferrer">速度曲线</a>。</p><p>下面是一个更高级的例子，它使用了不同的持续时间和速度曲线来过渡多个属性：</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">Transition</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;slide-fade&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">p</span><span style="color:#B392F0;"> v-if</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">show</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;hello&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#79B8FF;">Transition</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">  进入和离开动画可以使用不同</span></span>
<span class="line"><span style="color:#6A737D;">  持续时间和速度曲线。</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"><span style="color:#B392F0;">.slide-fade-enter-active</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#79B8FF;">  transition</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">all</span><span style="color:#79B8FF;"> 0.3</span><span style="color:#F97583;">s</span><span style="color:#79B8FF;"> ease-out</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">.slide-fade-leave-active</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#79B8FF;">  transition</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">all</span><span style="color:#79B8FF;"> 0.8</span><span style="color:#F97583;">s</span><span style="color:#79B8FF;"> cubic-bezier</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.5</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.8</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">.slide-fade-enter-from</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#B392F0;">.slide-fade-leave-to</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#79B8FF;">  transform</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">translateX</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">20</span><span style="color:#F97583;">px</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#79B8FF;">  opacity</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div>`,21)),e(x),a[2]||(a[2]=i(`<div class="composition-api"><p><a href="https://play.vuejs.org/#eNqFkc9uwjAMxl/F6wXQKIVNk1AX0HbZC4zDDr2E4EK0NIkStxtDvPviFQ0OSFzyx/m+n+34kL16P+lazMpMRBW0J4hIrV9WVjfeBYIDBKzhCHVwDQySdFDZyipnY5Lu3BcsWDCk0OKosqLoKcmfLoSNN5KQbyTWLZGz8KKMVp+LKju573ivsuXKbbcG4d3oDcI9vMkNiqL3JD+AWAVpoyadGFY2yATW5nVSJj9rkspDl+v6hE/hHRrjRMEdpdfiDEkBUVxWaEWkveHj5AzO0RKGXCrSHcKBIfSPKEEaA9PJYwSUEXPX0nNlj8y6RBiUHd5AzCOodq1VvsYfjWE4G6fgEy/zMcxG17B9ZTyX8bV85C5y1S40ZX/kdj+GD1P/zVQA56XStC9h2idJI/z7huz4CxoVvE4=" target="_blank" rel="noreferrer">在演练场中尝试一下</a></p></div><div class="options-api"><p><a href="https://play.vuejs.org/#eNqFkc1uwjAMgF/F6wk0SmHTJNQFtF32AuOwQy+hdSFamkSJ08EQ776EbMAkJKTIf7I/O/Y+ezVm3HvMyoy52gpDi0rh1mhL0GDLvSTYVwqg4cQHw2QDWCRv1Z8H4Db6qwSyHlPkEFUQ4bHixA0OYWckJ4wesZUn0gpeainqz3mVRQzM4S7qKlss9XotEd6laBDu4Y03yIpUE+oB2NJy5QSJwFC8w0iIuXkbMkN9moUZ6HPR/uJDeINSalaYxCjOkBBgxeWEijnayWiOz+AcFaHNeU2ix7QCOiFK4FLCZPzoALnDXHt6Pq7hP0Ii7/EGYuag9itR5yv8FmgH01EIPkUxG8F0eA2bJmut7kbX+pG+6NVq28WTBTN+92PwMDHbSAXQhteCdiVMUpNwwuMassMP8kfAJQ==" target="_blank" rel="noreferrer">在演练场中尝试一下</a></p></div><h3 id="css-animations" tabindex="-1">CSS 的 animation <a class="header-anchor" href="#css-animations" aria-label="Permalink to &quot;CSS 的 animation {#css-animations}&quot;">​</a></h3><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Animations/Using_CSS_animations" target="_blank" rel="noreferrer">原生 CSS 动画</a>和 CSS transition 的应用方式基本上是相同的，只有一点不同，那就是 <code>*-enter-from</code> 不是在元素插入后立即移除，而是在一个 <code>animationend</code> 事件触发时被移除。</p><p>对于大多数的 CSS 动画，我们可以简单地在 <code>*-enter-active</code> 和 <code>*-leave-active</code> class 下声明它们。下面是一个示例：</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">Transition</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;bounce&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">p</span><span style="color:#B392F0;"> v-if</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">show</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;"> style</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;text-align: center;&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    Hello here is some bouncy text!</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#79B8FF;">Transition</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">.bounce-enter-active</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#79B8FF;">  animation</span><span style="color:#E1E4E8;">: bounce-in </span><span style="color:#79B8FF;">0.5</span><span style="color:#F97583;">s</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#B392F0;">.bounce-leave-active</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#79B8FF;">  animation</span><span style="color:#E1E4E8;">: bounce-in </span><span style="color:#79B8FF;">0.5</span><span style="color:#F97583;">s</span><span style="color:#79B8FF;"> reverse</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">@keyframes</span><span style="color:#FFAB70;"> bounce-in</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  0%</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#79B8FF;">    transform</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">scale</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#B392F0;">  50%</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#79B8FF;">    transform</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">scale</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1.25</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#B392F0;">  100%</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#79B8FF;">    transform</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">scale</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div>`,7)),e(N),a[3]||(a[3]=i(`<div class="composition-api"><p><a href="https://play.vuejs.org/#eNqNksGOgjAQhl9lJNmoBwRNvCAa97YP4JFLbQZsLG3TDqzG+O47BaOezCYkpfB9/0wHbsm3c4u+w6RIyiC9cgQBqXO7yqjWWU9wA4813KH2toUpo9PKVEZaExg92V/YRmBGvsN5ZcpsTGGfN4St04Iw7qg8dkTWwF5qJc/bKnnYk7hWye5gm0ZjmY0YKwDlwQsTFCnWjGiRpaPtjETG43smHPSpqh9pVQKBrjpyrfCNMilZV8Aqd5cNEF4oFVo1pgCJhtBvnjEAP6i1hRN6BBUg2BZhKHUdvMmjWhYHE9dXY/ygzN4PasqhB75djM2mQ7FUSFI9wi0GCJ6uiHYxVsFUGcgX67CpzP0lahQ9/k/kj9CjDzgG7M94rT1PLLxhQ0D+Na4AFI9QW98WEKTQOMvnLAOwDrD+wC0Xq/Ubusw/sU+QL/45hskk9z8Bddbn" target="_blank" rel="noreferrer">在演练场中尝试一下</a></p></div><div class="options-api"><p><a href="https://play.vuejs.org/#eNqNUs2OwiAQfpWxySZ66I8mXioa97YP4LEXrNNKpEBg2tUY330pqOvJmBBgyPczP1yTb2OyocekTJirrTC0qRSejbYEB2x4LwmulQI4cOLTWbwDWKTeqkcE4I76twSyPcaX23j4zS+WP3V9QNgZyQnHiNi+J9IKtrUU9WldJaMMrGEynlWy2em2lcjyCPMUALazXDlBwtMU79CT9rpXNXp4tGYGhlQ0d7UqAUcXOeI6bluhUtKmhEVhzisgPFPKpWhVCTUqQrt6ygD8oJQajmgRhAOnO4RgdQm8yd0tNzGv/D8x/8Dy10IVCzn4axaTTYNZymsSA8YuciU6PrLL6IKpUFBkS7cKXXwQJfIBPyP6IQ1oHUaB7QkvjfUdcy+wIFB8PeZIYwmNtl0JruYSp8XMk+/TXL7BzbPF8gU6L95hn8D4OUJnktsfM1vavg==" target="_blank" rel="noreferrer">在演练场中尝试一下</a></p></div><h3 id="custom-transition-classes" tabindex="-1">自定义过渡 class <a class="header-anchor" href="#custom-transition-classes" aria-label="Permalink to &quot;自定义过渡 class {#custom-transition-classes}&quot;">​</a></h3><p>你也可以向 <code>&lt;Transition&gt;</code> 传递以下的 props 来指定自定义的过渡 class：</p><ul><li><code>enter-from-class</code></li><li><code>enter-active-class</code></li><li><code>enter-to-class</code></li><li><code>leave-from-class</code></li><li><code>leave-active-class</code></li><li><code>leave-to-class</code></li></ul><p>你传入的这些 class 会覆盖相应阶段的默认 class 名。这个功能在你想要在 Vue 的动画机制下集成其他的第三方 CSS 动画库时非常有用，比如 <a href="https://daneden.github.io/animate.css/" target="_blank" rel="noreferrer">Animate.css</a>：</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">&lt;!-- 假设你已经在页面中引入了 Animate.css --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">Transition</span></span>
<span class="line"><span style="color:#B392F0;">  name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;custom-classes&quot;</span></span>
<span class="line"><span style="color:#B392F0;">  enter-active-class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;animate__animated animate__tada&quot;</span></span>
<span class="line"><span style="color:#B392F0;">  leave-active-class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;animate__animated animate__bounceOutRight&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">p</span><span style="color:#B392F0;"> v-if</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">show</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;hello&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#79B8FF;">Transition</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><div class="composition-api"><p><a href="https://play.vuejs.org/#eNqNUctuwjAQ/BXXF9oDsZB6ogbRL6hUcbSEjLMhpn7JXtNWiH/vhqS0R3zxPmbWM+szf02pOVXgSy6LyTYhK4A1rVWwPsWM7MwydOzCuhw9mxF0poIKJoZC0D5+stUAeMRc4UkFKcYpxKcEwSenEYYM5b4ixsA2xlnzsVJ8Yj8Mt+LrbTwcHEgxwojCmNxmHYpFG2kaoxO0B2KaWjD6uXG6FCiKj00ICHmuDdoTjD2CavJBCna7KWjZrYK61b9cB5pI93P3sQYDbxXf7aHHccpVMolO7DS33WSQjPXgXJRi2Cl1xZ8nKkjxf0dBFvx2Q7iZtq94j5jKUgjThmNpjIu17ZzO0JjohT7qL+HsvohJWWNKEc/NolncKt6Goar4y/V7rg/wyw9zrLOy" target="_blank" rel="noreferrer">在演练场中尝试一下</a></p></div><div class="options-api"><p><a href="https://play.vuejs.org/#eNqNUcFuwjAM/RUvp+1Ao0k7sYDYF0yaOFZCJjU0LE2ixGFMiH9f2gDbcVKU2M9+tl98Fm8hNMdMYi5U0tEEXraOTsFHho52mC3DuXUAHTI+PlUbIBLn6G4eQOr91xw4ZqrIZXzKVY6S97rFYRqCRabRY7XNzN7BSlujPxetGMvAAh7GtxXLtd/vLSlZ0woFQK0jumTY+FJt7ORwoMLUObEfZtpiSpRaUYPkmOIMNZsj1VhJRWeGMsFmczU6uCOMHd64lrCQ/s/d+uw0vWf+MPuea5Vp5DJ0gOPM7K4Ci7CerPVKhipJ/moqgJJ//8ipxN92NFdmmLbSip45pLmUunOH1Gjrc7ezGKnRfpB4wJO0ZpvkdbJGpyRfmufm+Y4Mxo1oK16n9UwNxOUHwaK3iQ==" target="_blank" rel="noreferrer">在演练场中尝试一下</a></p></div><h3 id="using-transitions-and-animations-together" tabindex="-1">同时使用 transition 和 animation <a class="header-anchor" href="#using-transitions-and-animations-together" aria-label="Permalink to &quot;同时使用 transition 和 animation {#using-transitions-and-animations-together}&quot;">​</a></h3><p>Vue 需要附加事件监听器，以便知道过渡何时结束。可以是 <code>transitionend</code> 或 <code>animationend</code>，这取决于你所应用的 CSS 规则。如果你仅仅使用二者的其中之一，Vue 可以自动探测到正确的类型。</p><p>然而在某些场景中，你或许想要在同一个元素上同时使用它们两个。举例来说，Vue 触发了一个 CSS 动画，同时鼠标悬停触发另一个 CSS 过渡。此时你需要显式地传入 <code>type</code> prop 来声明，告诉 Vue 需要关心哪种类型，传入的值是 <code>animation</code> 或 <code>transition</code>：</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">Transition</span><span style="color:#B392F0;"> type</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;animation&quot;</span><span style="color:#E1E4E8;">&gt;...&lt;/</span><span style="color:#79B8FF;">Transition</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="nested-transitions-and-explicit-transition-durations" tabindex="-1">深层级过渡与显式过渡时长 <a class="header-anchor" href="#nested-transitions-and-explicit-transition-durations" aria-label="Permalink to &quot;深层级过渡与显式过渡时长 {#nested-transitions-and-explicit-transition-durations}&quot;">​</a></h3><p>尽管过渡 class 仅能应用在 <code>&lt;Transition&gt;</code> 的直接子元素上，我们还是可以使用深层级的 CSS 选择器，在深层级的元素上触发过渡效果：</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">Transition</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;nested&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">div</span><span style="color:#B392F0;"> v-if</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">show</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;"> class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;outer&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">div</span><span style="color:#B392F0;"> class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;inner&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      Hello</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#79B8FF;">Transition</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">/* 应用于嵌套元素的规则 */</span></span>
<span class="line"><span style="color:#B392F0;">.nested-enter-active</span><span style="color:#B392F0;"> .inner</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#B392F0;">.nested-leave-active</span><span style="color:#B392F0;"> .inner</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#79B8FF;">  transition</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">all</span><span style="color:#79B8FF;"> 0.3</span><span style="color:#F97583;">s</span><span style="color:#79B8FF;"> ease-in-out</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">.nested-enter-from</span><span style="color:#B392F0;"> .inner</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#B392F0;">.nested-leave-to</span><span style="color:#B392F0;"> .inner</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#79B8FF;">  transform</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">translateX</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">30</span><span style="color:#F97583;">px</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#79B8FF;">  opacity</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/* ... 省略了其他必要的 CSS */</span></span></code></pre></div><p>我们甚至可以在深层元素上添加一个过渡延迟，从而创建一个带渐进延迟的动画序列：</p><div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">/* 延迟嵌套元素的进入以获得交错效果 */</span></span>
<span class="line"><span style="color:#B392F0;">.nested-enter-active</span><span style="color:#B392F0;"> .inner</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line highlighted"><span style="color:#79B8FF;">  transition-delay</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">0.25</span><span style="color:#F97583;">s</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>然而，这会带来一个小问题。默认情况下，<code>&lt;Transition&gt;</code> 组件会通过监听过渡根元素上的<strong>第一个</strong> <code>transitionend</code> 或者 <code>animationend</code> 事件来尝试自动判断过渡何时结束。而在嵌套的过渡中，期望的行为应该是等待所有内部元素的过渡完成。</p><p>在这种情况下，你可以通过向 <code>&lt;Transition&gt;</code> 组件传入 <code>duration</code> prop 来显式指定过渡的持续时间 (以毫秒为单位)。总持续时间应该匹配延迟加上内部元素的过渡持续时间：</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">Transition</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">duration</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">550</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;...&lt;/</span><span style="color:#79B8FF;">Transition</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div>`,22)),e(P),a[4]||(a[4]=i(`<p><a href="https://play.vuejs.org/#eNqVVd9v0zAQ/leO8LAfrE3HNKSFbgKmSYMHQNAHkPLiOtfEm2NHttN2mvq/c7bTNi1jgFop9t13d9995ziPyfumGc5bTLJkbLkRjQOLrm2uciXqRhsHj2BwBiuYGV3DAUEPcpUrrpUlaKUXcOkBh860eJSrcRqzUDxtHNaNZA5pBzCets5pBe+4FPz+Mk+66Bf+mSdXE12WEsdphMWQiWHKCicoLCtaw/yKIs/PR3kCitVIG4XWYUEJfATFFGIO84GYdRUIyCWzlra6dWg2wA66dgqlts7c+d8tSqk34JTQ6xqb9TjdUiTDOO21TFvrHqRfDkPpExiGKvBITjdl/L40ulVFBi8R8a3P17CiEKrM4GzULIOlFmpQoSgrl8HpKFpX3kFZu2y0BNhJxznvwaJCA1TEYcC4E3MkKp1VIptjZ43E3KajDJiUMBqeWUBmcUBUqJGYOT2GAiV7gJAA9Iy4GyoBKLH2z+N0W3q/CMC2yCCkyajM63Mbc+9z9mfvZD+b071MM23qLC69+j8PvX5HQUDdMC6cL7BOTtQXCJwpas/qHhWIBdYtWGgtDWNttWTmThu701pf1W6+v1Hd8Xbz+k+VQxmv8i7Fv1HZn+g/iv2nRkjzbd6npf/Rkz49DifQ3dLZBBYOJzC4rqgCwsUbmLYlCAUVU4XsCd1NrCeRHcYXb1IJC/RX2hEYCwJTvHYVMZoavbBI09FmU+LiFSzIh0AIXy1mqZiFKaKCmVhiEVJ7GftHZTganUZ56EYLL3FykjhL195MlMM7qxXdmEGDPOG6boRE86UJVPMki+p4H01WLz4Fm78hSdBo5xXy+yfsd3bpbXny1SA1M8c82fgcMyW66L75/hmXtN44a120ktDPOL+h1bL1HCPsA42DaPdwge3HcO/TOCb2ZumQJtA15Yl65Crg84S+BdfPtL6lezY8C3GkZ7L6Bc1zNR0=" target="_blank" rel="noreferrer">在演练场中尝试一下</a></p><p>如果有必要的话，你也可以用对象的形式传入，分开指定进入和离开所需的时间：</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">Transition</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">duration</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">{ enter: </span><span style="color:#79B8FF;">500</span><span style="color:#E1E4E8;">, leave: </span><span style="color:#79B8FF;">800</span><span style="color:#E1E4E8;"> }</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;...&lt;/</span><span style="color:#79B8FF;">Transition</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="performance-considerations" tabindex="-1">性能考量 <a class="header-anchor" href="#performance-considerations" aria-label="Permalink to &quot;性能考量 {#performance-considerations}&quot;">​</a></h3><p>你可能注意到我们上面例子中展示的动画所用到的 CSS 属性大多是 <code>transform</code> 和 <code>opacity</code> 之类的。用这些属性制作动画非常高效，因为：</p><ol><li><p>他们在动画过程中不会影响到 DOM 结构，因此不会每一帧都触发昂贵的 CSS 布局重新计算。</p></li><li><p>大多数的现代浏览器都可以在执行 <code>transform</code> 动画时利用 GPU 进行硬件加速。</p></li></ol><p>相比之下，像 <code>height</code> 或者 <code>margin</code> 这样的属性会触发 CSS 布局变动，因此执行它们的动画效果更昂贵，需要谨慎使用。</p><h2 id="javascript-hooks" tabindex="-1">JavaScript 钩子 <a class="header-anchor" href="#javascript-hooks" aria-label="Permalink to &quot;JavaScript 钩子 {#javascript-hooks}&quot;">​</a></h2><p>你可以通过监听 <code>&lt;Transition&gt;</code> 组件事件的方式在过渡过程中挂上钩子函数：</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">Transition</span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#B392F0;">before-enter</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">onBeforeEnter</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#B392F0;">enter</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">onEnter</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#B392F0;">after-enter</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">onAfterEnter</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#B392F0;">enter-cancelled</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">onEnterCancelled</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#B392F0;">before-leave</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">onBeforeLeave</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#B392F0;">leave</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">onLeave</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#B392F0;">after-leave</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">onAfterLeave</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  @</span><span style="color:#B392F0;">leave-cancelled</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">onLeaveCancelled</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">  &lt;!-- ... --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#79B8FF;">Transition</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><div class="composition-api"><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 在元素被插入到 DOM 之前被调用</span></span>
<span class="line"><span style="color:#6A737D;">// 用这个来设置元素的 &quot;enter-from&quot; 状态</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> onBeforeEnter</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">el</span><span style="color:#E1E4E8;">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 在元素被插入到 DOM 之后的下一帧被调用</span></span>
<span class="line"><span style="color:#6A737D;">// 用这个来开始进入动画</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> onEnter</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">el</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">done</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6A737D;">  // 调用回调函数 done 表示过渡结束</span></span>
<span class="line"><span style="color:#6A737D;">  // 如果与 CSS 结合使用，则这个回调是可选参数</span></span>
<span class="line"><span style="color:#B392F0;">  done</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 当进入过渡完成时调用。</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> onAfterEnter</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">el</span><span style="color:#E1E4E8;">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 当进入过渡在完成之前被取消时调用</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> onEnterCancelled</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">el</span><span style="color:#E1E4E8;">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 在 leave 钩子之前调用</span></span>
<span class="line"><span style="color:#6A737D;">// 大多数时候，你应该只会用到 leave 钩子</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> onBeforeLeave</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">el</span><span style="color:#E1E4E8;">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 在离开过渡开始时调用</span></span>
<span class="line"><span style="color:#6A737D;">// 用这个来开始离开动画</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> onLeave</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">el</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">done</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6A737D;">  // 调用回调函数 done 表示过渡结束</span></span>
<span class="line"><span style="color:#6A737D;">  // 如果与 CSS 结合使用，则这个回调是可选参数</span></span>
<span class="line"><span style="color:#B392F0;">  done</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 在离开过渡完成、</span></span>
<span class="line"><span style="color:#6A737D;">// 且元素已从 DOM 中移除时调用</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> onAfterLeave</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">el</span><span style="color:#E1E4E8;">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 仅在 v-show 过渡中可用</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> onLeaveCancelled</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">el</span><span style="color:#E1E4E8;">) {}</span></span></code></pre></div></div><div class="options-api"><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">  // ...</span></span>
<span class="line"><span style="color:#E1E4E8;">  methods: {</span></span>
<span class="line"><span style="color:#6A737D;">    // 在元素被插入到 DOM 之前被调用</span></span>
<span class="line"><span style="color:#6A737D;">    // 用这个来设置元素的 &quot;enter-from&quot; 状态</span></span>
<span class="line"><span style="color:#B392F0;">    onBeforeEnter</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">el</span><span style="color:#E1E4E8;">) {},</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    // 在元素被插入到 DOM 之后的下一帧被调用</span></span>
<span class="line"><span style="color:#6A737D;">    // 用这个来开始进入动画</span></span>
<span class="line"><span style="color:#B392F0;">    onEnter</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">el</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">done</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6A737D;">      // 调用回调函数 done 表示过渡结束</span></span>
<span class="line"><span style="color:#6A737D;">      // 如果与 CSS 结合使用，则这个回调是可选参数</span></span>
<span class="line"><span style="color:#B392F0;">      done</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    // 当进入过渡完成时调用。</span></span>
<span class="line"><span style="color:#B392F0;">    onAfterEnter</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">el</span><span style="color:#E1E4E8;">) {},</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    // 当进入过渡在完成之前被取消时调用</span></span>
<span class="line"><span style="color:#B392F0;">    onEnterCancelled</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">el</span><span style="color:#E1E4E8;">) {},</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    // 在 leave 钩子之前调用</span></span>
<span class="line"><span style="color:#6A737D;">    // 大多数时候，你应该只会用到 leave 钩子</span></span>
<span class="line"><span style="color:#B392F0;">    onBeforeLeave</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">el</span><span style="color:#E1E4E8;">) {},</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    // 在离开过渡开始时调用</span></span>
<span class="line"><span style="color:#6A737D;">    // 用这个来开始离开动画</span></span>
<span class="line"><span style="color:#B392F0;">    onLeave</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">el</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">done</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#6A737D;">      // 调用回调函数 done 表示过渡结束</span></span>
<span class="line"><span style="color:#6A737D;">      // 如果与 CSS 结合使用，则这个回调是可选参数</span></span>
<span class="line"><span style="color:#B392F0;">      done</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    // 在离开过渡完成、</span></span>
<span class="line"><span style="color:#6A737D;">    // 且元素已从 DOM 中移除时调用</span></span>
<span class="line"><span style="color:#B392F0;">    onAfterLeave</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">el</span><span style="color:#E1E4E8;">) {},</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    // 仅在 v-show 过渡中可用</span></span>
<span class="line"><span style="color:#B392F0;">    onLeaveCancelled</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">el</span><span style="color:#E1E4E8;">) {}</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></div><p>这些钩子可以与 CSS 过渡或动画结合使用，也可以单独使用。</p><p>在使用仅由 JavaScript 执行的动画时，最好是添加一个 <code>:css=&quot;false&quot;</code> prop。这显式地向 Vue 表明可以跳过对 CSS 过渡的自动探测。除了性能稍好一些之外，还可以防止 CSS 规则意外地干扰过渡效果：</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">Transition</span></span>
<span class="line"><span style="color:#E1E4E8;">  ...</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">  :</span><span style="color:#B392F0;">css</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">false</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  ...</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#79B8FF;">Transition</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>在有了 <code>:css=&quot;false&quot;</code> 后，我们就自己全权负责控制什么时候过渡结束了。这种情况下对于 <code>@enter</code> 和 <code>@leave</code> 钩子来说，回调函数 <code>done</code> 就是必须的。否则，钩子将被同步调用，过渡将立即完成。</p><p>这里是使用 <a href="https://gsap.com/" target="_blank" rel="noreferrer">GSAP 库</a>执行动画的一个示例，你也可以使用任何你想要的库，比如 <a href="https://animejs.com/" target="_blank" rel="noreferrer">Anime.js</a> 或者 <a href="https://motion.dev/" target="_blank" rel="noreferrer">Motion One</a>：</p>`,17)),e(K),a[5]||(a[5]=i(`<div class="composition-api"><p><a href="https://play.vuejs.org/#eNqNVMtu2zAQ/JUti8I2YD3i1GigKmnaorcCveTQArpQFCWzlkiCpBwHhv+9Sz1qKYckJ3FnlzvD2YVO5KvW4aHlJCGpZUZoB5a7Vt9lUjRaGQcnMLyEM5RGNbDA0sX/VGWpHnB/xEQmmZIWe+zUI9z6m0tnWr7ymbKVzAklQclvvFSG/5COmyWvV3DKJHTdQiRHZN0jAJbRmv9OIA432/UE+jODlKZMuKcErnx8RrazP8woR7I1FEryKaVTU8aiNdRfwWZTQtQwi1HAGF/YB4BTyxNY8JpaJ1go5K/WLTfhdg1Xq8V4SX5Xja65w0ovaCJ8Jvsnpwc+l525F2XH4ac3Cj8mcB3HbxE9qnvFMRzJ0K3APuhIjPefmTTyvWBAGvWbiDuIgeNYRh3HCCDNW+fQmHtWC7a/zciwaO/8NyN3D6qqap5GfVnXAC89GCqt8Bp77vu827+A+53AJrOFzMhQdMnO8dqPpMO74Yx4wqxFtKS1HbBOMdIX4gAMffVp71+Qq2NG4BCIcngBKk8jLOvfGF30IpBGEwcwtO6p9sdwbNXPIadsXxnVyiKB9x83+c3N9WePN9RUQgZO6QQ2sT524KMo3M5Pf4h3XFQ7NwFyZQpuAkML0doEtvEHhPvRDPRkTfq/QNDgRvy1SuIvpFOSDQmbkWTckf7hHsjIzjltkyhqpd5XIVNN5HNfGlW09eAcMp3J+R+pEn7L" target="_blank" rel="noreferrer">在演练场中尝试一下</a></p></div><div class="options-api"><p><a href="https://play.vuejs.org/#eNqNVFFvmzAQ/is3pimNlABNF61iaddt2tukvfRhk/xiwIAXsJF9pKmq/PedDTSwh7ZSFLjvzvd9/nz4KfjatuGhE0ES7GxmZIu3TMmm1QahtLyFwugGFu51wRQAU+Lok7koeFcjPDk058gvlv07gBHYGTVGALbSDwmg6USPnNzjtHL/jcBK5zZxxQwZavVNFNqIHwqF8RUAWs2jn4IffCfqQz+mik5lKLWi3GT1hagHRU58aAUSshpV2YzX4ncCcbjZDp099GcG6ZZnEh8TuPR8S0/oTJhQjmQryLUSU0rUU8a8M9wtoWZTQtIwi0nAGJ/ZB0BwKxJYiJpblFko1a8OLzbhdgWXy8WzP99109YCqdIJmgifyfYuzmUzfFF2HH56o/BjAldx/BbRo7pXHKMjGbrl1IcciWn9fyaNfC8YsIueR5wCFFTGUVAEsEs7pOmDu6yW2f6GBW5o4QbeuScLbu91WdZiF/VlvgEtujdcWek09tx3qZ+/tXAzQU1mA8mCoeicneO1OxKP9yM+4ElmLaEFr+2AecVEn8sDZOSrSzv/1qk+sgAOa1kMOyDlu4jK+j1GZ70E7KKJAxRafKzdazi26s8h5dm+NLpTeQLvP27S6+urz/7T5aaUao26TWATt0cPPsgcK3f6Q1wJWVY4AVJtcmHWhueyo89+G38guD+agT5YBf39s25oIv5arehu8krYkLAs8BeG86DfuANYUCG2NomiTrX7Msx0E7ncl0bnXT04566M4PQPykWaWw==" target="_blank" rel="noreferrer">在演练场中尝试一下</a></p></div><h2 id="reusable-transitions" tabindex="-1">可复用过渡效果 <a class="header-anchor" href="#reusable-transitions" aria-label="Permalink to &quot;可复用过渡效果 {#reusable-transitions}&quot;">​</a></h2><p>得益于 Vue 的组件系统，过渡效果是可以被封装复用的。要创建一个可被复用的过渡，我们需要为 <code>&lt;Transition&gt;</code> 组件创建一个包装组件，并向内传入插槽内容：</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">&lt;!-- MyTransition.vue --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">// JavaScript 钩子逻辑...</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line highlighted"><wbr></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">  &lt;!-- 包装内置的 Transition 组件 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">Transition</span></span>
<span class="line"><span style="color:#B392F0;">    name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;my-transition&quot;</span></span>
<span class="line"><span style="color:#B392F0;">    @enter</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;onEnter&quot;</span></span>
<span class="line"><span style="color:#B392F0;">    @leave</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;onLeave&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">slot</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">slot</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#6A737D;">&lt;!-- 向内传递插槽内容 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">Transition</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">style</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">  必要的 CSS...</span></span>
<span class="line"><span style="color:#6A737D;">  注意：避免在这里使用 &lt;style scoped&gt;</span></span>
<span class="line"><span style="color:#6A737D;">  因为那不会应用到插槽内容上</span></span>
<span class="line"><span style="color:#6A737D;">*/</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">style</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>现在 <code>MyTransition</code> 可以在导入后像内置组件那样使用了：</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">MyTransition</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">div</span><span style="color:#B392F0;"> v-if</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">show</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;Hello&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#79B8FF;">MyTransition</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="transition-on-appear" tabindex="-1">出现时过渡 <a class="header-anchor" href="#transition-on-appear" aria-label="Permalink to &quot;出现时过渡 {#transition-on-appear}&quot;">​</a></h2><p>如果你想在某个节点初次渲染时应用一个过渡效果，你可以添加 <code>appear</code> prop：</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">Transition</span><span style="color:#B392F0;"> appear</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  ...</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#79B8FF;">Transition</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="transition-between-elements" tabindex="-1">元素间过渡 <a class="header-anchor" href="#transition-between-elements" aria-label="Permalink to &quot;元素间过渡 {#transition-between-elements}&quot;">​</a></h2><p>除了通过 <code>v-if</code> / <code>v-show</code> 切换一个元素，我们也可以通过 <code>v-if</code> / <code>v-else</code> / <code>v-else-if</code> 在几个组件间进行切换，只要确保任一时刻只会有一个元素被渲染即可：</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">Transition</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">button</span><span style="color:#B392F0;"> v-if</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">docState </span><span style="color:#F97583;">===</span><span style="color:#9ECBFF;"> &#39;saved&#39;&quot;</span><span style="color:#E1E4E8;">&gt;Edit&lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">button</span><span style="color:#B392F0;"> v-else-if</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">docState </span><span style="color:#F97583;">===</span><span style="color:#9ECBFF;"> &#39;edited&#39;&quot;</span><span style="color:#E1E4E8;">&gt;Save&lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">button</span><span style="color:#B392F0;"> v-else-if</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">docState </span><span style="color:#F97583;">===</span><span style="color:#9ECBFF;"> &#39;editing&#39;&quot;</span><span style="color:#E1E4E8;">&gt;Cancel&lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#79B8FF;">Transition</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div>`,13)),e(b),a[6]||(a[6]=i(`<p><a href="https://play.vuejs.org/#eNqdk8tu2zAQRX9loI0SoLLcFN2ostEi6BekmwLa0NTYJkKRBDkSYhj+9wxJO3ZegBGu+Lhz7syQ3Bd/nJtNIxZN0QbplSMISKNbdkYNznqCPXhcwwHW3g5QsrTsTGekNYGgt/KBBCEsouimDGLCvrztTFtnGGN4QTg4zbK4ojY4YSDQTuOiKwbhN8pUXm221MDd3D11xfJeK/kIZEHupEagrbfjZssxzAgNs5nALIC2VxNILUJg1IpMxWmRUAY9U6IZ2/3zwgRFyhowYoieQaseq9ElDaTRrkYiVkyVWrPiXNdiAcequuIkPo3fMub5Sg4l9oqSevmXZ22dwR8YoQ74kdsL4Go7ZTbR74HT/KJfJlxleGrG8l4YifqNYVuf251vqOYr4llbXz4C06b75+ns1a3BPsb0KrBy14Aymnerlbby8Vc8cTajG35uzFITpu0t5ufzHQdeH6LBsezEO0eJVbB6pBiVVLPTU6jQEPpKyMj8dnmgkQs+HmQcvVTIQK1hPrv7GQAFt9eO9Bk6fZ8Ub52Qiri8eUo+4dbWD02exh79v/nBP+H2PStnwz/jelJ1geKvk/peHJ4BoRZYow==" target="_blank" rel="noreferrer">在演练场中尝试一下</a></p><h2 id="transition-modes" tabindex="-1">过渡模式 <a class="header-anchor" href="#transition-modes" aria-label="Permalink to &quot;过渡模式 {#transition-modes}&quot;">​</a></h2><p>在之前的例子中，进入和离开的元素都是在同时开始动画的，因此我们不得不将它们设为 <code>position: absolute</code> 以避免二者同时存在时出现的布局问题。</p><p>然而，很多情况下这可能并不符合需求。我们可能想要先执行离开动画，然后在其完成<strong>之后</strong>再执行元素的进入动画。手动编排这样的动画是非常复杂的，好在我们可以通过向 <code>&lt;Transition&gt;</code> 传入一个 <code>mode</code> prop 来实现这个行为：</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">Transition</span><span style="color:#B392F0;"> mode</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;out-in&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  ...</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#79B8FF;">Transition</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>将之前的例子改为 <code>mode=&quot;out-in&quot;</code> 后是这样：</p>`,6)),e(b,{mode:"out-in"}),a[7]||(a[7]=i(`<p><code>&lt;Transition&gt;</code> 也支持 <code>mode=&quot;in-out&quot;</code>，虽然这并不常用。</p><h2 id="transition-between-components" tabindex="-1">组件间过渡 <a class="header-anchor" href="#transition-between-components" aria-label="Permalink to &quot;组件间过渡 {#transition-between-components}&quot;">​</a></h2><p><code>&lt;Transition&gt;</code> 也可以作用于<a href="/guide/essentials/component-basics.html#dynamic-components">动态组件</a>之间的切换：</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">Transition</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;fade&quot;</span><span style="color:#B392F0;"> mode</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;out-in&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">component</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">is</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">activeComponent</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">component</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#79B8FF;">Transition</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div>`,4)),e(L),a[8]||(a[8]=i(`<div class="composition-api"><p><a href="https://play.vuejs.org/#eNqtksFugzAMhl/F4tJNKtDLLoxWKnuDacdcUnC3SCGJiMmEqr77EkgLbXfYYZyI8/v77dinZG9M5npMiqS0dScMgUXqzY4p0RrdEZzAfnEp9fc7HuEMx063sPIZq6viTbdmHy+yfDwF5K2guhFUUcBUnkNvcelBGrjTooHaC7VCRXBAoT6hQTRyAH2w2DlsmKq1sgS8JuEwUCfxdgF7Gqt5ZqrMp+58X/5A2BrJCcOJSskPKP0v+K8UyvQENBjcsqTjjdAsAZe2ukHpI3dm/q5wXPZBPFqxZAf7gCrzGfufDlVwqB4cPjqurCChFSjeBvGRN+iTA9afdE+pUD43FjG/bSHsb667Mr9qJot89vCBMl8+oiotDTL8ZsE39UnYpRN0fQlK5A5jEE6BSVdiAdrwWtAAm+zFAnKLr0ydA3pJDDt0x/PrMrJifgGbKdFPfCwpWU+TuWz5omzfVCNcfJJ5geL8pqtFn5E07u7fSHFOj6TzDyUDNEM=" target="_blank" rel="noreferrer">在演练场中尝试一下</a></p></div><div class="options-api"><p><a href="https://play.vuejs.org/#eNqtks9ugzAMxl/F4tJNamGXXVhWqewVduSSgStFCkkUDFpV9d0XJyn9t8MOkxBg5/Pvi+Mci51z5TxhURdi7LxytG2NGpz1BB92cDvYezvAqqxixNLVjaC5ETRZ0Br8jpIe93LSBMfWAHRBYQ0aGms4Jvw6Q05rFvSS5NNzEgN4pMmbcwQgO1Izsj5CalhFRLDj1RN/wis8olpaCQHh4LQk5IiEll+owy+XCGXcREAHh+9t4WWvbFvAvBlsjzpk7gx5TeqJtdG4LbawY5KoLtR/NGjYoHkw+PTSjIqUNWDkwOK97DHUMjVEdqKNMqE272E5dajV+JvpVlSLJllUF4+QENX1ERox0kHzb8m+m1CEfpOgYYgpqVHOmJNpgLQQa7BOdooO8FK+joByxLc4tlsiX6s7HtnEyvU1vKTCMO+4pWKdBnO+0FfbDk31as5HsvR+Hl9auuozk+J1/hspz+mRdPoBYtonzg==" target="_blank" rel="noreferrer">在演练场中尝试一下</a></p></div><h2 id="dynamic-transitions" tabindex="-1">动态过渡 <a class="header-anchor" href="#dynamic-transitions" aria-label="Permalink to &quot;动态过渡 {#dynamic-transitions}&quot;">​</a></h2><p><code>&lt;Transition&gt;</code> 的 props (比如 <code>name</code>) 也可以是动态的！这让我们可以根据状态变化动态地应用不同类型的过渡：</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">Transition</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">transitionName</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">  &lt;!-- ... --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#79B8FF;">Transition</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>这个特性的用处是可以提前定义好多组 CSS 过渡或动画的 class，然后在它们之间动态切换。</p><p>你也可以根据你的组件的当前状态在 JavaScript 过渡钩子中应用不同的行为。最后，创建动态过渡的终极方式还是创建<a href="#reusable-transitions">可复用的过渡组件</a>，并让这些组件根据动态的 props 来改变过渡的效果。掌握了这些技巧后，就真的只有你想不到，没有做不到的了。</p><h2 id="transitions-with-the-key-attribute" tabindex="-1">使用 Key Attribute 过渡 <a class="header-anchor" href="#transitions-with-the-key-attribute" aria-label="Permalink to &quot;使用 Key Attribute 过渡 {#transitions-with-the-key-attribute}&quot;">​</a></h2><p>有时为了触发过渡，你需要强制重新渲染 DOM 元素。</p><p>以计数器组件为例：</p><div class="composition-api"><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> setup</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { ref } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> count</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">setInterval</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> count.value</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">Transition</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">span</span><span style="color:#B392F0;"> :key</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;count&quot;</span><span style="color:#E1E4E8;">&gt;{{ count }}&lt;/</span><span style="color:#85E89D;">span</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">Transition</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div></div><div class="options-api"><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  data</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">    return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      count: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      interval: </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#B392F0;">  mounted</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#79B8FF;">    this</span><span style="color:#E1E4E8;">.interval </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> setInterval</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#79B8FF;">      this</span><span style="color:#E1E4E8;">.count</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }, </span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#B392F0;">  beforeDestroy</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#B392F0;">    clearInterval</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.interval)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">Transition</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">span</span><span style="color:#B392F0;"> :key</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;count&quot;</span><span style="color:#E1E4E8;">&gt;{{ count }}&lt;/</span><span style="color:#85E89D;">span</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">Transition</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div></div><p>如果不使用 <code>key</code> attribute，则只有文本节点会被更新，因此不会发生过渡。但是，有了 <code>key</code> 属性，Vue 就知道在 <code>count</code> 改变时创建一个新的 <code>span</code> 元素，因此 <code>Transition</code> 组件有两个不同的元素在它们之间进行过渡。</p><div class="composition-api"><p><a href="https://play.vuejs.org/#eNp9UsFu2zAM/RVCl6Zo4nhYd/GcAtvQQ3fYhq1HXTSFydTKkiDJbjLD/z5KMrKgLXoTHx/5+CiO7JNz1dAja1gbpFcuQsDYuxtuVOesjzCCxx1MsPO2gwuiXnzkhhtpTYggbW8ibBJlUV/mBJXfmYh+EHqxuITNDYzcQGFWBPZ4dUXEaQnv6jrXtOuiTJoUROycFhEpAmi3agCpRQgbzp68cA49ZyV174UJKiprckxIcMJA84hHImc9oo7jPOQ0kQ4RSvH6WXW7JiV6teszfQpDPGqEIK3DLSGpQbazsyaugvqLDVx77JIhbqp5wsxwtrRvPFI7NWDhEGtYYVrQSsgELzOiUQw4I2Vh8TRgA9YJqeIR6upDABQh9TpTAPE7WN3HlxLp084Foi3N54YN1KWEVpOMkkO2ZJHsmp3aVw/BGjqMXJE22jml0X93STRw1pReKSe0tk9fMxZ9nzwVXP5B+fgK/hAOCePsh8dAt4KcnXJR+D3S16X07a9veKD3KdnZba+J/UbyJ+Zl0IyF9rk3Wxr7jJenvcvnrcz+PtweItKuZ1Np0MScMp8zOvkvb1j/P+776jrX0UbZ9A+fYSTP" target="_blank" rel="noreferrer">在演练场中尝试一下</a></p></div><div class="options-api"><p><a href="https://play.vuejs.org/#eNp9U8tu2zAQ/JUFTwkSyw6aXlQ7QB85pIe2aHPUhZHWDhOKJMiVYtfwv3dJSpbbBgEMWJydndkdUXvx0bmi71CUYhlqrxzdVAa3znqCBtey0wT7ygA0kuTZeX4G8EidN+MJoLadoRKuLkdAGULfS12C6bSGDB/i3yFx2tiAzaRIjyoUYxesICDdDaczZq1uJrNETY4XFx8G5Uu4WiwW55PBA66txy8YyNvdZFNrlP4o/Jdpbq4M/5bzYxZ8IGydloR8Alg2qmcVGcKqEi9eOoe+EqnExXsvTVCkrBkQxoKTBspn3HFDmprp+32ODA4H9mLCKDD/R2E5Zz9+Ws5PpuBjoJ1GCLV12DASJdKGa2toFtRvLOHaY8vx8DrFMGdiOJvlS48sp3rMHGb1M4xRzGQdYU6REY6rxwHJGdJxwBKsk7WiHSyK9wFQhqh14gDyIVjd0f8Wa2/bUwOyWXwQLGGRWzicuChvKC4F8bpmrTbFU7CGL2zqiJm2Tmn03100DZUox5ddCam1ffmaMPJd3Cnj9SPWz6/gT2EbsUr88Bj4VmAljjWSfoP88mL59tc33PLzsdjaptPMfqP4E1MYPGOmfepMw2Of8NK0d238+JTZ3IfbLSFnPSwVB53udyX4q/38xurTuO+K6/Fqi8MffqhR/A==" target="_blank" rel="noreferrer">在演练场中尝试一下</a></p></div><hr><p><strong>参考</strong></p><ul><li><a href="/api/built-in-components.html#transition"><code>&lt;Transition&gt;</code> API 参考</a></li></ul>`,18))]))}});export{X as __pageData,R as default};
