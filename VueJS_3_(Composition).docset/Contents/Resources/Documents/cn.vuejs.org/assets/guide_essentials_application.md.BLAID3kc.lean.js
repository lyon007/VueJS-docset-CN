import{_ as a,c as n,b as p,o}from"./chunks/framework.B2oIMGqn.js";const y=JSON.parse('{"title":"创建一个 Vue 应用","description":"","frontmatter":{},"headers":[{"level":2,"title":"应用实例","slug":"the-application-instance","link":"#the-application-instance","children":[]},{"level":2,"title":"根组件","slug":"the-root-component","link":"#the-root-component","children":[]},{"level":2,"title":"挂载应用","slug":"mounting-the-app","link":"#mounting-the-app","children":[{"level":3,"title":"DOM 中的根组件模板","slug":"in-dom-root-component-template","link":"#in-dom-root-component-template","children":[]}]},{"level":2,"title":"应用配置","slug":"app-configurations","link":"#app-configurations","children":[]},{"level":2,"title":"多个应用实例","slug":"multiple-application-instances","link":"#multiple-application-instances","children":[]}],"relativePath":"guide/essentials/application.md","filePath":"guide/essentials/application.md"}'),l={name:"guide/essentials/application.md"};function e(t,s,c,i,r,E){return o(),n("div",null,s[0]||(s[0]=[p(`<h1 id="creating-a-vue-application" tabindex="-1">创建一个 Vue 应用 <a class="header-anchor" href="#creating-a-vue-application" aria-label="Permalink to &quot;创建一个 Vue 应用 {#creating-a-vue-application}&quot;">​</a></h1><h2 id="the-application-instance" tabindex="-1">应用实例 <a class="header-anchor" href="#the-application-instance" aria-label="Permalink to &quot;应用实例 {#the-application-instance}&quot;">​</a></h2><p>每个 Vue 应用都是通过 <a href="/api/application.html#createapp"><code>createApp</code></a> 函数创建一个新的 <strong>应用实例</strong>：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { createApp } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> app</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> createApp</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#6A737D;">  /* 根组件选项 */</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre></div><h2 id="the-root-component" tabindex="-1">根组件 <a class="header-anchor" href="#the-root-component" aria-label="Permalink to &quot;根组件 {#the-root-component}&quot;">​</a></h2><p>我们传入 <code>createApp</code> 的对象实际上是一个组件，每个应用都需要一个“根组件”，其他组件将作为其子组件。</p><p>如果你使用的是单文件组件，我们可以直接从另一个文件中导入根组件。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { createApp } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"><span style="color:#6A737D;">// 从一个单文件组件中导入根组件</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> App </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;./App.vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> app</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> createApp</span><span style="color:#E1E4E8;">(App)</span></span></code></pre></div><p>虽然本指南中的许多示例只需要一个组件，但大多数真实的应用都是由一棵嵌套的、可重用的组件树组成的。例如，一个待办事项 (Todos) 应用的组件树可能是这样的：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span>App (root component)</span></span>
<span class="line"><span>├─ TodoList</span></span>
<span class="line"><span>│  └─ TodoItem</span></span>
<span class="line"><span>│     ├─ TodoDeleteButton</span></span>
<span class="line"><span>│     └─ TodoEditButton</span></span>
<span class="line"><span>└─ TodoFooter</span></span>
<span class="line"><span>   ├─ TodoClearButton</span></span>
<span class="line"><span>   └─ TodoStatistics</span></span></code></pre></div><p>我们会在指南的后续章节中讨论如何定义和组合多个组件。在那之前，我们得先关注一个组件内到底发生了什么。</p><h2 id="mounting-the-app" tabindex="-1">挂载应用 <a class="header-anchor" href="#mounting-the-app" aria-label="Permalink to &quot;挂载应用 {#mounting-the-app}&quot;">​</a></h2><p>应用实例必须在调用了 <code>.mount()</code> 方法后才会渲染出来。该方法接收一个“容器”参数，可以是一个实际的 DOM 元素或是一个 CSS 选择器字符串：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#B392F0;"> id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;app&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">mount</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;#app&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre></div><p>应用根组件的内容将会被渲染在容器元素里面。容器元素自己将<strong>不会</strong>被视为应用的一部分。</p><p><code>.mount()</code> 方法应该始终在整个应用配置和资源注册完成后被调用。同时请注意，不同于其他资源注册方法，它的返回值是根组件实例而非应用实例。</p><h3 id="in-dom-root-component-template" tabindex="-1">DOM 中的根组件模板 <a class="header-anchor" href="#in-dom-root-component-template" aria-label="Permalink to &quot;DOM 中的根组件模板 {#in-dom-root-component-template}&quot;">​</a></h3><p>根组件的模板通常是组件本身的一部分，但也可以直接通过在挂载容器内编写模板来单独提供：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#B392F0;"> id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;app&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">button</span><span style="color:#B392F0;"> @click</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;count++&quot;</span><span style="color:#E1E4E8;">&gt;{{ count }}&lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { createApp } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> app</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> createApp</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#B392F0;">  data</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">    return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      count: </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">mount</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;#app&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre></div><p>当根组件没有设置 <code>template</code> 选项时，Vue 将自动使用容器的 <code>innerHTML</code> 作为模板。</p><p>DOM 内模板通常用于<a href="/guide/quick-start.html#using-vue-from-cdn">无构建步骤</a>的 Vue 应用程序。它们也可以与服务器端框架一起使用，其中根模板可能是由服务器动态生成的。</p><h2 id="app-configurations" tabindex="-1">应用配置 <a class="header-anchor" href="#app-configurations" aria-label="Permalink to &quot;应用配置 {#app-configurations}&quot;">​</a></h2><p>应用实例会暴露一个 <code>.config</code> 对象允许我们配置一些应用级的选项，例如定义一个应用级的错误处理器，用来捕获所有子组件上的错误：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">app.config.</span><span style="color:#B392F0;">errorHandler</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">  /* 处理错误 */</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>应用实例还提供了一些方法来注册应用范围内可用的资源，例如注册一个组件：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">component</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;TodoDeleteButton&#39;</span><span style="color:#E1E4E8;">, TodoDeleteButton)</span></span></code></pre></div><p>这使得 <code>TodoDeleteButton</code> 在应用的任何地方都是可用的。我们会在指南的后续章节中讨论关于组件和其他资源的注册。你也可以在 <a href="/api/application.html">API 参考</a>中浏览应用实例 API 的完整列表。</p><p>确保在挂载应用实例之前完成所有应用配置！</p><h2 id="multiple-application-instances" tabindex="-1">多个应用实例 <a class="header-anchor" href="#multiple-application-instances" aria-label="Permalink to &quot;多个应用实例 {#multiple-application-instances}&quot;">​</a></h2><p>应用实例并不只限于一个。<code>createApp</code> API 允许你在同一个页面中创建多个共存的 Vue 应用，而且每个应用都拥有自己的用于配置和全局资源的作用域。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> app1</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> createApp</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#6A737D;">  /* ... */</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#E1E4E8;">app1.</span><span style="color:#B392F0;">mount</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;#container-1&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> app2</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> createApp</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#6A737D;">  /* ... */</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#E1E4E8;">app2.</span><span style="color:#B392F0;">mount</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;#container-2&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre></div><p>如果你正在使用 Vue 来增强服务端渲染 HTML，并且只想要 Vue 去控制一个大型页面中特殊的一小部分，应避免将一个单独的 Vue 应用实例挂载到整个页面上，而是应该创建多个小的应用实例，将它们分别挂载到所需的元素上去。</p>`,34)]))}const u=a(l,[["render",e]]);export{y as __pageData,u as default};
