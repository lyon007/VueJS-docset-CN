import{_ as p,c as e,b as a,a as n,s as o,x as t,G as c,o as r}from"./chunks/framework.B2oIMGqn.js";const b=JSON.parse('{"title":"响应式基础","description":"","frontmatter":{"outline":"deep"},"headers":[{"level":2,"title":"声明响应式状态","slug":"declaring-reactive-state","link":"#declaring-reactive-state","children":[{"level":3,"title":"响应式代理 vs. 原始值","slug":"reactive-proxy-vs-original","link":"#reactive-proxy-vs-original","children":[],"optionsOnly":true}],"optionsOnly":true},{"level":2,"title":"声明响应式状态","slug":"declaring-reactive-state-1","link":"#declaring-reactive-state-1","children":[{"level":3,"title":"ref()","slug":"ref","link":"#ref","children":[],"compositionOnly":true},{"level":3,"title":"<script setup>","slug":"script-setup","link":"#script-setup","children":[],"compositionOnly":true},{"level":3,"title":"为什么要使用 ref？","slug":"why-refs","link":"#why-refs","children":[],"compositionOnly":true}],"compositionOnly":true},{"level":2,"title":"声明方法","slug":"declaring-methods","link":"#declaring-methods","children":[{"level":3,"title":"深层响应性","slug":"deep-reactivity","link":"#deep-reactivity","children":[]},{"level":3,"title":"DOM 更新时机","slug":"dom-update-timing","link":"#dom-update-timing","children":[]}],"optionsOnly":true},{"level":2,"title":"reactive()","slug":"reactive","link":"#reactive","children":[{"level":3,"title":"Reactive Proxy vs. Original","slug":"reactive-proxy-vs-original-1","link":"#reactive-proxy-vs-original-1","children":[],"compositionOnly":true},{"level":3,"title":"reactive() 的局限性","slug":"limitations-of-reactive","link":"#limitations-of-reactive","children":[],"compositionOnly":true}],"compositionOnly":true},{"level":2,"title":"额外的 ref 解包细节","slug":"additional-ref-unwrapping-details","link":"#additional-ref-unwrapping-details","children":[{"level":3,"title":"作为 reactive 对象的属性","slug":"ref-unwrapping-as-reactive-object-property","link":"#ref-unwrapping-as-reactive-object-property","children":[],"compositionOnly":true},{"level":3,"title":"数组和集合的注意事项","slug":"caveat-in-arrays-and-collections","link":"#caveat-in-arrays-and-collections","children":[],"compositionOnly":true},{"level":3,"title":"在模板中解包的注意事项","slug":"caveat-when-unwrapping-in-templates","link":"#caveat-when-unwrapping-in-templates","children":[],"compositionOnly":true},{"level":3,"title":"有状态方法","slug":"stateful-methods","link":"#stateful-methods","children":[],"optionsOnly":true}],"compositionOnly":true}],"relativePath":"guide/essentials/reactivity-fundamentals.md","filePath":"guide/essentials/reactivity-fundamentals.md"}'),i={name:"guide/essentials/reactivity-fundamentals.md"},E={class:"options-api"};function y(d,s,u,F,h,g){const l=c("VueSchoolLink");return r(),e("div",null,[s[2]||(s[2]=a(`<h1 id="reactivity-fundamentals" tabindex="-1">响应式基础 <a class="header-anchor" href="#reactivity-fundamentals" aria-label="Permalink to &quot;响应式基础 {#reactivity-fundamentals}&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">API 参考</p><p>本页和后面很多页面中都分别包含了选项式 API 和组合式 API 的示例代码。现在你选择的是 <span class="options-api">选项式 API</span><span class="composition-api">组合式 API</span>。你可以使用左侧侧边栏顶部的“API 风格偏好”开关在 API 风格之间切换。</p></div><div class="options-api"><h2 id="declaring-reactive-state" tabindex="-1">声明响应式状态 <a class="header-anchor" href="#declaring-reactive-state" aria-label="Permalink to &quot;声明响应式状态 \\* {#declaring-reactive-state}&quot;">​</a></h2><p>选用选项式 API 时，会用 <code>data</code> 选项来声明组件的响应式状态。此选项的值应为返回一个对象的函数。Vue 将在创建新组件实例的时候调用此函数，并将函数返回的对象用响应式系统进行包装。此对象的所有顶层属性都会被代理到组件实例 (即方法和生命周期钩子中的 <code>this</code>) 上。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line highlighted"><span style="color:#B392F0;">  data</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line highlighted"><span style="color:#F97583;">    return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">      count: </span><span style="color:#79B8FF;">1</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">    }</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  // \`mounted\` 是生命周期钩子，之后我们会讲到</span></span>
<span class="line"><span style="color:#B392F0;">  mounted</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#6A737D;">    // \`this\` 指向当前组件实例</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.count) </span><span style="color:#6A737D;">// =&gt; 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    // 数据属性也可以被更改</span></span>
<span class="line"><span style="color:#79B8FF;">    this</span><span style="color:#E1E4E8;">.count </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> 2</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://play.vuejs.org/#eNpFUNFqhDAQ/JXBpzsoHu2j3B2U/oYPpnGtoetGkrW2iP/eRFsPApthd2Zndilex7H8mqioimu0wY16r4W+Rx8ULXVmYsVSC9AaNafz/gcC6RTkHwHWT6IVnne85rI+1ZLr5YJmyG1qG7gIA3Yd2R/LhN77T8y9sz1mwuyYkXazcQI2SiHz/7iP3VlQexeb5KKjEKEe2lPyMIxeSBROohqxVO4E6yV6ppL9xykTy83tOQvd7tnzoZtDwhrBO2GYNFloYWLyxrzPPOi44WWLWUt618txvASUhhRCKSHgbZt2scKy7HfCujGOqWL9BVfOgyI=" target="_blank" rel="noreferrer">在演练场中尝试一下</a></p><p>这些实例上的属性仅在实例首次创建时被添加，因此你需要确保它们都出现在 <code>data</code> 函数返回的对象上。若所需的值还未准备好，在必要时也可以使用 <code>null</code>、<code>undefined</code> 或者其他一些值占位。</p><p>虽然也可以不在 <code>data</code> 上定义，直接向组件实例添加新属性，但这个属性将无法触发响应式更新。</p><p>Vue 在组件实例上暴露的内置 API 使用 <code>$</code> 作为前缀。它同时也为内部属性保留 <code>_</code> 前缀。因此，你应该避免在顶层 <code>data</code> 上使用任何以这些字符作前缀的属性。</p><h3 id="reactive-proxy-vs-original" tabindex="-1">响应式代理 vs. 原始值 <a class="header-anchor" href="#reactive-proxy-vs-original" aria-label="Permalink to &quot;响应式代理 vs. 原始值 \\* {#reactive-proxy-vs-original}&quot;">​</a></h3><p>在 Vue 3 中，数据是基于 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy" target="_blank" rel="noreferrer">JavaScript Proxy (代理)</a> 实现响应式的。使用过 Vue 2 的用户可能需要注意下面这样的边界情况：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  data</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">    return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      someObject: {}</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#B392F0;">  mounted</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">    const</span><span style="color:#79B8FF;"> newObject</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {}</span></span>
<span class="line"><span style="color:#79B8FF;">    this</span><span style="color:#E1E4E8;">.someObject </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newObject</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(newObject </span><span style="color:#F97583;">===</span><span style="color:#79B8FF;"> this</span><span style="color:#E1E4E8;">.someObject) </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>当你在赋值后再访问 <code>this.someObject</code>，此值已经是原来的 <code>newObject</code> 的一个响应式代理。<strong>与 Vue 2 不同的是，这里原始的 <code>newObject</code> 不会变为响应式：请确保始终通过 <code>this</code> 来访问响应式状态。</strong></p></div><div class="composition-api"><h2 id="declaring-reactive-state-1" tabindex="-1">声明响应式状态 <a class="header-anchor" href="#declaring-reactive-state-1" aria-label="Permalink to &quot;声明响应式状态 \\*\\* {#declaring-reactive-state-1}&quot;">​</a></h2><h3 id="ref" tabindex="-1"><code>ref()</code> <a class="header-anchor" href="#ref" aria-label="Permalink to &quot;\`ref()\` \\*\\* {#ref}&quot;">​</a></h3><p>在组合式 API 中，推荐使用 <a href="/api/reactivity-core.html#ref"><code>ref()</code></a> 函数来声明响应式状态：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { ref } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> count</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span></code></pre></div><p><code>ref()</code> 接收参数，并将其包裹在一个带有 <code>.value</code> 属性的 ref 对象中返回：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> count</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(count) </span><span style="color:#6A737D;">// { value: 0 }</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(count.value) </span><span style="color:#6A737D;">// 0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">count.value</span><span style="color:#F97583;">++</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(count.value) </span><span style="color:#6A737D;">// 1</span></span></code></pre></div><blockquote><p>参考：<a href="/guide/typescript/composition-api.html#typing-ref">为 refs 标注类型</a> <sup class="vt-badge ts"></sup></p></blockquote><p>要在组件模板中访问 ref，请从组件的 <code>setup()</code> 函数中声明并返回它们：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { ref } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">  // \`setup\` 是一个特殊的钩子，专门用于组合式 API。</span></span>
<span class="line highlighted"><span style="color:#B392F0;">  setup</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">    const</span><span style="color:#79B8FF;"> count</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    // 将 ref 暴露给模板</span></span>
<span class="line highlighted"><span style="color:#F97583;">    return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">      count</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;{{ count }}&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>注意，在模板中使用 ref 时，我们<strong>不</strong>需要附加 <code>.value</code>。为了方便起见，当在模板中使用时，ref 会自动解包 (有一些<a href="#caveat-when-unwrapping-in-templates">注意事项</a>)。</p><p>你也可以直接在事件监听器中改变一个 ref：</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line highlighted"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;"> @</span><span style="color:#B392F0;">click</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">count</span><span style="color:#F97583;">++</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  {{ count }}</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>对于更复杂的逻辑，我们可以在同一作用域内声明更改 ref 的函数，并将它们作为方法与状态一起公开：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { ref } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  setup</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">    const</span><span style="color:#79B8FF;"> count</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#F97583;">    function</span><span style="color:#B392F0;"> increment</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line highlighted"><span style="color:#6A737D;">      // 在 JavaScript 中需要 .value</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">      count.value</span><span style="color:#F97583;">++</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    // 不要忘记同时暴露 increment 函数</span></span>
<span class="line"><span style="color:#F97583;">    return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      count,</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">      increment</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>然后，暴露的方法可以被用作事件监听器：</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line highlighted"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;"> @</span><span style="color:#B392F0;">click</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">increment</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  {{ count }}</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>这里是 <a href="https://codepen.io/vuejs-examples/pen/WNYbaqo" target="_blank" rel="noreferrer">Codepen</a> 上的例子，没有使用任何构建工具。</p><h3 id="script-setup" tabindex="-1"><code>&lt;script setup&gt;</code> <a class="header-anchor" href="#script-setup" aria-label="Permalink to &quot;\`&lt;script setup&gt;\` \\*\\* {#script-setup}&quot;">​</a></h3><p>在 <code>setup()</code> 函数中手动暴露大量的状态和方法非常繁琐。幸运的是，我们可以通过使用<a href="/guide/scaling-up/sfc.html">单文件组件 (SFC)</a> 来避免这种情况。我们可以使用 <code>&lt;script setup&gt;</code> 来大幅度地简化代码：</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line highlighted"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#B392F0;"> setup</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { ref } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> count</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> increment</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  count.value</span><span style="color:#F97583;">++</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">button</span><span style="color:#B392F0;"> @click</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;increment&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    {{ count }}</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p><a href="https://play.vuejs.org/#eNo9jUEKgzAQRa8yZKMiaNcllvYe2dgwQqiZhDhxE3L3jrW4/DPvv1/UK8Zhz6juSm82uciwIef4MOR8DImhQMIFKiwpeGgEbQwZsoE2BhsyMUwH0d66475ksuwCgSOb0CNx20ExBCc77POase8NVUN6PBdlSwKjj+vMKAlAvzOzWJ52dfYzGXXpjPoBAKX856uopDGeFfnq8XKp+gWq4FAi" target="_blank" rel="noreferrer">在演练场中尝试一下</a></p><p><code>&lt;script setup&gt;</code> 中的顶层的导入、声明的变量和函数可在同一组件的模板中直接使用。你可以理解为模板是在同一作用域内声明的一个 JavaScript 函数——它自然可以访问与它一起声明的所有内容。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>在指南的后续章节中，我们基本上都会在组合式 API 示例中使用单文件组件 + <code>&lt;script setup&gt;</code> 的语法，因为大多数 Vue 开发者都会这样使用。</p><p>如果你没有使用单文件组件，你仍然可以在 <a href="/api/composition-api-setup.html"><code>setup()</code></a> 选项中使用组合式 API。</p></div><h3 id="why-refs" tabindex="-1">为什么要使用 ref？ <a class="header-anchor" href="#why-refs" aria-label="Permalink to &quot;为什么要使用 ref？ \\*\\* {#why-refs}&quot;">​</a></h3><p>你可能会好奇：为什么我们需要使用带有 <code>.value</code> 的 ref，而不是普通的变量？为了解释这一点，我们需要简单地讨论一下 Vue 的响应式系统是如何工作的。</p><p>当你在模板中使用了一个 ref，然后改变了这个 ref 的值时，Vue 会自动检测到这个变化，并且相应地更新 DOM。这是通过一个基于依赖追踪的响应式系统实现的。当一个组件首次渲染时，Vue 会<strong>追踪</strong>在渲染过程中使用的每一个 ref。然后，当一个 ref 被修改时，它会<strong>触发</strong>追踪它的组件的一次重新渲染。</p><p>在标准的 JavaScript 中，检测普通变量的访问或修改是行不通的。然而，我们可以通过 getter 和 setter 方法来拦截对象属性的 get 和 set 操作。</p><p>该 <code>.value</code> 属性给予了 Vue 一个机会来检测 ref 何时被访问或修改。在其内部，Vue 在它的 getter 中执行追踪，在它的 setter 中执行触发。从概念上讲，你可以将 ref 看作是一个像这样的对象：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 伪代码，不是真正的实现</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> myRef</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  _value: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#F97583;">  get</span><span style="color:#B392F0;"> value</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#B392F0;">    track</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#F97583;">    return</span><span style="color:#79B8FF;"> this</span><span style="color:#E1E4E8;">._value</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#F97583;">  set</span><span style="color:#B392F0;"> value</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">newValue</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#79B8FF;">    this</span><span style="color:#E1E4E8;">._value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newValue</span></span>
<span class="line"><span style="color:#B392F0;">    trigger</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>另一个 ref 的好处是，与普通变量不同，你可以将 ref 传递给函数，同时保留对最新值和响应式连接的访问。当将复杂的逻辑重构为可重用的代码时，这将非常有用。</p><p>该响应性系统在<a href="/guide/extras/reactivity-in-depth.html">深入响应式系统</a>章节中有更详细的讨论。</p></div>`,4)),n("div",E,[s[0]||(s[0]=n("h2",{id:"declaring-methods",tabindex:"-1"},[o("声明方法 "),n("a",{class:"header-anchor",href:"#declaring-methods","aria-label":'Permalink to "声明方法 \\* {#declaring-methods}"'},"​")],-1)),t(l,{href:"https://vueschool.io/lessons/methods-in-vue-3",title:"免费的 Vue.js Methods 课程"}),s[1]||(s[1]=a(`<p>要为组件添加方法，我们需要用到 <code>methods</code> 选项。它应该是一个包含所有方法的对象：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  data</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">    return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      count: </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">  methods: {</span></span>
<span class="line highlighted"><span style="color:#B392F0;">    increment</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line highlighted"><span style="color:#79B8FF;">      this</span><span style="color:#E1E4E8;">.count</span><span style="color:#F97583;">++</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">    }</span></span>
<span class="line highlighted"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#B392F0;">  mounted</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#6A737D;">    // 在其他方法或是生命周期中也可以调用方法</span></span>
<span class="line"><span style="color:#79B8FF;">    this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">increment</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>Vue 自动为 <code>methods</code> 中的方法绑定了永远指向组件实例的 <code>this</code>。这确保了方法在作为事件监听器或回调函数时始终保持正确的 <code>this</code>。你不应该在定义 <code>methods</code> 时使用箭头函数，因为箭头函数没有自己的 <code>this</code> 上下文。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  methods: {</span></span>
<span class="line"><span style="color:#B392F0;">    increment</span><span style="color:#E1E4E8;">: () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">      // 反例：无法访问此处的 \`this\`!</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>和组件实例上的其他属性一样，方法也可以在模板上被访问。在模板中它们常常被用作事件监听器：</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;"> @</span><span style="color:#B392F0;">click</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">increment</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;{{ count }}&lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p><a href="https://play.vuejs.org/#eNplj9EKwyAMRX8l+LSx0e65uLL9hy+dZlTWqtg4BuK/z1baDgZicsPJgUR2d656B2QN45P02lErDH6c9QQKn10YCKIwAKqj7nAsPYBHCt6sCUDaYKiBS8lpLuk8/yNSb9XUrKg20uOIhnYXAPV6qhbF6fRvmOeodn6hfzwLKkx+vN5OyIFwdENHmBMAfwQia+AmBy1fV8E2gWBtjOUASInXBcxLvN4MLH0BCe1i4Q==" target="_blank" rel="noreferrer">在演练场中尝试一下</a></p><p>在上面的例子中，<code>increment</code> 方法会在 <code>&lt;button&gt;</code> 被点击时调用。</p>`,8))]),s[3]||(s[3]=a(`<h3 id="deep-reactivity" tabindex="-1">深层响应性 <a class="header-anchor" href="#deep-reactivity" aria-label="Permalink to &quot;深层响应性 {#deep-reactivity}&quot;">​</a></h3><div class="options-api"><p>在 Vue 中，默认情况下，状态是深度响应的。这意味着当改变嵌套对象或数组时，这些变化也会被检测到：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  data</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#F97583;">    return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      obj: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        nested: { count: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">        arr: [</span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;bar&#39;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  methods: {</span></span>
<span class="line"><span style="color:#B392F0;">    mutateDeeply</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#6A737D;">      // 以下都会按照期望工作</span></span>
<span class="line"><span style="color:#79B8FF;">      this</span><span style="color:#E1E4E8;">.obj.nested.count</span><span style="color:#F97583;">++</span></span>
<span class="line"><span style="color:#79B8FF;">      this</span><span style="color:#E1E4E8;">.obj.arr.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;baz&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></div><div class="composition-api"><p>Ref 可以持有任何类型的值，包括深层嵌套的对象、数组或者 JavaScript 内置的数据结构，比如 <code>Map</code>。</p><p>Ref 会使它的值具有深层响应性。这意味着即使改变嵌套对象或数组时，变化也会被检测到：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { ref } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> obj</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  nested: { count: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">  arr: [</span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;bar&#39;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#B392F0;"> mutateDeeply</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#6A737D;">  // 以下都会按照期望工作</span></span>
<span class="line"><span style="color:#E1E4E8;">  obj.value.nested.count</span><span style="color:#F97583;">++</span></span>
<span class="line"><span style="color:#E1E4E8;">  obj.value.arr.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;baz&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>非原始值将通过 <a href="#reactive"><code>reactive()</code></a> 转换为响应式代理，该函数将在后面讨论。</p><p>也可以通过 <a href="/api/reactivity-advanced.html#shallowref">shallow ref</a> 来放弃深层响应性。对于浅层 ref，只有 <code>.value</code> 的访问会被追踪。浅层 ref 可以用于避免对大型数据的响应性开销来优化性能、或者有外部库管理其内部状态的情况。</p><p>阅读更多：</p><ul><li><a href="/guide/best-practices/performance.html#reduce-reactivity-overhead-for-large-immutable-structures">减少大型不可变数据的响应性开销</a></li><li><a href="/guide/extras/reactivity-in-depth.html#integration-with-external-state-systems">与外部状态系统集成</a></li></ul></div><h3 id="dom-update-timing" tabindex="-1">DOM 更新时机 <a class="header-anchor" href="#dom-update-timing" aria-label="Permalink to &quot;DOM 更新时机 {#dom-update-timing}&quot;">​</a></h3><p>当你修改了响应式状态时，DOM 会被自动更新。但是需要注意的是，DOM 更新不是同步的。Vue 会在“next tick”更新周期中缓冲所有状态的修改，以确保不管你进行了多少次状态修改，每个组件都只会被更新一次。</p><p>要等待 DOM 更新完成后再执行额外的代码，可以使用 <a href="/api/general.html#nexttick">nextTick()</a> 全局 API：</p><div class="composition-api"><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { nextTick } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">async</span><span style="color:#F97583;"> function</span><span style="color:#B392F0;"> increment</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  count.value</span><span style="color:#F97583;">++</span></span>
<span class="line"><span style="color:#F97583;">  await</span><span style="color:#B392F0;"> nextTick</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#6A737D;">  // 现在 DOM 已经更新了</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></div><div class="options-api"><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { nextTick } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  methods: {</span></span>
<span class="line"><span style="color:#F97583;">    async</span><span style="color:#B392F0;"> increment</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#79B8FF;">      this</span><span style="color:#E1E4E8;">.count</span><span style="color:#F97583;">++</span></span>
<span class="line"><span style="color:#F97583;">      await</span><span style="color:#B392F0;"> nextTick</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#6A737D;">      // 现在 DOM 已经更新了</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></div><div class="composition-api"><h2 id="reactive" tabindex="-1"><code>reactive()</code> <a class="header-anchor" href="#reactive" aria-label="Permalink to &quot;\`reactive()\` \\*\\* {#reactive}&quot;">​</a></h2><p>还有另一种声明响应式状态的方式，即使用 <code>reactive()</code> API。与将内部值包装在特殊对象中的 ref 不同，<code>reactive()</code> 将使对象本身具有响应性：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { reactive } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> state</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> reactive</span><span style="color:#E1E4E8;">({ count: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> })</span></span></code></pre></div><blockquote><p>参考：<a href="/guide/typescript/composition-api.html#typing-reactive">为 <code>reactive()</code> 标注类型</a> <sup class="vt-badge ts"></sup></p></blockquote><p>在模板中使用：</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;"> @</span><span style="color:#B392F0;">click</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">state.count</span><span style="color:#F97583;">++</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  {{ state.count }}</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>响应式对象是 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy" target="_blank" rel="noreferrer">JavaScript 代理</a>，其行为就和普通对象一样。不同的是，Vue 能够拦截对响应式对象所有属性的访问和修改，以便进行依赖追踪和触发更新。</p><p><code>reactive()</code> 将深层地转换对象：当访问嵌套对象时，它们也会被 <code>reactive()</code> 包装。当 ref 的值是一个对象时，<code>ref()</code> 也会在内部调用它。与浅层 ref 类似，这里也有一个 <a href="/api/reactivity-advanced.html#shallowreactive"><code>shallowReactive()</code></a> API 可以选择退出深层响应性。</p><h3 id="reactive-proxy-vs-original-1" tabindex="-1">Reactive Proxy vs. Original <a class="header-anchor" href="#reactive-proxy-vs-original-1" aria-label="Permalink to &quot;Reactive Proxy vs. Original \\*\\* {#reactive-proxy-vs-original-1}&quot;">​</a></h3><p>值得注意的是，<code>reactive()</code> 返回的是一个原始对象的 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy" target="_blank" rel="noreferrer">Proxy</a>，它和原始对象是不相等的：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> raw</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {}</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> proxy</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> reactive</span><span style="color:#E1E4E8;">(raw)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 代理对象和原始对象不是全等的</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(proxy </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> raw) </span><span style="color:#6A737D;">// false</span></span></code></pre></div><p>只有代理对象是响应式的，更改原始对象不会触发更新。因此，使用 Vue 的响应式系统的最佳实践是<strong>仅使用你声明对象的代理版本</strong>。</p><p>为保证访问代理的一致性，对同一个原始对象调用 <code>reactive()</code> 会总是返回同样的代理对象，而对一个已存在的代理对象调用 <code>reactive()</code> 会返回其本身：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// 在同一个对象上调用 reactive() 会返回相同的代理</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">reactive</span><span style="color:#E1E4E8;">(raw) </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> proxy) </span><span style="color:#6A737D;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 在一个代理上调用 reactive() 会返回它自己</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">reactive</span><span style="color:#E1E4E8;">(proxy) </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> proxy) </span><span style="color:#6A737D;">// true</span></span></code></pre></div><p>这个规则对嵌套对象也适用。依靠深层响应性，响应式对象内的嵌套对象依然是代理：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> proxy</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> reactive</span><span style="color:#E1E4E8;">({})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> raw</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {}</span></span>
<span class="line"><span style="color:#E1E4E8;">proxy.nested </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> raw</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(proxy.nested </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> raw) </span><span style="color:#6A737D;">// false</span></span></code></pre></div><h3 id="limitations-of-reactive" tabindex="-1"><code>reactive()</code> 的局限性 <a class="header-anchor" href="#limitations-of-reactive" aria-label="Permalink to &quot;\`reactive()\` 的局限性 \\*\\* {#limitations-of-reactive}&quot;">​</a></h3><p><code>reactive()</code> API 有一些局限性：</p><ol><li><p><strong>有限的值类型</strong>：它只能用于对象类型 (对象、数组和如 <code>Map</code>、<code>Set</code> 这样的<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects#keyed_collections" target="_blank" rel="noreferrer">集合类型</a>)。它不能持有如 <code>string</code>、<code>number</code> 或 <code>boolean</code> 这样的<a href="https://developer.mozilla.org/en-US/docs/Glossary/Primitive" target="_blank" rel="noreferrer">原始类型</a>。</p></li><li><p><strong>不能替换整个对象</strong>：由于 Vue 的响应式跟踪是通过属性访问实现的，因此我们必须始终保持对响应式对象的相同引用。这意味着我们不能轻易地“替换”响应式对象，因为这样的话与第一个引用的响应性连接将丢失：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> state </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> reactive</span><span style="color:#E1E4E8;">({ count: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 上面的 ({ count: 0 }) 引用将不再被追踪</span></span>
<span class="line"><span style="color:#6A737D;">// (响应性连接已丢失！)</span></span>
<span class="line"><span style="color:#E1E4E8;">state </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> reactive</span><span style="color:#E1E4E8;">({ count: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> })</span></span></code></pre></div></li><li><p><strong>对解构操作不友好</strong>：当我们将响应式对象的原始类型属性解构为本地变量时，或者将该属性传递给函数时，我们将丢失响应性连接：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> state</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> reactive</span><span style="color:#E1E4E8;">({ count: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 当解构时，count 已经与 state.count 断开连接</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> { count } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> state</span></span>
<span class="line"><span style="color:#6A737D;">// 不会影响原始的 state</span></span>
<span class="line"><span style="color:#E1E4E8;">count</span><span style="color:#F97583;">++</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 该函数接收到的是一个普通的数字</span></span>
<span class="line"><span style="color:#6A737D;">// 并且无法追踪 state.count 的变化</span></span>
<span class="line"><span style="color:#6A737D;">// 我们必须传入整个对象以保持响应性</span></span>
<span class="line"><span style="color:#B392F0;">callSomeFunction</span><span style="color:#E1E4E8;">(state.count)</span></span></code></pre></div></li></ol><p>由于这些限制，我们建议使用 <code>ref()</code> 作为声明响应式状态的主要 API。</p><h2 id="additional-ref-unwrapping-details" tabindex="-1">额外的 ref 解包细节 <a class="header-anchor" href="#additional-ref-unwrapping-details" aria-label="Permalink to &quot;额外的 ref 解包细节 \\*\\* {#additional-ref-unwrapping-details}&quot;">​</a></h2><h3 id="ref-unwrapping-as-reactive-object-property" tabindex="-1">作为 reactive 对象的属性 <a class="header-anchor" href="#ref-unwrapping-as-reactive-object-property" aria-label="Permalink to &quot;作为 reactive 对象的属性 \\*\\* {#ref-unwrapping-as-reactive-object-property}&quot;">​</a></h3><p>一个 ref 会在作为响应式对象的属性被访问或修改时自动解包。换句话说，它的行为就像一个普通的属性：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> count</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> state</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> reactive</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  count</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(state.count) </span><span style="color:#6A737D;">// 0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">state.count </span><span style="color:#F97583;">=</span><span style="color:#79B8FF;"> 1</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(count.value) </span><span style="color:#6A737D;">// 1</span></span></code></pre></div><p>如果将一个新的 ref 赋值给一个关联了已有 ref 的属性，那么它会替换掉旧的 ref：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> otherCount</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">state.count </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> otherCount</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(state.count) </span><span style="color:#6A737D;">// 2</span></span>
<span class="line"><span style="color:#6A737D;">// 原始 ref 现在已经和 state.count 失去联系</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(count.value) </span><span style="color:#6A737D;">// 1</span></span></code></pre></div><p>只有当嵌套在一个深层响应式对象内时，才会发生 ref 解包。当其作为<a href="/api/reactivity-advanced.html#shallowreactive">浅层响应式对象</a>的属性被访问时不会解包。</p><h3 id="caveat-in-arrays-and-collections" tabindex="-1">数组和集合的注意事项 <a class="header-anchor" href="#caveat-in-arrays-and-collections" aria-label="Permalink to &quot;数组和集合的注意事项 \\*\\* {#caveat-in-arrays-and-collections}&quot;">​</a></h3><p>与 reactive 对象不同的是，当 ref 作为响应式数组或原生集合类型 (如 <code>Map</code>) 中的元素被访问时，它<strong>不会</strong>被解包：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> books</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> reactive</span><span style="color:#E1E4E8;">([</span><span style="color:#B392F0;">ref</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Vue 3 Guide&#39;</span><span style="color:#E1E4E8;">)])</span></span>
<span class="line"><span style="color:#6A737D;">// 这里需要 .value</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(books[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].value)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> map</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> reactive</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> Map</span><span style="color:#E1E4E8;">([[</span><span style="color:#9ECBFF;">&#39;count&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">ref</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)]]))</span></span>
<span class="line"><span style="color:#6A737D;">// 这里需要 .value</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(map.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;count&#39;</span><span style="color:#E1E4E8;">).value)</span></span></code></pre></div><h3 id="caveat-when-unwrapping-in-templates" tabindex="-1">在模板中解包的注意事项 <a class="header-anchor" href="#caveat-when-unwrapping-in-templates" aria-label="Permalink to &quot;在模板中解包的注意事项 \\*\\* {#caveat-when-unwrapping-in-templates}&quot;">​</a></h3><p>在模板渲染上下文中，只有顶级的 ref 属性才会被解包。</p><p>在下面的例子中，<code>count</code> 和 <code>object</code> 是顶级属性，但 <code>object.id</code> 不是：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> count</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> ref</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> object</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> { id: </span><span style="color:#B392F0;">ref</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) }</span></span></code></pre></div><p>因此，这个表达式按预期工作：</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">{{ count </span><span style="color:#F97583;">+</span><span style="color:#79B8FF;"> 1</span><span style="color:#E1E4E8;"> }}</span></span></code></pre></div><p>...但这个<strong>不会</strong>：</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">{{ object.id </span><span style="color:#F97583;">+</span><span style="color:#79B8FF;"> 1</span><span style="color:#E1E4E8;"> }}</span></span></code></pre></div><p>渲染的结果将是 <code>[object Object]1</code>，因为在计算表达式时 <code>object.id</code> 没有被解包，仍然是一个 ref 对象。为了解决这个问题，我们可以将 <code>id</code> 解构为一个顶级属性：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">id</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> object</span></span></code></pre></div><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">{{ id </span><span style="color:#F97583;">+</span><span style="color:#79B8FF;"> 1</span><span style="color:#E1E4E8;"> }}</span></span></code></pre></div><p>现在渲染的结果将是 <code>2</code>。</p><p>另一个需要注意的点是，如果 ref 是文本插值的最终计算值 (即 <code>{{ }}</code> 标签)，那么它将被解包，因此以下内容将渲染为 <code>1</code>：</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">{{ object.id }}</span></span></code></pre></div><p>该特性仅仅是文本插值的一个便利特性，等价于 <code>{{ object.id.value }}</code>。</p></div><div class="options-api"><h3 id="stateful-methods" tabindex="-1">有状态方法 <a class="header-anchor" href="#stateful-methods" aria-label="Permalink to &quot;有状态方法 \\* {#stateful-methods}&quot;">​</a></h3><p>在某些情况下，我们可能需要动态地创建一个方法函数，比如创建一个预置防抖的事件处理器：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { debounce } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;lodash-es&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  methods: {</span></span>
<span class="line"><span style="color:#6A737D;">    // 使用 Lodash 的防抖函数</span></span>
<span class="line"><span style="color:#E1E4E8;">    click: </span><span style="color:#B392F0;">debounce</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#6A737D;">      // ... 对点击的响应 ...</span></span>
<span class="line"><span style="color:#E1E4E8;">    }, </span><span style="color:#79B8FF;">500</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>不过这种方法对于被重用的组件来说是有问题的，因为这个预置防抖的函数是<strong>有状态的</strong>：它在运行时维护着一个内部状态。如果多个组件实例都共享这同一个预置防抖的函数，那么它们之间将会互相影响。</p><p>要保持每个组件实例的防抖函数都彼此独立，我们可以改为在 <code>created</code> 生命周期钩子中创建这个预置防抖的函数：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#F97583;"> default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  created</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#6A737D;">    // 每个实例都有了自己的预置防抖的处理函数</span></span>
<span class="line"><span style="color:#79B8FF;">    this</span><span style="color:#E1E4E8;">.debouncedClick </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> _.</span><span style="color:#B392F0;">debounce</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.click, </span><span style="color:#79B8FF;">500</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#B392F0;">  unmounted</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#6A737D;">    // 最好是在组件卸载时</span></span>
<span class="line"><span style="color:#6A737D;">    // 清除掉防抖计时器</span></span>
<span class="line"><span style="color:#79B8FF;">    this</span><span style="color:#E1E4E8;">.debouncedClick.</span><span style="color:#B392F0;">cancel</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  methods: {</span></span>
<span class="line"><span style="color:#B392F0;">    click</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#6A737D;">      // ... 对点击的响应 ...</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></div>`,10))])}const f=p(i,[["render",y]]);export{b as __pageData,f as default};
