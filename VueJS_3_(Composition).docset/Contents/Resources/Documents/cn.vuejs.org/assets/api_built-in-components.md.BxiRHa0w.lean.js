import{_ as n,c as a,b as l,o as p}from"./chunks/framework.B2oIMGqn.js";const F=JSON.parse('{"title":"内置组件","description":"","frontmatter":{"pageClass":"api"},"headers":[{"level":2,"title":"<Transition>","slug":"transition","link":"#transition","children":[]},{"level":2,"title":"<TransitionGroup>","slug":"transitiongroup","link":"#transitiongroup","children":[]},{"level":2,"title":"<KeepAlive>","slug":"keepalive","link":"#keepalive","children":[]},{"level":2,"title":"<Teleport>","slug":"teleport","link":"#teleport","children":[]},{"level":2,"title":"<Suspense>","slug":"suspense","link":"#suspense","children":[]}],"relativePath":"api/built-in-components.md","filePath":"api/built-in-components.md"}'),o={name:"api/built-in-components.md"};function e(t,s,c,r,i,E){return p(),a("div",null,s[0]||(s[0]=[l(`<h1 id="built-in-components" tabindex="-1">内置组件 <a class="header-anchor" href="#built-in-components" aria-label="Permalink to &quot;内置组件 {#built-in-components}&quot;">​</a></h1><div class="info custom-block"><p class="custom-block-title">组件注册和使用</p><p>内置组件无需注册便可以直接在模板中使用。它们也支持 tree-shake：仅在使用时才会包含在构建中。</p><p>在<a href="/guide/extras/render-function.html">渲染函数</a>中使用它们时，需要显式导入。例如：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { h, Transition } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">h</span><span style="color:#E1E4E8;">(Transition, {</span></span>
<span class="line"><span style="color:#6A737D;">  /* props */</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre></div></div><h2 id="transition" tabindex="-1"><code>&lt;Transition&gt;</code> <a class="header-anchor" href="#transition" aria-label="Permalink to &quot;\`&lt;Transition&gt;\` {#transition}&quot;">​</a></h2><p>为<strong>单个</strong>元素或组件提供动画过渡效果。</p><ul><li><p><strong>Props</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">interface</span><span style="color:#B392F0;"> TransitionProps</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * 用于自动生成过渡 CSS class 名。</span></span>
<span class="line"><span style="color:#6A737D;">   * 例如 \`name: &#39;fade&#39;\` 将自动扩展为 \`.fade-enter\`、</span></span>
<span class="line"><span style="color:#6A737D;">   * \`.fade-enter-active\` 等。</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#FFAB70;">  name</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> string</span></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * 是否应用 CSS 过渡 class。</span></span>
<span class="line"><span style="color:#6A737D;">   * 默认：true</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#FFAB70;">  css</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> boolean</span></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * 指定要等待的过渡事件类型</span></span>
<span class="line"><span style="color:#6A737D;">   * 来确定过渡结束的时间。</span></span>
<span class="line"><span style="color:#6A737D;">   * 默认情况下会自动检测</span></span>
<span class="line"><span style="color:#6A737D;">   * 持续时间较长的类型。</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#FFAB70;">  type</span><span style="color:#F97583;">?:</span><span style="color:#9ECBFF;"> &#39;transition&#39;</span><span style="color:#F97583;"> |</span><span style="color:#9ECBFF;"> &#39;animation&#39;</span></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * 显式指定过渡的持续时间。</span></span>
<span class="line"><span style="color:#6A737D;">   * 默认情况下是等待过渡效果的根元素的第一个 \`transitionend\`</span></span>
<span class="line"><span style="color:#6A737D;">   * 或\`animationend\`事件。</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#FFAB70;">  duration</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> number</span><span style="color:#F97583;"> |</span><span style="color:#E1E4E8;"> { </span><span style="color:#FFAB70;">enter</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> number</span><span style="color:#E1E4E8;">; </span><span style="color:#FFAB70;">leave</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> number</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * 控制离开/进入过渡的时序。</span></span>
<span class="line"><span style="color:#6A737D;">   * 默认情况下是同时的。</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#FFAB70;">  mode</span><span style="color:#F97583;">?:</span><span style="color:#9ECBFF;"> &#39;in-out&#39;</span><span style="color:#F97583;"> |</span><span style="color:#9ECBFF;"> &#39;out-in&#39;</span><span style="color:#F97583;"> |</span><span style="color:#9ECBFF;"> &#39;default&#39;</span></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * 是否对初始渲染使用过渡。</span></span>
<span class="line"><span style="color:#6A737D;">   * 默认：false</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#FFAB70;">  appear</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> boolean</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * 用于自定义过渡 class 的 prop。</span></span>
<span class="line"><span style="color:#6A737D;">   * 在模板中使用短横线命名，例如：enter-from-class=&quot;xxx&quot;</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#FFAB70;">  enterFromClass</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> string</span></span>
<span class="line"><span style="color:#FFAB70;">  enterActiveClass</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> string</span></span>
<span class="line"><span style="color:#FFAB70;">  enterToClass</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> string</span></span>
<span class="line"><span style="color:#FFAB70;">  appearFromClass</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> string</span></span>
<span class="line"><span style="color:#FFAB70;">  appearActiveClass</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> string</span></span>
<span class="line"><span style="color:#FFAB70;">  appearToClass</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> string</span></span>
<span class="line"><span style="color:#FFAB70;">  leaveFromClass</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> string</span></span>
<span class="line"><span style="color:#FFAB70;">  leaveActiveClass</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> string</span></span>
<span class="line"><span style="color:#FFAB70;">  leaveToClass</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> string</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>事件</strong></p><ul><li><code>@before-enter</code></li><li><code>@before-leave</code></li><li><code>@enter</code></li><li><code>@leave</code></li><li><code>@appear</code></li><li><code>@after-enter</code></li><li><code>@after-leave</code></li><li><code>@after-appear</code></li><li><code>@enter-cancelled</code></li><li><code>@leave-cancelled</code> (<code>v-show</code> only)</li><li><code>@appear-cancelled</code></li></ul></li><li><p><strong>示例</strong></p><p>简单元素：</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">Transition</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">div</span><span style="color:#B392F0;"> v-if</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">ok</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;toggled content&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#79B8FF;">Transition</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>通过改变 <code>key</code> 属性来强制过度执行：</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">Transition</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">key</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">text</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;{{ text }}&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#79B8FF;">Transition</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>动态组件，初始渲染时带有过渡模式 + 动画出现：</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">Transition</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;fade&quot;</span><span style="color:#B392F0;"> mode</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;out-in&quot;</span><span style="color:#B392F0;"> appear</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">component</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">is</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">view</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">component</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#79B8FF;">Transition</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>监听过渡事件：</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">Transition</span><span style="color:#E1E4E8;"> @</span><span style="color:#B392F0;">after-enter</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">onTransitionComplete</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">div</span><span style="color:#B392F0;"> v-show</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">ok</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;toggled content&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#79B8FF;">Transition</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p><strong>参考</strong><a href="/guide/built-ins/transition.html">指南 - <code>&lt;Transition&gt;</code></a></p></li></ul><h2 id="transitiongroup" tabindex="-1"><code>&lt;TransitionGroup&gt;</code> <a class="header-anchor" href="#transitiongroup" aria-label="Permalink to &quot;\`&lt;TransitionGroup&gt;\` {#transitiongroup}&quot;">​</a></h2><p>为列表中的<strong>多个</strong>元素或组件提供过渡效果。</p><ul><li><p><strong>Props</strong></p><p><code>&lt;TransitionGroup&gt;</code> 拥有与 <code>&lt;Transition&gt;</code> 除了 <code>mode</code> 以外所有的 props，并增加了两个额外的 props：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">interface</span><span style="color:#B392F0;"> TransitionGroupProps</span><span style="color:#F97583;"> extends</span><span style="color:#B392F0;"> Omit</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">TransitionProps</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;mode&#39;</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * 如果未定义，则渲染为片段 (fragment)。</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#FFAB70;">  tag</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> string</span></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * 用于自定义过渡期间被应用的 CSS class。</span></span>
<span class="line"><span style="color:#6A737D;">   * 在模板中使用 kebab-case，例如 move-class=&quot;xxx&quot;</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#FFAB70;">  moveClass</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> string</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>事件</strong></p><p><code>&lt;TransitionGroup&gt;</code> 抛出与 <code>&lt;Transition&gt;</code> 相同的事件。</p></li><li><p><strong>详细信息</strong></p><p>默认情况下，<code>&lt;TransitionGroup&gt;</code> 不会渲染一个容器 DOM 元素，但是可以通过 <code>tag</code> prop 启用。</p><p>注意，每个 <code>&lt;transition-group&gt;</code> 的子节点必须有<a href="/guide/essentials/list.html#maintaining-state-with-key"><strong>独立的 key</strong></a>，动画才能正常工作。</p><p><code>&lt;TransitionGroup&gt;</code> 支持通过 CSS transform 控制移动效果。当一个子节点在屏幕上的位置在更新之后发生变化时，它会被添加一个使其位移的 CSS class (基于 <code>name</code> attribute 推导，或使用 <code>move-class</code> prop 显式配置)。如果使其位移的 class 被添加时 CSS 的 <code>transform</code> 属性是“可过渡的”，那么该元素会基于 <a href="https://aerotwist.com/blog/flip-your-animations/" target="_blank" rel="noreferrer">FLIP 技巧</a>平滑地到达动画终点。</p></li><li><p><strong>示例</strong></p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">TransitionGroup</span><span style="color:#B392F0;"> tag</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;ul&quot;</span><span style="color:#B392F0;"> name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;slide&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">li</span><span style="color:#B392F0;"> v-for</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">item </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> items</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">key</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">item.id</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    {{ item.text }}</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">li</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#79B8FF;">TransitionGroup</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p><strong>参考</strong><a href="/guide/built-ins/transition-group.html">指南 - TransitionGroup</a></p></li></ul><h2 id="keepalive" tabindex="-1"><code>&lt;KeepAlive&gt;</code> <a class="header-anchor" href="#keepalive" aria-label="Permalink to &quot;\`&lt;KeepAlive&gt;\` {#keepalive}&quot;">​</a></h2><p>缓存包裹在其中的动态切换组件。</p><ul><li><p><strong>Props</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">interface</span><span style="color:#B392F0;"> KeepAliveProps</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * 如果指定，则只有与 \`include\` 名称</span></span>
<span class="line"><span style="color:#6A737D;">   * 匹配的组件才会被缓存。</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#FFAB70;">  include</span><span style="color:#F97583;">?:</span><span style="color:#B392F0;"> MatchPattern</span></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * 任何名称与 \`exclude\`</span></span>
<span class="line"><span style="color:#6A737D;">   * 匹配的组件都不会被缓存。</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#FFAB70;">  exclude</span><span style="color:#F97583;">?:</span><span style="color:#B392F0;"> MatchPattern</span></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * 最多可以缓存多少组件实例。</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#FFAB70;">  max</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> number</span><span style="color:#F97583;"> |</span><span style="color:#79B8FF;"> string</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#B392F0;"> MatchPattern</span><span style="color:#F97583;"> =</span><span style="color:#79B8FF;"> string</span><span style="color:#F97583;"> |</span><span style="color:#B392F0;"> RegExp</span><span style="color:#F97583;"> |</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">string</span><span style="color:#F97583;"> |</span><span style="color:#B392F0;"> RegExp</span><span style="color:#E1E4E8;">)[]</span></span></code></pre></div></li><li><p><strong>详细信息</strong></p><p><code>&lt;KeepAlive&gt;</code> 包裹动态组件时，会缓存不活跃的组件实例，而不是销毁它们。</p><p>任何时候都只能有一个活跃组件实例作为 <code>&lt;KeepAlive&gt;</code> 的直接子节点。</p><p>当一个组件在 <code>&lt;KeepAlive&gt;</code> 中被切换时，它的 <code>activated</code> 和 <code>deactivated</code> 生命周期钩子将被调用，用来替代 <code>mounted</code> 和 <code>unmounted</code>。这适用于 <code>&lt;KeepAlive&gt;</code> 的直接子节点及其所有子孙节点。</p></li><li><p><strong>示例</strong></p><p>基本用法：</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">KeepAlive</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">component</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">is</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">view</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">component</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#79B8FF;">KeepAlive</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>与 <code>v-if</code> / <code>v-else</code> 分支一起使用时，同一时间只能有一个组件被渲染：</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">KeepAlive</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">comp-a</span><span style="color:#B392F0;"> v-if</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">a </span><span style="color:#F97583;">&gt;</span><span style="color:#79B8FF;"> 1</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">comp-a</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">comp-b</span><span style="color:#B392F0;"> v-else</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">comp-b</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#79B8FF;">KeepAlive</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>与 <code>&lt;Transition&gt;</code> 一起使用：</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">Transition</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#79B8FF;">KeepAlive</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">component</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">is</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">view</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">component</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#79B8FF;">KeepAlive</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#79B8FF;">Transition</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>使用 <code>include</code> / <code>exclude</code>：</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">&lt;!-- 用逗号分隔的字符串 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">KeepAlive</span><span style="color:#B392F0;"> include</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;a,b&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">component</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">is</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">view</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">component</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#79B8FF;">KeepAlive</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- 正则表达式 (使用 \`v-bind\`) --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">KeepAlive</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">include</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;/</span><span style="color:#DBEDFF;">a</span><span style="color:#F97583;">|</span><span style="color:#DBEDFF;">b</span><span style="color:#9ECBFF;">/&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">component</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">is</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">view</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">component</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#79B8FF;">KeepAlive</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- 数组 (使用 \`v-bind\`) --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">KeepAlive</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">include</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">[</span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;b&#39;</span><span style="color:#E1E4E8;">]</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">component</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">is</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">view</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">component</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#79B8FF;">KeepAlive</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>使用 <code>max</code>：</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">KeepAlive</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">max</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">10</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">component</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">is</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">view</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">component</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#79B8FF;">KeepAlive</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p><strong>参考</strong><a href="/guide/built-ins/keep-alive.html">指南 - KeepAlive</a></p></li></ul><h2 id="teleport" tabindex="-1"><code>&lt;Teleport&gt;</code> <a class="header-anchor" href="#teleport" aria-label="Permalink to &quot;\`&lt;Teleport&gt;\` {#teleport}&quot;">​</a></h2><p>将其插槽内容渲染到 DOM 中的另一个位置。</p><ul><li><p><strong>Props</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">interface</span><span style="color:#B392F0;"> TeleportProps</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * 必填项。指定目标容器。</span></span>
<span class="line"><span style="color:#6A737D;">   * 可以是选择器或实际元素。</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#FFAB70;">  to</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> string</span><span style="color:#F97583;"> |</span><span style="color:#B392F0;"> HTMLElement</span></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * 当值为 \`true\` 时，内容将保留在其原始位置</span></span>
<span class="line"><span style="color:#6A737D;">   * 而不是移动到目标容器中。</span></span>
<span class="line"><span style="color:#6A737D;">   * 可以动态更改。</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#FFAB70;">  disabled</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> boolean</span></span>
<span class="line"><span style="color:#6A737D;">  /**</span></span>
<span class="line"><span style="color:#6A737D;">   * 当值为 \`true\` 时，Teleport 将推迟</span></span>
<span class="line"><span style="color:#6A737D;">   * 直到应用的其他部分挂载后</span></span>
<span class="line"><span style="color:#6A737D;">   * 再解析其目标。(3.5+)</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#FFAB70;">  defer</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> boolean</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>示例</strong></p><p>指定目标容器：</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">Teleport</span><span style="color:#B392F0;"> to</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;#some-id&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">Teleport</span><span style="color:#B392F0;"> to</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;.some-class&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">Teleport</span><span style="color:#B392F0;"> to</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;[data-teleport]&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span></code></pre></div><p>有条件地禁用：</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">Teleport</span><span style="color:#B392F0;"> to</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;#popup&quot;</span><span style="color:#E1E4E8;"> :</span><span style="color:#B392F0;">disabled</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">displayVideoInline</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">video</span><span style="color:#B392F0;"> src</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;./my-movie.mp4&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#79B8FF;">Teleport</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>延迟目标解析 <sup class="vt-badge" data-text="3.5+"></sup>：</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#79B8FF;">Teleport</span><span style="color:#B392F0;"> defer</span><span style="color:#B392F0;"> to</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;#late-div&quot;</span><span style="color:#E1E4E8;">&gt;...&lt;/</span><span style="color:#79B8FF;">Teleport</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- 稍后出现于模板中的某处 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#B392F0;"> id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;late-div&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p><strong>参考</strong><a href="/guide/built-ins/teleport.html">指南 - Teleport</a></p></li></ul><h2 id="suspense" tabindex="-1"><code>&lt;Suspense&gt;</code> <sup class="vt-badge experimental"></sup> <a class="header-anchor" href="#suspense" aria-label="Permalink to &quot;\`&lt;Suspense&gt;\` &lt;sup class=&quot;vt-badge experimental&quot; /&gt; {#suspense}&quot;">​</a></h2><p>用于协调对组件树中嵌套的异步依赖的处理。</p><ul><li><p><strong>Props</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">interface</span><span style="color:#B392F0;"> SuspenseProps</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#FFAB70;">  timeout</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> string</span><span style="color:#F97583;"> |</span><span style="color:#79B8FF;"> number</span></span>
<span class="line"><span style="color:#FFAB70;">  suspensible</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> boolean</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>事件</strong></p><ul><li><code>@resolve</code></li><li><code>@pending</code></li><li><code>@fallback</code></li></ul></li><li><p><strong>详细信息</strong></p><p><code>&lt;Suspense&gt;</code> 接受两个插槽：<code>#default</code> 和 <code>#fallback</code>。它将在内存中渲染默认插槽的同时展示后备插槽内容。</p><p>如果在渲染时遇到异步依赖项 (<a href="/guide/components/async.html">异步组件</a>和具有 <a href="/guide/built-ins/suspense.html#async-setup"><code>async setup()</code></a> 的组件)，它将等到所有异步依赖项解析完成时再显示默认插槽。</p><p>通过将 Suspense 设置为 <code>suspensible</code>，所有的异步依赖将由父级 Suspense 处理。请参阅<a href="https://github.com/vuejs/core/pull/6736" target="_blank" rel="noreferrer">实现细节</a></p></li><li><p><strong>参考</strong><a href="/guide/built-ins/suspense.html">指南 - Suspense</a></p></li></ul>`,17)]))}const d=n(o,[["render",e]]);export{F as __pageData,d as default};
